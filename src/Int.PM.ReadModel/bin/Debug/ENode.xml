<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ENode</name>
    </assembly>
    <members>
        <member name="T:ENode.Commanding.EventAlreadyExistException">
            <summary>Represents an exception when tring to add a duplicated event into command context.
            </summary>
        </member>
        <member name="M:ENode.Commanding.EventAlreadyExistException.#ctor(System.Object,System.Type)">
            <summary>Parameterized constructor.
            </summary>
            <param name="id">The event id.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:ENode.Commanding.AggregateRootAlreadyExistException">
            <summary>Represents an exception when tring to add a duplicated aggregate root into the command context.
            </summary>
        </member>
        <member name="M:ENode.Commanding.AggregateRootAlreadyExistException.#ctor(System.Object,System.Type)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="T:ENode.Commanding.AggregateCommand`1">
            <summary>Represents an abstract command.
            </summary>
        </member>
        <member name="T:ENode.Commanding.Command">
            <summary>Represents an abstract command.
            </summary>
        </member>
        <member name="T:ENode.Commanding.ICommand">
            <summary>Represents a command.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommand.GetKey">
            <summary>Represents a key of the command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ENode.Commanding.ICommand.Id">
            <summary>Represents the unique identifier of the command.
            </summary>
        </member>
        <member name="P:ENode.Commanding.ICommand.RetryCount">
            <summary>Represents the times the command should retry when the command execution has concurrent exception.
            </summary>
        </member>
        <member name="P:ENode.Commanding.ICommand.Items">
            <summary>Represents the extension information of the command.
            </summary>
        </member>
        <member name="M:ENode.Commanding.Command.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ENode.Commanding.Command.GetKey">
            <summary>Returns string.Empty by default.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ENode.Commanding.Command.Id">
            <summary>Represents the unique identifier of the command.
            </summary>
        </member>
        <member name="P:ENode.Commanding.Command.RetryCount">
            <summary>Represents the retry count of the command.
            </summary>
        </member>
        <member name="P:ENode.Commanding.Command.Items">
            <summary>Represents the additional information of the command.
            </summary>
        </member>
        <member name="T:ENode.Commanding.IAggregateCommand">
            <summary>Represents a command which associated with an aggregate.
            </summary>
        </member>
        <member name="P:ENode.Commanding.IAggregateCommand.AggregateRootId">
            <summary>Represents the aggregate root id.
            </summary>
        </member>
        <member name="M:ENode.Commanding.AggregateCommand`1.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ENode.Commanding.AggregateCommand`1.#ctor(`0)">
            <summary>Parameterized constructor.
            </summary>
            <param name="aggregateRootId"></param>
        </member>
        <member name="M:ENode.Commanding.AggregateCommand`1.GetKey">
            <summary>Returns the aggregate root id as the key.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ENode.Commanding.AggregateCommand`1.AggregateRootId">
            <summary>Represents the source aggregate root id of the aggregate command.
            </summary>
        </member>
        <member name="T:ENode.Commanding.CommandSendException">
            <summary>Represents a command send exception.
            </summary>
        </member>
        <member name="M:ENode.Commanding.CommandSendException.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ENode.Commanding.CommandSendException.#ctor(System.String)">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ENode.Commanding.CommandSendException.#ctor(System.String,System.Exception)">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:ENode.Commanding.CommandSendException.#ctor(System.String,System.Object[])">
            <summary>Parameterized constructor.
            </summary>
            <param name="messageFormat"></param>
            <param name="args"></param>
        </member>
        <member name="T:ENode.Commanding.CommandSendResult">
            <summary>Represents a command send result.
            </summary>
        </member>
        <member name="M:ENode.Commanding.CommandSendResult.#ctor(ENode.Commanding.CommandSendStatus,System.String)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="P:ENode.Commanding.CommandSendResult.Status">
            <summary>Represents the send status of the command.
            </summary>
        </member>
        <member name="P:ENode.Commanding.CommandSendResult.ErrorMessage">
            <summary>Represents the error message if send the command is failed.
            </summary>
        </member>
        <member name="T:ENode.Commanding.CommandSendStatus">
            <summary>Represents the command send result status enum.
            </summary>
        </member>
        <member name="T:ENode.Commanding.CommandReturnType">
            <summary>A enum defines the command result return type.
            </summary>
        </member>
        <member name="F:ENode.Commanding.CommandReturnType.CommandExecuted">
            <summary>Return the command result when the command execution has the following cases:
            1. the command execution meets some error or exception;
            2. the command execution makes nothing changes of domain;
            3. the command execution success, and the domain event is sent to the message queue successfully.
            </summary>
        </member>
        <member name="F:ENode.Commanding.CommandReturnType.EventHandled">
            <summary>Return the command result when the command execution has the following cases:
            1. the command execution meets some error or exception;
            2. the command execution makes nothing changes of domain;
            3. the command execution success, and the domain event is handled.
            </summary>
        </member>
        <member name="T:ENode.Commanding.HandledCommand">
            <summary>Represents a handled command which contains the command and the event stream information.
            </summary>
        </member>
        <member name="M:ENode.Commanding.HandledCommand.#ctor(ENode.Commanding.ICommand,System.String,System.String,System.Collections.Generic.IEnumerable{ENode.Eventing.IEvent})">
            <summary>Parameterized constructor.
            </summary>
            <param name="command"></param>
            <param name="sourceId"></param>
            <param name="sourceType"></param>
            <param name="evnts"></param>
        </member>
        <member name="M:ENode.Commanding.HandledCommand.ToString">
            <summary>Overrides to return the handled command's useful information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ENode.Commanding.HandledCommand.Command">
            <summary>The command object.
            </summary>
        </member>
        <member name="P:ENode.Commanding.HandledCommand.SourceId">
            <summary>The identifier of the source.
            </summary>
        </member>
        <member name="P:ENode.Commanding.HandledCommand.SourceType">
            <summary>The type of the source.
            </summary>
        </member>
        <member name="P:ENode.Commanding.HandledCommand.Events">
            <summary>The events.
            </summary>
        </member>
        <member name="T:ENode.Commanding.HandledAggregateCommand">
            <summary>Represents a handled aggregate command which contains the command and the event stream key information.
            </summary>
        </member>
        <member name="M:ENode.Commanding.HandledAggregateCommand.#ctor(ENode.Commanding.ICommand,System.String,System.String,System.String,System.Int32)">
            <summary>Parameterized constructor.
            </summary>
            <param name="command"></param>
            <param name="sourceId"></param>
            <param name="sourceType"></param>
            <param name="aggregateRootId"></param>
            <param name="aggregateRootTypeCode"></param>
        </member>
        <member name="M:ENode.Commanding.HandledAggregateCommand.ToString">
            <summary>Overrides to return the handled aggregate command's useful information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ENode.Commanding.HandledAggregateCommand.AggregateRootId">
            <summary>The aggregate root id.
            </summary>
        </member>
        <member name="P:ENode.Commanding.HandledAggregateCommand.AggregateRootTypeCode">
            <summary>The aggregate root type code.
            </summary>
        </member>
        <member name="T:ENode.Commanding.ICommandRouteKeyProvider">
            <summary>A provider which can return a route key for the given command.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommandRouteKeyProvider.GetRouteKey(ENode.Commanding.ICommand)">
            <summary>Returns a route key for the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:ENode.Commanding.ICommandStore">
            <summary>Represents a command store to store all the handled commands.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommandStore.Add(ENode.Commanding.HandledCommand)">
            <summary>Add the given handled command to the command store.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommandStore.Remove(System.String)">
            <summary>Remove a handled command by commandId.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Commanding.ICommandStore.Get(System.String)">
            <summary>Get a handled command by commandId.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ENode.Commanding.IExecutedCommandService">
            <summary>Represents a service which process the executed command.
            </summary>
        </member>
        <member name="M:ENode.Commanding.IExecutedCommandService.ProcessExecutedCommand(ENode.Commanding.ICommandExecuteContext,ENode.Commanding.IAggregateCommand,ENode.Commanding.CommandStatus,System.String,System.String,System.String)">
            <summary>Process the executed aggregate command.
            </summary>
            <param name="context"></param>
            <param name="command"></param>
            <param name="commandStatus"></param>
            <param name="aggregateRootId"></param>
            <param name="exceptionTypeName"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:ENode.Commanding.IExecutedCommandService.ProcessExecutedCommand(ENode.Commanding.ICommandExecuteContext,ENode.Commanding.ICommand,ENode.Commanding.CommandStatus,System.String,System.String)">
            <summary>Process the executed command.
            </summary>
            <param name="context"></param>
            <param name="command"></param>
            <param name="commandStatus"></param>
            <param name="exceptionTypeName"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:ENode.Commanding.Impl.SqlServerCommandStore.#ctor">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="T:ENode.Commanding.CommandResult">
            <summary>Represents a command result.
            </summary>
        </member>
        <member name="M:ENode.Commanding.CommandResult.#ctor(ENode.Commanding.CommandStatus,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="P:ENode.Commanding.CommandResult.Status">
            <summary>Represents the result status of the command.
            </summary>
        </member>
        <member name="P:ENode.Commanding.CommandResult.CommandId">
            <summary>Represents the unique identifier of the command.
            </summary>
        </member>
        <member name="P:ENode.Commanding.CommandResult.AggregateRootId">
            <summary>Represents the aggregate root id associated with the command.
            </summary>
        </member>
        <member name="P:ENode.Commanding.CommandResult.ExceptionTypeName">
            <summary>Represents the exception type name if the command has any exception.
            </summary>
        </member>
        <member name="P:ENode.Commanding.CommandResult.ErrorMessage">
            <summary>Represents the error message if the command is failed.
            </summary>
        </member>
        <member name="P:ENode.Commanding.CommandResult.Items">
            <summary>Represents the extension information of the command result.
            </summary>
        </member>
        <member name="T:ENode.Commanding.CommandStatus">
            <summary>Represents the command result status enum.
            </summary>
        </member>
        <member name="T:ENode.Commanding.ICommandService">
            <summary>Represents a command service.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommandService.SendAsync(ENode.Commanding.ICommand)">
            <summary>Send a command asynchronously.
            </summary>
            <param name="command">The command to send.</param>
            <returns>A task which contains the send result of the command.</returns>
        </member>
        <member name="M:ENode.Commanding.ICommandService.Send(ENode.Commanding.ICommand)">
            <summary>Send a command synchronously.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="M:ENode.Commanding.ICommandService.Send(ENode.Commanding.ICommand,System.String,System.String)">
            <summary>Send a command synchronously.
            </summary>
            <param name="command">The command to send.</param>
            <param name="sourceId">The identifier of the source.</param>
            <param name="sourceExceptionId">The type of the source.</param>
        </member>
        <member name="M:ENode.Commanding.ICommandService.Execute(ENode.Commanding.ICommand)">
            <summary>Execute a command asynchronously with the default command return type.
            </summary>
            <param name="command">The command to execute.</param>
            <returns>A task which contains the result of the command.</returns>
        </member>
        <member name="M:ENode.Commanding.ICommandService.Execute(ENode.Commanding.ICommand,ENode.Commanding.CommandReturnType)">
            <summary>Execute a command asynchronously with the specified command return type.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="commandReturnType">The return type of the command.</param>
            <returns>A task which contains the result of the command.</returns>
        </member>
        <member name="T:ENode.Commanding.ICommandExecuteContext">
            <summary>Represents a context environment for command executor executing command.
            </summary>
        </member>
        <member name="T:ENode.Commanding.ICommandContext">
            <summary>Represents a command context for command handler handling command.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommandContext.Add(ENode.Domain.IAggregateRoot)">
            <summary>Add a new aggregate into the current command context.
            </summary>
            <param name="aggregateRoot"></param>
        </member>
        <member name="M:ENode.Commanding.ICommandContext.Get``1(System.Object)">
            <summary>Get an aggregate from memory cache, if not exist, then get it from event store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Commanding.ICommandContext.Add(ENode.Eventing.IEvent)">
            <summary>Add a new event into the current command context.
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="T:ENode.Commanding.ITrackingContext">
            <summary>Represents a tracking context for tracking changed aggregate roots in the command handler.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ITrackingContext.GetTrackedAggregateRoots">
            <summary>Get all the tracked aggregates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Commanding.ITrackingContext.GetEvents">
            <summary>Get all the related events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Commanding.ITrackingContext.Clear">
            <summary>Clear the tracking context.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommandExecuteContext.OnCommandExecuted(ENode.Commanding.ICommand,ENode.Commanding.CommandStatus,System.String,System.String,System.String)">
            <summary>Notify the given command is executed.
            </summary>
        </member>
        <member name="P:ENode.Commanding.ICommandExecuteContext.CheckCommandWaiting">
            <summary>Check whether need to apply the command waiting logic when the command is executing.
            </summary>
        </member>
        <member name="T:ENode.Commanding.ICommandExecutor">
            <summary>Represents a command executor interface.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommandExecutor.Execute(ENode.Commanding.ProcessingCommand)">
            <summary>Executes the given command.
            </summary>
            <param name="processingCommand">The command to execute.</param>
        </member>
        <member name="T:ENode.Commanding.ICreatingAggregateCommand">
            <summary>Represents a command which will create a new aggregate root.
            </summary>
        </member>
        <member name="T:ENode.Commanding.IWaitingCommandService">
            <summary>Represents a service which manages all the waiting command.
            </summary>
        </member>
        <member name="M:ENode.Commanding.IWaitingCommandService.SetCommandExecutor(ENode.Commanding.ICommandExecutor)">
            <summary>Set the command executor.
            </summary>
            <param name="commandExecutor"></param>
        </member>
        <member name="M:ENode.Commanding.IWaitingCommandService.Start">
            <summary>Start the service. A worker will be started, which takes command from the processing queue to process.
            </summary>
        </member>
        <member name="M:ENode.Commanding.IWaitingCommandService.RegisterCommand(ENode.Commanding.ProcessingCommand)">
            <summary>Register a command.
            </summary>
            <param name="processingCommand"></param>
            <returns>Returns true if the given command is added into the aggregate waiting queue; otherwise returns false.</returns>
        </member>
        <member name="M:ENode.Commanding.IWaitingCommandService.NotifyCommandExecuted(System.String)">
            <summary>Notify that a command of the given aggregate has been executed, and the next command will be execute if exist.
            </summary>
            <param name="aggregateRootId"></param>
        </member>
        <member name="T:ENode.Commanding.IRetryCommandService">
            <summary>Represents a command retry service to retry the command if it has concurrent exception.
            </summary>
        </member>
        <member name="M:ENode.Commanding.IRetryCommandService.SetCommandExecutor(ENode.Commanding.ICommandExecutor)">
            <summary>Set the command executor.
            </summary>
            <param name="commandExecutor"></param>
        </member>
        <member name="M:ENode.Commanding.IRetryCommandService.RetryCommand(ENode.Commanding.ProcessingCommand)">
            <summary>Retry the given command.
            </summary>
            <param name="processingCommand"></param>
        </member>
        <member name="M:ENode.Commanding.IRetryCommandService.RetryConcurrentCommand(ENode.Commanding.ProcessingCommand)">
            <summary>Retry the given concurrent command.
            </summary>
            <param name="processingCommand"></param>
            <returns>Returns true if the given command was added into the retry queue; otherwise, returns false.</returns>
        </member>
        <member name="M:ENode.Commanding.IRetryCommandService.Start">
            <summary>Start the service.
            </summary>
        </member>
        <member name="T:ENode.Commanding.DuplicatedCommandHandlerException">
            <summary>Represents an exception when found a duplicated command handler of command.
            </summary>
        </member>
        <member name="M:ENode.Commanding.DuplicatedCommandHandlerException.#ctor(System.Type,System.Type)">
            <summary>Parameterized constructor.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="commandHandlerType">The command handler type.</param>
        </member>
        <member name="T:ENode.Configurations.ENodeConfiguration">
            <summary>Configuration class for enode framework.
            </summary>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.#ctor(ECommon.Configurations.Configuration,ENode.Configurations.ConfigurationSetting)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.CreateENode(ECommon.Configurations.Configuration,ENode.Configurations.ConfigurationSetting)">
            <summary>Create the enode configuration instance.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.GetCommonConfiguration">
            <summary>Get the ecommon configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.RegisterENodeComponents">
            <summary>Register all the default components of enode framework.
            </summary>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.RegisterBusinessComponents(System.Reflection.Assembly[])">
            <summary>Register all the business components from the given assemblies.
            </summary>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.UseSqlServerLockService">
            <summary>Use the SqlServerLockService as the ILockService.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.UseSqlServerCommandStore">
            <summary>Use the SqlServerCommandStore as the ICommandStore.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.UseSqlServerEventStore">
            <summary>Use the SqlServerEventStore as the IEventStore.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.UseSqlServerEventPublishInfoStore">
            <summary>Use the SqlServerEventPublishInfoStore as the IEventPublishInfoStore.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.UseSqlServerEventHandleInfoStore">
            <summary>Use the SqlServerEventHandleInfoStore as the IEventHandleInfoStore.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.InitializeBusinessAssemblies(System.Reflection.Assembly[])">
            <summary>Initialize all the assembly initializers with the given business assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Configurations.ENodeConfiguration.StartENode(ENode.Configurations.NodeType)">
            <summary>Start ENode with node type option.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ENode.Configurations.ENodeConfiguration.Setting">
            <summary>Get the current setting information.
            </summary>
        </member>
        <member name="P:ENode.Configurations.ENodeConfiguration.Instance">
            <summary>Provides the singleton access instance.
            </summary>
        </member>
        <member name="T:ENode.Domain.AggregateRoot`1">
            <summary>Represents an abstract base aggregate root.
            </summary>
            <typeparam name="TAggregateRootId"></typeparam>
        </member>
        <member name="T:ENode.Domain.IAggregateRoot">
            <summary>Represents an aggregate root.
            </summary>
        </member>
        <member name="M:ENode.Domain.IAggregateRoot.CommitChanges">
            <summary>Upgrade the version of the aggregate root, pop and return all the uncommitted events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Domain.IAggregateRoot.ReplayEvents(System.Collections.Generic.IEnumerable{ENode.Eventing.DomainEventStream})">
            <summary>Replay the given event streams.
            </summary>
            <param name="eventStreams"></param>
        </member>
        <member name="P:ENode.Domain.IAggregateRoot.UniqueId">
            <summary>Represents the unique id of the aggregate root.
            </summary>
        </member>
        <member name="P:ENode.Domain.IAggregateRoot.Version">
            <summary>Represents the current version of the aggregate root.
            </summary>
        </member>
        <member name="M:ENode.Domain.AggregateRoot`1.#ctor(`0)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="M:ENode.Domain.AggregateRoot`1.ActAs``1">
            <summary>Act the current aggregate as the given type of role.
            <remarks>
            Rhe current aggregate must implement the role interface, otherwise this method will throw exception.
            </remarks>
            </summary>
            <typeparam name="TRole">The role interface type.</typeparam>
            <returns>Returns the role instance which is acted by the current aggregate.</returns>
        </member>
        <member name="M:ENode.Domain.AggregateRoot`1.ApplyEvent(ENode.Eventing.IDomainEvent)">
            <summary>Apply a domain event to the current aggregate root.
            </summary>
            <param name="domainEvent"></param>
        </member>
        <member name="P:ENode.Domain.AggregateRoot`1.Id">
            <summary>Represents the unique identifier of the aggregate root.
            </summary>
        </member>
        <member name="P:ENode.Domain.AggregateRoot`1.Version">
            <summary>Represents the version of the aggregate root.
            </summary>
        </member>
        <member name="T:ENode.Domain.IAggregateRootSerializer">
            <summary>Represents an serializer to serialize or deserialize aggregate root.
            </summary>
        </member>
        <member name="M:ENode.Domain.IAggregateRootSerializer.Serialize(ENode.Domain.IAggregateRoot)">
            <summary>Serialize the given aggregate root to binary data.
            </summary>
            <param name="aggregateRoot"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Domain.IAggregateRootSerializer.Deserialize(System.Byte[],System.Type)">
            <summary>Deserialize the given data to aggregate root.
            </summary>
            <param name="data"></param>
            <param name="aggregateRootType"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Domain.IAggregateRootSerializer.Deserialize``1(System.Byte[])">
            <summary>Deserialize the given data to aggregate root.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:ENode.Domain.IAggregateStorage">
            <summary>Represents an aggregate storage interface.
            </summary>
        </member>
        <member name="M:ENode.Domain.IAggregateStorage.Get(System.Type,System.String)">
            <summary>Get an aggregate from aggregate storage.
            </summary>
            <param name="aggregateRootType"></param>
            <param name="aggregateRootId"></param>
            <returns></returns>
        </member>
        <member name="T:ENode.Eventing.Event">
            <summary>Represents an abstract base event.
            </summary>
        </member>
        <member name="T:ENode.Eventing.IEvent">
            <summary>Represents an event.
            </summary>
        </member>
        <member name="P:ENode.Eventing.IEvent.Id">
            <summary>Represents the unique identifier of the event.
            </summary>
        </member>
        <member name="M:ENode.Eventing.Event.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="P:ENode.Eventing.Event.Id">
            <summary>Represents the unique id of the event.
            </summary>
        </member>
        <member name="T:ENode.Infrastructure.IProcessor`1">
            <summary>Represents a data processor.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IProcessor`1.Start">
            <summary>Start the processor.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IProcessor`1.Process(`0,ENode.Infrastructure.IProcessContext{`0})">
            <summary>Process the given data.
            </summary>
            <param name="data"></param>
            <param name="context"></param>
        </member>
        <member name="P:ENode.Infrastructure.IProcessor`1.Name">
            <summary>Gets or sets the name of the processor.
            </summary>
        </member>
        <member name="T:ENode.Exceptions.IPublishableException">
            <summary>Represents an exception which can be published.
            </summary>
        </member>
        <member name="T:ENode.Exceptions.IExceptionHandler">
            <summary>Represents an exception handler.
            </summary>
        </member>
        <member name="T:ENode.Infrastructure.IProxyHandler">
            <summary>Represents a handler proxy.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IProxyHandler.GetInnerHandler">
            <summary>Get the inner handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Exceptions.IExceptionHandler.Handle(ENode.Infrastructure.IHandlingContext,System.Object)">
            <summary>Handle the given exception.
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
        </member>
        <member name="T:ENode.Exceptions.IExceptionHandler`1">
            <summary>Represents an exception handler.
            </summary>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="M:ENode.Exceptions.IExceptionHandler`1.Handle(ENode.Infrastructure.IHandlingContext,`0)">
            <summary>Handle the given exception.
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
        </member>
        <member name="T:ENode.Infrastructure.IAssemblyInitializer">
            <summary>Represents a initializer which can initialize from the given assemblies.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IAssemblyInitializer.Initialize(System.Reflection.Assembly[])">
            <summary>Initialize from the given assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="T:ENode.Infrastructure.IHandlerProvider`1">
            <summary>Represents a provider to provide the handlers.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IHandlerProvider`1.GetHandlers(System.Type)">
            <summary>Get all the handlers for the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Infrastructure.IHandlerProvider`1.IsHandler(System.Type)">
            <summary>Check whether a given type is a handler type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Exceptions.PublishableException.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="T:ENode.Infrastructure.IPublisher`1">
            <summary>Represents a message publisher.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IPublisher`1.Publish(`0)">
            <summary>Publish the given message to all the subscribers.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ENode.Infrastructure.IHandlingContext">
            <summary>Represents a data handling context.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IHandlingContext.Get``1(System.Object)">
            <summary>Get an aggregate from memory cache, if not exist, get it from event store.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aggregateRootId"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Infrastructure.IHandlingContext.AddCommand(ENode.Commanding.ICommand)">
            <summary>Add a command into the context, and the command will be send later.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:ENode.Infrastructure.IHandlingContext.GetCommands">
            <summary>Get all the commands in the context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ENode.Infrastructure.IOException">
            <summary>Represents an io exception.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IOException.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IOException.#ctor(System.String)">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ENode.Infrastructure.IOException.#ctor(System.String,System.Exception)">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:ENode.Infrastructure.IOException.#ctor(System.String,System.Object[])">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:ENode.Infrastructure.IOException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="args"></param>
        </member>
        <member name="T:ENode.Messaging.IMessageHandler">
            <summary>Represents a message handler.
            </summary>
        </member>
        <member name="M:ENode.Messaging.IMessageHandler.Handle(ENode.Infrastructure.IHandlingContext,System.Object)">
            <summary>Handle the given message.
            </summary>
            <param name="context"></param>
            <param name="message"></param>
        </member>
        <member name="T:ENode.Messaging.IMessageHandler`1">
            <summary>Represents a message handler.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:ENode.Messaging.IMessageHandler`1.Handle(ENode.Infrastructure.IHandlingContext,`0)">
            <summary>Handle the given message.
            </summary>
            <param name="context"></param>
            <param name="message"></param>
        </member>
        <member name="T:ENode.Infrastructure.IProcessContext`1">
            <summary>Represents a context environment for processing data.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.IProcessContext`1.OnProcessed(`0)">
            <summary>Notify the given data has been processed.
            </summary>
            <param name="data">The processed data.</param>
        </member>
        <member name="T:ENode.Infrastructure.ILockService">
            <summary>定义一个用于实现锁的接口
            </summary>
        </member>
        <member name="T:ENode.Infrastructure.ITypeCodeProvider`1">
            <summary>Represents a provider to provide the type and code mapping information.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.ITypeCodeProvider`1.GetTypeCode(System.Type)">
            <summary>Get the code of the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Infrastructure.ITypeCodeProvider`1.GetType(System.Int32)">
            <summary>Get the type of the given type code.
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Eventing.IEventService.Start">
            <summary>Start the event service.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventService.CommitEvent(ENode.Eventing.EventCommittingContext)">
            <summary>Commit the given aggregate's domain events to the eventstore and publish the domain events.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ENode.Eventing.IEventService.PublishDomainEvent(ENode.Commanding.ProcessingCommand,ENode.Eventing.DomainEventStream)">
            <summary>Publish the given domain events.
            </summary>
            <param name="processingCommand"></param>
            <param name="eventStream"></param>
        </member>
        <member name="M:ENode.Eventing.IEventService.PublishEvent(ENode.Commanding.ProcessingCommand,ENode.Eventing.EventStream)">
            <summary>Publish the given events.
            </summary>
            <param name="processingCommand"></param>
            <param name="eventStream"></param>
        </member>
        <member name="T:ENode.Eventing.IEventStore">
            <summary>Represents a event store to store event commit records of aggregate.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventStore.BatchAppend(System.Collections.Generic.IEnumerable{ENode.Eventing.DomainEventStream})">
            <summary>Batch append the given event streams to the event store.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventStore.Append(ENode.Eventing.DomainEventStream)">
            <summary>Append the given event stream to the event store.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventStore.Find(System.String,System.Int32)">
            <summary>Find a single event stream by aggregateRootId and version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Eventing.IEventStore.Find(System.String,System.String)">
            <summary>Find a single event stream by aggregateRootId and commandId.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ENode.Eventing.IEventStore.QueryAggregateEvents(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Query a range of event streams of a single aggregate from event store.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventStore.QueryByPage(System.Int32,System.Int32)">
            <summary>Query a range of event streams from event store by page.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ENode.Eventing.IEventHandleInfoCache">
            <summary>Represents a in-memory cache to store the event handle information of aggregate.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventHandleInfoCache.AddEventHandleInfo(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>Add an event handle info to the cache.
            </summary>
            <param name="eventId"></param>
            <param name="eventHandlerTypeCode"></param>
            <param name="eventTypeCode"></param>
            <param name="aggregateRootId"></param>
            <param name="aggregateRootVersion"></param>
        </member>
        <member name="M:ENode.Eventing.IEventHandleInfoCache.IsEventHandleInfoExist(System.String,System.Int32)">
            <summary>Check whether the given event was handled by the given event handler.
            </summary>
            <param name="eventId"></param>
            <param name="eventHandlerTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Eventing.IEventHandleInfoCache.RemoveEventHandleInfo(System.String)">
            <summary>Remove all the event handle information from the cache by the given eventId.
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="T:ENode.Infrastructure.ConcurrentException">
            <summary>Represents a concurrent exception.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.ConcurrentException.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.ConcurrentException.#ctor(System.String)">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ENode.Infrastructure.ConcurrentException.#ctor(System.String,System.Exception)">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:ENode.Infrastructure.ConcurrentException.#ctor(System.String,System.Object[])">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:ENode.Infrastructure.ConcurrentException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>Parameterized constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="args"></param>
        </member>
        <member name="T:ENode.Eventing.IDomainEvent">
            <summary>Represents a domain event.
            </summary>
        </member>
        <member name="P:ENode.Eventing.IDomainEvent.AggregateRootId">
            <summary>Represents the source aggregate root id of the domain event.
            </summary>
        </member>
        <member name="P:ENode.Eventing.IDomainEvent.Version">
            <summary>Represents the version of the domain event.
            </summary>
        </member>
        <member name="P:ENode.Eventing.IDomainEvent.Timestamp">
            <summary>Represents the occurred time of the domain event.
            </summary>
        </member>
        <member name="T:ENode.Eventing.IEventHandler">
            <summary>Represents an event handler.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventHandler.Handle(ENode.Infrastructure.IHandlingContext,System.Object)">
            <summary>Handle the given event.
            </summary>
            <param name="context"></param>
            <param name="evnt"></param>
        </member>
        <member name="T:ENode.Eventing.IEventHandler`1">
            <summary>Represents an event handler.
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:ENode.Eventing.IEventHandler`1.Handle(ENode.Infrastructure.IHandlingContext,`0)">
            <summary>Handle the given event.
            </summary>
            <param name="context"></param>
            <param name="evnt"></param>
        </member>
        <member name="T:ENode.Eventing.DomainEvent`1">
            <summary>Represents an abstract base domain event.
            </summary>
        </member>
        <member name="M:ENode.Eventing.DomainEvent`1.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ENode.Eventing.DomainEvent`1.#ctor(`0)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="P:ENode.Eventing.DomainEvent`1.AggregateRootId">
            <summary>Represents the source aggregate root id of the domain event.
            </summary>
        </member>
        <member name="P:ENode.Eventing.DomainEvent`1.Version">
            <summary>Represents the version of the domain event.
            </summary>
        </member>
        <member name="P:ENode.Eventing.DomainEvent`1.Timestamp">
            <summary>Represents the occurred time of the domain event.
            </summary>
        </member>
        <member name="T:ENode.Eventing.IEventPublishInfoStore">
            <summary>Represents a storage to store the event publish information of aggregate.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventPublishInfoStore.InsertPublishedVersion(System.String,System.String)">
            <summary>Insert the first published event version of aggregate.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventPublishInfoStore.UpdatePublishedVersion(System.String,System.String,System.Int32)">
            <summary>Update the published event version of aggregate.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventPublishInfoStore.GetEventPublishedVersion(System.String,System.String)">
            <summary>Get the current event published version for the specified aggregate.
            </summary>
        </member>
        <member name="T:ENode.Eventing.IEventHandleInfoStore">
            <summary>Represents a storage to store the event handle information of aggregate.
            </summary>
        </member>
        <member name="M:ENode.Eventing.IEventHandleInfoStore.AddEventHandleInfo(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>Add an event handle info.
            </summary>
            <param name="eventId"></param>
            <param name="eventHandlerTypeCode"></param>
            <param name="eventTypeCode"></param>
            <param name="aggregateRootId"></param>
            <param name="aggregateRootVersion"></param>
        </member>
        <member name="M:ENode.Eventing.IEventHandleInfoStore.IsEventHandleInfoExist(System.String,System.Int32)">
            <summary>Check whether the given event was handled by the given event handler.
            </summary>
        </member>
        <member name="T:ENode.Domain.IRepository">
            <summary>Represents a repository of the building block of Eric Evans's DDD.
            </summary>
        </member>
        <member name="M:ENode.Domain.IRepository.Get``1(System.Object)">
            <summary>Get an aggregate from memory cache, if not exist, get it from event store.
            </summary>
            <param name="aggregateRootId"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Throwed when the aggregateRootType or aggregateRootId is null.</exception>
            <exception cref="!:AggregateRootNotExistException">Throwed when the aggregate root not found.</exception>
            <exception cref="!:ENodeException">Throwed when calling the memory cache has exception.</exception>
        </member>
        <member name="M:ENode.Domain.IRepository.Get(System.Type,System.Object)">
            <summary>Get an aggregate from memory cache, if not exist, get it from event store.
            </summary>
            <param name="aggregateRootType"></param>
            <param name="aggregateRootId"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Throwed when the aggregateRootType or aggregateRootId is null.</exception>
            <exception cref="!:AggregateRootNotExistException">Throwed when the aggregate root not found.</exception>
            <exception cref="!:ENodeException">Throwed when calling the memory cache has exception.</exception>
        </member>
        <member name="T:ENode.Commanding.ICommandHandler">
            <summary>Represents a command handler.
            </summary>
        </member>
        <member name="M:ENode.Commanding.ICommandHandler.Handle(ENode.Commanding.ICommandContext,System.Object)">
            <summary>Handle the given command.
            </summary>
            <param name="context"></param>
            <param name="command"></param>
        </member>
        <member name="T:ENode.Infrastructure.TypeUtils">
            <summary>A utility class provides type related methods.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.TypeUtils.IsComponent(System.Type)">
            <summary>Check whether a type is a component type.
            </summary>
        </member>
        <member name="M:ENode.Infrastructure.TypeUtils.IsAggregateRoot(System.Type)">
            <summary>Check whether a type is an aggregate root type.
            </summary>
        </member>
        <member name="T:ENode.Domain.IAggregateRootFactory">
            <summary>Defines a factory to create empty aggregate root.
            </summary>
        </member>
        <member name="M:ENode.Domain.IAggregateRootFactory.CreateAggregateRoot(System.Type)">
            <summary>Create an empty aggregate root with the given type.
            </summary>
        </member>
        <member name="T:ENode.Domain.IAggregateRootInternalHandlerProvider">
            <summary>Defines a provider interface to provide the aggregate root internal handler.
            </summary>
        </member>
        <member name="M:ENode.Domain.IAggregateRootInternalHandlerProvider.GetInternalEventHandler(System.Type,System.Type)">
            <summary>Get the internal event handler within the aggregate.
            </summary>
        </member>
        <member name="T:ENode.Commanding.ICommandHandler`1">
            <summary>Represents a command handler.
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="M:ENode.Commanding.ICommandHandler`1.Handle(ENode.Commanding.ICommandContext,`0)">
            <summary>Handle the given command.
            </summary>
            <param name="context"></param>
            <param name="command"></param>
        </member>
        <member name="T:ENode.Messaging.VersionedMessage`1">
            <summary>Represents an abstract base domain event.
            </summary>
        </member>
        <member name="T:ENode.Messaging.Message">
            <summary>Represents an abstract base message.
            </summary>
        </member>
        <member name="T:ENode.Messaging.IMessage">
            <summary>Represents a message.
            </summary>
        </member>
        <member name="P:ENode.Messaging.IMessage.Id">
            <summary>Represents the identifier of the message.
            </summary>
        </member>
        <member name="M:ENode.Messaging.Message.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="P:ENode.Messaging.Message.Id">
            <summary>Represents the identifier of the message.
            </summary>
        </member>
        <member name="T:ENode.Messaging.IVersionedMessage">
            <summary>Represents a versioned message.
            </summary>
        </member>
        <member name="P:ENode.Messaging.IVersionedMessage.SourceId">
            <summary>Represents the identifier of the source which originating the message.
            </summary>
        </member>
        <member name="P:ENode.Messaging.IVersionedMessage.Version">
            <summary>Represents the version of the message.
            </summary>
        </member>
        <member name="P:ENode.Messaging.IVersionedMessage.Timestamp">
            <summary>Represents the occurred time of the message.
            </summary>
        </member>
        <member name="M:ENode.Messaging.VersionedMessage`1.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ENode.Messaging.VersionedMessage`1.#ctor(`0)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="P:ENode.Messaging.VersionedMessage`1.SourceId">
            <summary>Represents the identifier of the source which originating the message.
            </summary>
        </member>
        <member name="P:ENode.Messaging.VersionedMessage`1.Version">
            <summary>Represents the version of the message.
            </summary>
        </member>
        <member name="P:ENode.Messaging.VersionedMessage`1.Timestamp">
            <summary>Represents the occurred time of the message.
            </summary>
        </member>
        <member name="T:ENode.Snapshoting.ISnapshotStore">
            <summary>An interface to store the snapshot.
            </summary>
        </member>
        <member name="M:ENode.Snapshoting.ISnapshotStore.StoreShapshot(ENode.Snapshoting.Snapshot)">
            <summary>Store the given snapshot.
            </summary>
            <param name="snapshot">The snapshot to store.</param>
        </member>
        <member name="M:ENode.Snapshoting.ISnapshotStore.GetLastestSnapshot(System.String,System.Type)">
            <summary>Get the latest snapshot for the specified aggregate root.
            </summary>
            <param name="aggregateRootId">The aggregate root id.</param>
            <param name="aggregateRootType">The aggregate root type.</param>
            <returns>Returns the snapshot if exist; otherwise, returns null.</returns>
        </member>
        <member name="T:ENode.Domain.IMemoryCache">
            <summary>Represents a high speed memory cache to get or set aggregate.
            </summary>
        </member>
        <member name="M:ENode.Domain.IMemoryCache.Get(System.Object,System.Type)">
            <summary>Get an aggregate from memory cache.
            </summary>
            <param name="aggregateRootId"></param>
            <param name="aggregateRootType"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Domain.IMemoryCache.Get``1(System.Object)">
            <summary>Get a strong type aggregate from memory cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aggregateRootId"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Domain.IMemoryCache.Set(ENode.Domain.IAggregateRoot)">
            <summary>Set an aggregate to memory cache.
            </summary>
            <param name="aggregateRoot"></param>
        </member>
        <member name="T:ENode.Domain.ValueObject`1">
            <summary>A DDD value object base class. Provide the mechanism to compare two objects by values.
            </summary>
        </member>
        <member name="M:ENode.Domain.ValueObject`1.GetAtomicValues">
            <summary>Returns all the atomic values of the current object.
            </summary>
        </member>
        <member name="M:ENode.Domain.ValueObject`1.Clone(System.Object)">
            <summary>Clone a new object from the current object with the specified default values.
            </summary>
            <param name="objectContainsNewValues"></param>
            <returns></returns>
        </member>
        <member name="M:ENode.Domain.ValueObject`1.op_Equality(ENode.Domain.ValueObject{`0},ENode.Domain.ValueObject{`0})">
            <summary>Operator overrides.
            </summary>
        </member>
        <member name="M:ENode.Domain.ValueObject`1.op_Inequality(ENode.Domain.ValueObject{`0},ENode.Domain.ValueObject{`0})">
            <summary>Operator overrides.
            </summary>
        </member>
        <member name="M:ENode.Domain.ValueObject`1.Equals(System.Object)">
            <summary>Method overrides.
            </summary>
        </member>
        <member name="M:ENode.Domain.ValueObject`1.GetHashCode">
            <summary>Method overrides.
            </summary>
        </member>
        <member name="T:ENode.Snapshoting.Snapshot">
            <summary>Snapshot of aggregate.
            </summary>
        </member>
        <member name="M:ENode.Snapshoting.Snapshot.#ctor(System.Int32,System.String,System.Int32,System.Byte[],System.DateTime)">
            <summary>Parameterized constructor.
            </summary>
            <param name="aggregateRootTypeCode"></param>
            <param name="aggregateRootId"></param>
            <param name="version"></param>
            <param name="payload"></param>
            <param name="timestamp"></param>
        </member>
        <member name="P:ENode.Snapshoting.Snapshot.AggregateRootId">
            <summary>The aggregate root id.
            </summary>
        </member>
        <member name="P:ENode.Snapshoting.Snapshot.AggregateRootTypeCode">
            <summary>The aggregate root type code.
            </summary>
        </member>
        <member name="P:ENode.Snapshoting.Snapshot.Version">
            <summary>The aggregate root version when creating this snapshot.
            </summary>
        </member>
        <member name="P:ENode.Snapshoting.Snapshot.Payload">
            <summary>The aggregate root payload data when creating this snapshot.
            </summary>
        </member>
        <member name="P:ENode.Snapshoting.Snapshot.Timestamp">
            <summary>The created time of this snapshot.
            </summary>
        </member>
        <member name="T:ENode.Snapshoting.ISnapshotPolicy">
            <summary>An policy interface which used to determine whether should create a snapshot for the aggregate.
            </summary>
        </member>
        <member name="M:ENode.Snapshoting.ISnapshotPolicy.ShouldCreateSnapshot(ENode.Domain.IAggregateRoot)">
            <summary>Determines whether should create a snapshot for the given aggregate root.
            </summary>
        </member>
        <member name="T:ENode.Snapshoting.ISnapshotter">
            <summary>An interface which can create snapshot for aggregate or restore aggregate from snapshot.
            </summary>
        </member>
        <member name="M:ENode.Snapshoting.ISnapshotter.CreateSnapshot(ENode.Domain.IAggregateRoot)">
            <summary>Create a snapshot for the given aggregate root.
            </summary>
        </member>
        <member name="M:ENode.Snapshoting.ISnapshotter.RestoreFromSnapshot(ENode.Snapshoting.Snapshot)">
            <summary>Restore the aggregate from the given snapshot.
            </summary>
        </member>
    </members>
</doc>
