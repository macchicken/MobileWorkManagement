<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ENode.2.4.5.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:ENode.Commanding.Fakes.ShimAggregateCommand`1">
            <summary>ENode.Commanding.AggregateCommand`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateCommand`1.#ctor(ENode.Commanding.AggregateCommand{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateCommand`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateCommand`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateCommand`1.Bind(ENode.Commanding.IAggregateCommand)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateCommand`1.Bind(ENode.Commanding.ICommand)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.AggregateRootIdENodeCommandingIAggregateCommandget">
            <summary>设置 AggregateCommand`1.ENode.Commanding.IAggregateCommand.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.AggregateRootIdGet">
            <summary>设置 AggregateCommand`1.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.Constructor">
            <summary>设置 AggregateCommand`1.AggregateCommand`1() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.ConstructorT0">
            <summary>设置 AggregateCommand`1.AggregateCommand`1(!0 aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.GetKey">
            <summary>设置 AggregateCommand`1.GetKey() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimAggregateCommand`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.AllInstances.AggregateRootIdENodeCommandingIAggregateCommandget">
            <summary>设置 AggregateCommand`1.ENode.Commanding.IAggregateCommand.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.AllInstances.AggregateRootIdGet">
            <summary>设置 AggregateCommand`1.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateCommand`1.AllInstances.GetKey">
            <summary>设置 AggregateCommand`1.GetKey() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException">
            <summary>ENode.Commanding.AggregateRootAlreadyExistException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException.#ctor(ENode.Commanding.AggregateRootAlreadyExistException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException.ConstructorObjectType">
            <summary>设置 AggregateRootAlreadyExistException.AggregateRootAlreadyExistException(Object id, Type type) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimAggregateRootAlreadyExistException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommand">
            <summary>ENode.Commanding.Command 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommand.#ctor(ENode.Commanding.Command)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommand.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommand.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommand.Bind(ENode.Commanding.ICommand)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.Constructor">
            <summary>设置 Command.Command() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.GetKey">
            <summary>设置 Command.GetKey() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.IdGet">
            <summary>设置 Command.get_Id() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.IdSetString">
            <summary>设置 Command.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.ItemsGet">
            <summary>设置 Command.get_Items() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.ItemsSetIDictionaryOfStringString">
            <summary>设置 Command.set_Items(IDictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.RetryCountGet">
            <summary>设置 Command.get_RetryCount() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.RetryCountSetInt32">
            <summary>设置 Command.set_RetryCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommand.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.AllInstances.GetKey">
            <summary>设置 Command.GetKey() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.AllInstances.IdGet">
            <summary>设置 Command.get_Id() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.AllInstances.IdSetString">
            <summary>设置 Command.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.AllInstances.ItemsGet">
            <summary>设置 Command.get_Items() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.AllInstances.ItemsSetIDictionaryOfStringString">
            <summary>设置 Command.set_Items(IDictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.AllInstances.RetryCountGet">
            <summary>设置 Command.get_RetryCount() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommand.AllInstances.RetryCountSetInt32">
            <summary>设置 Command.set_RetryCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException">
            <summary>ENode.Commanding.CommandAggregateRootIdMissingException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException.#ctor(ENode.Commanding.CommandAggregateRootIdMissingException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException.ConstructorICommand">
            <summary>设置 CommandAggregateRootIdMissingException.CommandAggregateRootIdMissingException(ICommand command) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandAggregateRootIdMissingException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException">
            <summary>ENode.Commanding.CommandHandlerNotFoundException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException.#ctor(ENode.Commanding.CommandHandlerNotFoundException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException.ConstructorICommand">
            <summary>设置 CommandHandlerNotFoundException.CommandHandlerNotFoundException(ICommand command) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandHandlerNotFoundException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException">
            <summary>ENode.Commanding.CommandHandlerTooManyException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException.#ctor(ENode.Commanding.CommandHandlerTooManyException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException.ConstructorICommand">
            <summary>设置 CommandHandlerTooManyException.CommandHandlerTooManyException(ICommand command) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandHandlerTooManyException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException">
            <summary>ENode.Commanding.CommandProcessIdMissingException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException.#ctor(ENode.Commanding.CommandProcessIdMissingException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException.ConstructorICommand">
            <summary>设置 CommandProcessIdMissingException.CommandProcessIdMissingException(ICommand command) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandProcessIdMissingException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandResult">
            <summary>ENode.Commanding.CommandResult 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandResult.#ctor(ENode.Commanding.CommandResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AggregateRootIdGet">
            <summary>设置 CommandResult.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AggregateRootIdSetString">
            <summary>设置 CommandResult.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.CommandIdGet">
            <summary>设置 CommandResult.get_CommandId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.CommandIdSetString">
            <summary>设置 CommandResult.set_CommandId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.ConstructorCommandStatusStringStringStringStringIDictionaryOfStringString">
            <summary>设置 CommandResult.CommandResult(CommandStatus status, String commandId, String aggregateRootId, String exceptionTypeName, String errorMessage, IDictionary`2&lt;String,String&gt; items) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.ErrorMessageGet">
            <summary>设置 CommandResult.get_ErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.ErrorMessageSetString">
            <summary>设置 CommandResult.set_ErrorMessage(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.ExceptionTypeNameGet">
            <summary>设置 CommandResult.get_ExceptionTypeName() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.ExceptionTypeNameSetString">
            <summary>设置 CommandResult.set_ExceptionTypeName(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.ItemsGet">
            <summary>设置 CommandResult.get_Items() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.ItemsSetIDictionaryOfStringString">
            <summary>设置 CommandResult.set_Items(IDictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.StatusGet">
            <summary>设置 CommandResult.get_Status() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.StatusSetCommandStatus">
            <summary>设置 CommandResult.set_Status(CommandStatus value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.AggregateRootIdGet">
            <summary>设置 CommandResult.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.AggregateRootIdSetString">
            <summary>设置 CommandResult.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.CommandIdGet">
            <summary>设置 CommandResult.get_CommandId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.CommandIdSetString">
            <summary>设置 CommandResult.set_CommandId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.ErrorMessageGet">
            <summary>设置 CommandResult.get_ErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.ErrorMessageSetString">
            <summary>设置 CommandResult.set_ErrorMessage(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.ExceptionTypeNameGet">
            <summary>设置 CommandResult.get_ExceptionTypeName() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.ExceptionTypeNameSetString">
            <summary>设置 CommandResult.set_ExceptionTypeName(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.ItemsGet">
            <summary>设置 CommandResult.get_Items() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.ItemsSetIDictionaryOfStringString">
            <summary>设置 CommandResult.set_Items(IDictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.StatusGet">
            <summary>设置 CommandResult.get_Status() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandResult.AllInstances.StatusSetCommandStatus">
            <summary>设置 CommandResult.set_Status(CommandStatus value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandSendException">
            <summary>ENode.Commanding.CommandSendException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendException.#ctor(ENode.Commanding.CommandSendException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendException.Constructor">
            <summary>设置 CommandSendException.CommandSendException() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendException.ConstructorString">
            <summary>设置 CommandSendException.CommandSendException(String message) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendException.ConstructorStringException">
            <summary>设置 CommandSendException.CommandSendException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendException.ConstructorStringObjectArray">
            <summary>设置 CommandSendException.CommandSendException(String messageFormat, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandSendException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandSendResult">
            <summary>ENode.Commanding.CommandSendResult 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendResult.#ctor(ENode.Commanding.CommandSendResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimCommandSendResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.ConstructorCommandSendStatusString">
            <summary>设置 CommandSendResult.CommandSendResult(CommandSendStatus status, String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.ErrorMessageGet">
            <summary>设置 CommandSendResult.get_ErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.ErrorMessageSetString">
            <summary>设置 CommandSendResult.set_ErrorMessage(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.StatusGet">
            <summary>设置 CommandSendResult.get_Status() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.StatusSetCommandSendStatus">
            <summary>设置 CommandSendResult.set_Status(CommandSendStatus value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimCommandSendResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.AllInstances.ErrorMessageGet">
            <summary>设置 CommandSendResult.get_ErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.AllInstances.ErrorMessageSetString">
            <summary>设置 CommandSendResult.set_ErrorMessage(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.AllInstances.StatusGet">
            <summary>设置 CommandSendResult.get_Status() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimCommandSendResult.AllInstances.StatusSetCommandSendStatus">
            <summary>设置 CommandSendResult.set_Status(CommandSendStatus value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException">
            <summary>ENode.Commanding.DuplicatedCommandHandlerException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException.#ctor(ENode.Commanding.DuplicatedCommandHandlerException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException.ConstructorTypeType">
            <summary>设置 DuplicatedCommandHandlerException.DuplicatedCommandHandlerException(Type commandType, Type commandHandlerType) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimDuplicatedCommandHandlerException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimEventAlreadyExistException">
            <summary>ENode.Commanding.EventAlreadyExistException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimEventAlreadyExistException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimEventAlreadyExistException.#ctor(ENode.Commanding.EventAlreadyExistException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimEventAlreadyExistException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimEventAlreadyExistException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimEventAlreadyExistException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimEventAlreadyExistException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimEventAlreadyExistException.ConstructorObjectType">
            <summary>设置 EventAlreadyExistException.EventAlreadyExistException(Object id, Type type) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimEventAlreadyExistException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimHandledAggregateCommand">
            <summary>ENode.Commanding.HandledAggregateCommand 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimHandledAggregateCommand.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimHandledAggregateCommand.#ctor(ENode.Commanding.HandledAggregateCommand)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimHandledAggregateCommand.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimHandledAggregateCommand.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AggregateRootIdGet">
            <summary>设置 HandledAggregateCommand.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AggregateRootIdSetString">
            <summary>设置 HandledAggregateCommand.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AggregateRootTypeCodeGet">
            <summary>设置 HandledAggregateCommand.get_AggregateRootTypeCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AggregateRootTypeCodeSetInt32">
            <summary>设置 HandledAggregateCommand.set_AggregateRootTypeCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.ConstructorICommandStringStringStringInt32">
            <summary>设置 HandledAggregateCommand.HandledAggregateCommand(ICommand command, String sourceEventId, String sourceExceptionId, String aggregateRootId, Int32 aggregateRootTypeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.ToString">
            <summary>设置 HandledAggregateCommand.ToString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand._ToStringb__0KeyValuePairOfStringString">
            <summary>设置 HandledAggregateCommand.&lt;ToString&gt;b__0(KeyValuePair`2&lt;String,String&gt; x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AllInstances.AggregateRootIdGet">
            <summary>设置 HandledAggregateCommand.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AllInstances.AggregateRootIdSetString">
            <summary>设置 HandledAggregateCommand.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AllInstances.AggregateRootTypeCodeGet">
            <summary>设置 HandledAggregateCommand.get_AggregateRootTypeCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AllInstances.AggregateRootTypeCodeSetInt32">
            <summary>设置 HandledAggregateCommand.set_AggregateRootTypeCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledAggregateCommand.AllInstances.ToString01">
            <summary>设置 HandledAggregateCommand.ToString() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimHandledCommand">
            <summary>ENode.Commanding.HandledCommand 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimHandledCommand.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimHandledCommand.#ctor(ENode.Commanding.HandledCommand)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimHandledCommand.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimHandledCommand.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.CommandGet">
            <summary>设置 HandledCommand.get_Command() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.CommandSetICommand">
            <summary>设置 HandledCommand.set_Command(ICommand value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.ConstructorICommandStringStringIEnumerableOfIEvent">
            <summary>设置 HandledCommand.HandledCommand(ICommand command, String sourceEventId, String sourceExceptionId, IEnumerable`1&lt;IEvent&gt; evnts) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.EventsGet">
            <summary>设置 HandledCommand.get_Events() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.EventsSetIEnumerableOfIEvent">
            <summary>设置 HandledCommand.set_Events(IEnumerable`1&lt;IEvent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.ProcessIdGet">
            <summary>设置 HandledCommand.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.ProcessIdSetString">
            <summary>设置 HandledCommand.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.SourceEventIdGet">
            <summary>设置 HandledCommand.get_SourceEventId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.SourceEventIdSetString">
            <summary>设置 HandledCommand.set_SourceEventId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.SourceExceptionIdGet">
            <summary>设置 HandledCommand.get_SourceExceptionId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.SourceExceptionIdSetString">
            <summary>设置 HandledCommand.set_SourceExceptionId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.ToString">
            <summary>设置 HandledCommand.ToString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand._ToStringb__0IEvent">
            <summary>设置 HandledCommand.&lt;ToString&gt;b__0(IEvent x) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand._ToStringb__1KeyValuePairOfStringString">
            <summary>设置 HandledCommand.&lt;ToString&gt;b__1(KeyValuePair`2&lt;String,String&gt; x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.CommandGet">
            <summary>设置 HandledCommand.get_Command() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.CommandSetICommand">
            <summary>设置 HandledCommand.set_Command(ICommand value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.EventsGet">
            <summary>设置 HandledCommand.get_Events() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.EventsSetIEnumerableOfIEvent">
            <summary>设置 HandledCommand.set_Events(IEnumerable`1&lt;IEvent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.ProcessIdGet">
            <summary>设置 HandledCommand.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.ProcessIdSetString">
            <summary>设置 HandledCommand.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.SourceEventIdGet">
            <summary>设置 HandledCommand.get_SourceEventId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.SourceEventIdSetString">
            <summary>设置 HandledCommand.set_SourceEventId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.SourceExceptionIdGet">
            <summary>设置 HandledCommand.get_SourceExceptionId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.SourceExceptionIdSetString">
            <summary>设置 HandledCommand.set_SourceExceptionId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimHandledCommand.AllInstances.ToString01">
            <summary>设置 HandledCommand.ToString() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimProcessResult">
            <summary>ENode.Commanding.ProcessResult 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimProcessResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimProcessResult.#ctor(ENode.Commanding.ProcessResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimProcessResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimProcessResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.CompleteProcessAggregateRootIdGet">
            <summary>设置 ProcessResult.get_CompleteProcessAggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.CompleteProcessAggregateRootIdSetString">
            <summary>设置 ProcessResult.set_CompleteProcessAggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ConstructorStringStringProcessStatusInt32StringStringIDictionaryOfStringString">
            <summary>设置 ProcessResult.ProcessResult(String processId, String completeProcessAggregateRootId, ProcessStatus status, Int32 errorCode, String exceptionTypeName, String errorMessage, IDictionary`2&lt;String,String&gt; items) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ErrorCodeGet">
            <summary>设置 ProcessResult.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ErrorCodeSetInt32">
            <summary>设置 ProcessResult.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ErrorMessageGet">
            <summary>设置 ProcessResult.get_ErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ErrorMessageSetString">
            <summary>设置 ProcessResult.set_ErrorMessage(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ExceptionTypeNameGet">
            <summary>设置 ProcessResult.get_ExceptionTypeName() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ExceptionTypeNameSetString">
            <summary>设置 ProcessResult.set_ExceptionTypeName(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ItemsGet">
            <summary>设置 ProcessResult.get_Items() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ItemsSetIDictionaryOfStringString">
            <summary>设置 ProcessResult.set_Items(IDictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ProcessIdGet">
            <summary>设置 ProcessResult.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.ProcessIdSetString">
            <summary>设置 ProcessResult.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.StatusGet">
            <summary>设置 ProcessResult.get_Status() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.StatusSetProcessStatus">
            <summary>设置 ProcessResult.set_Status(ProcessStatus value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimProcessResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.CompleteProcessAggregateRootIdGet">
            <summary>设置 ProcessResult.get_CompleteProcessAggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.CompleteProcessAggregateRootIdSetString">
            <summary>设置 ProcessResult.set_CompleteProcessAggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ErrorCodeGet">
            <summary>设置 ProcessResult.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ErrorCodeSetInt32">
            <summary>设置 ProcessResult.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ErrorMessageGet">
            <summary>设置 ProcessResult.get_ErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ErrorMessageSetString">
            <summary>设置 ProcessResult.set_ErrorMessage(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ExceptionTypeNameGet">
            <summary>设置 ProcessResult.get_ExceptionTypeName() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ExceptionTypeNameSetString">
            <summary>设置 ProcessResult.set_ExceptionTypeName(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ItemsGet">
            <summary>设置 ProcessResult.get_Items() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ItemsSetIDictionaryOfStringString">
            <summary>设置 ProcessResult.set_Items(IDictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ProcessIdGet">
            <summary>设置 ProcessResult.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.ProcessIdSetString">
            <summary>设置 ProcessResult.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.StatusGet">
            <summary>设置 ProcessResult.get_Status() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessResult.AllInstances.StatusSetProcessStatus">
            <summary>设置 ProcessResult.set_Status(ProcessStatus value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimProcessingCommand">
            <summary>ENode.Commanding.ProcessingCommand 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimProcessingCommand.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimProcessingCommand.#ctor(ENode.Commanding.ProcessingCommand)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimProcessingCommand.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.ShimProcessingCommand.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AggregateRootIdGet">
            <summary>设置 ProcessingCommand.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AggregateRootIdSetString">
            <summary>设置 ProcessingCommand.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.CommandExecuteContextGet">
            <summary>设置 ProcessingCommand.get_CommandExecuteContext() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.CommandExecuteContextSetICommandExecuteContext">
            <summary>设置 ProcessingCommand.set_CommandExecuteContext(ICommandExecuteContext value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.CommandGet">
            <summary>设置 ProcessingCommand.get_Command() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.CommandSetICommand">
            <summary>设置 ProcessingCommand.set_Command(ICommand value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.ConstructorICommandICommandExecuteContext">
            <summary>设置 ProcessingCommand.ProcessingCommand(ICommand command, ICommandExecuteContext commandExecuteContext) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.IncreaseRetriedCount">
            <summary>设置 ProcessingCommand.IncreaseRetriedCount() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.ProcessIdGet">
            <summary>设置 ProcessingCommand.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.ProcessIdSetString">
            <summary>设置 ProcessingCommand.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.RetriedCountGet">
            <summary>设置 ProcessingCommand.get_RetriedCount() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.RetriedCountSetInt32">
            <summary>设置 ProcessingCommand.set_RetriedCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.AggregateRootIdGet">
            <summary>设置 ProcessingCommand.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.AggregateRootIdSetString">
            <summary>设置 ProcessingCommand.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.CommandExecuteContextGet">
            <summary>设置 ProcessingCommand.get_CommandExecuteContext() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.CommandExecuteContextSetICommandExecuteContext">
            <summary>设置 ProcessingCommand.set_CommandExecuteContext(ICommandExecuteContext value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.CommandGet">
            <summary>设置 ProcessingCommand.get_Command() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.CommandSetICommand">
            <summary>设置 ProcessingCommand.set_Command(ICommand value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.IncreaseRetriedCount">
            <summary>设置 ProcessingCommand.IncreaseRetriedCount() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.ProcessIdGet">
            <summary>设置 ProcessingCommand.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.ProcessIdSetString">
            <summary>设置 ProcessingCommand.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.RetriedCountGet">
            <summary>设置 ProcessingCommand.get_RetriedCount() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.ShimProcessingCommand.AllInstances.RetriedCountSetInt32">
            <summary>设置 ProcessingCommand.set_RetriedCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubAggregateCommand`1">
            <summary>ENode.Commanding.AggregateCommand`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateCommand`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateCommand`1.#ctor(`0)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateCommand`1.GetKey">
            <summary>设置 AggregateCommand`1.GetKey() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateCommand`1.GetKey01">
            <summary>设置 AggregateCommand`1.GetKey() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateCommand`1.InitializeStub">
            <summary>初始化 type StubAggregateCommand 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateCommand`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateCommand`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateCommand`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException">
            <summary>ENode.Commanding.AggregateRootAlreadyExistException 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.#ctor(System.Object,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubAggregateRootAlreadyExistException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubAggregateRootAlreadyExistException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.InitializeStub">
            <summary>初始化 type StubAggregateRootAlreadyExistException 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubAggregateRootAlreadyExistException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubCommand">
            <summary>ENode.Commanding.Command 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommand.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommand.GetKey">
            <summary>设置 Command.GetKey() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommand.GetKey01">
            <summary>设置 Command.GetKey() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommand.InitializeStub">
            <summary>初始化 type StubCommand 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommand.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommand.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommand.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException">
            <summary>ENode.Commanding.CommandAggregateRootIdMissingException 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.#ctor(ENode.Commanding.ICommand)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubCommandAggregateRootIdMissingException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubCommandAggregateRootIdMissingException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.InitializeStub">
            <summary>初始化 type StubCommandAggregateRootIdMissingException 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandAggregateRootIdMissingException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException">
            <summary>ENode.Commanding.CommandHandlerNotFoundException 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.#ctor(ENode.Commanding.ICommand)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubCommandHandlerNotFoundException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubCommandHandlerNotFoundException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.InitializeStub">
            <summary>初始化 type StubCommandHandlerNotFoundException 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerNotFoundException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubCommandHandlerTooManyException">
            <summary>ENode.Commanding.CommandHandlerTooManyException 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.#ctor(ENode.Commanding.ICommand)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubCommandHandlerTooManyException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubCommandHandlerTooManyException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.InitializeStub">
            <summary>初始化 type StubCommandHandlerTooManyException 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandHandlerTooManyException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubCommandProcessIdMissingException">
            <summary>ENode.Commanding.CommandProcessIdMissingException 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.#ctor(ENode.Commanding.ICommand)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubCommandProcessIdMissingException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubCommandProcessIdMissingException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.InitializeStub">
            <summary>初始化 type StubCommandProcessIdMissingException 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandProcessIdMissingException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubCommandResult">
            <summary>ENode.Commanding.CommandResult 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandResult.#ctor(ENode.Commanding.CommandStatus,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandResult.InitializeStub">
            <summary>初始化 type StubCommandResult 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubCommandSendException">
            <summary>ENode.Commanding.CommandSendException 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.#ctor(System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubCommandSendException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubCommandSendException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.InitializeStub">
            <summary>初始化 type StubCommandSendException 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubCommandSendException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubCommandSendResult">
            <summary>ENode.Commanding.CommandSendResult 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendResult.#ctor(ENode.Commanding.CommandSendStatus,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubCommandSendResult.InitializeStub">
            <summary>初始化 type StubCommandSendResult 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubCommandSendResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException">
            <summary>ENode.Commanding.DuplicatedCommandHandlerException 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.#ctor(System.Type,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubDuplicatedCommandHandlerException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubDuplicatedCommandHandlerException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.InitializeStub">
            <summary>初始化 type StubDuplicatedCommandHandlerException 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubDuplicatedCommandHandlerException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubEventAlreadyExistException">
            <summary>ENode.Commanding.EventAlreadyExistException 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubEventAlreadyExistException.#ctor(System.Object,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubEventAlreadyExistException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubEventAlreadyExistException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubEventAlreadyExistException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubEventAlreadyExistException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubEventAlreadyExistException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubEventAlreadyExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubEventAlreadyExistException.InitializeStub">
            <summary>初始化 type StubEventAlreadyExistException 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubEventAlreadyExistException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubEventAlreadyExistException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubEventAlreadyExistException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubEventAlreadyExistException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubEventAlreadyExistException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubEventAlreadyExistException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubEventAlreadyExistException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubEventAlreadyExistException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubEventAlreadyExistException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubEventAlreadyExistException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubHandledAggregateCommand">
            <summary>ENode.Commanding.HandledAggregateCommand 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubHandledAggregateCommand.#ctor(ENode.Commanding.ICommand,System.String,System.String,System.String,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubHandledAggregateCommand.InitializeStub">
            <summary>初始化 type StubHandledAggregateCommand 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubHandledAggregateCommand.ToString">
            <summary>设置 HandledAggregateCommand.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubHandledAggregateCommand.ToString01">
            <summary>设置 HandledAggregateCommand.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubHandledAggregateCommand.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubHandledAggregateCommand.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubHandledAggregateCommand.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubHandledCommand">
            <summary>ENode.Commanding.HandledCommand 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubHandledCommand.#ctor(ENode.Commanding.ICommand,System.String,System.String,System.Collections.Generic.IEnumerable{ENode.Eventing.IEvent})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubHandledCommand.InitializeStub">
            <summary>初始化 type StubHandledCommand 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubHandledCommand.ToString">
            <summary>设置 HandledCommand.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubHandledCommand.ToString01">
            <summary>设置 HandledCommand.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubHandledCommand.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubHandledCommand.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubHandledCommand.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubIAggregateCommand">
            <summary>ENode.Commanding.IAggregateCommand 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIAggregateCommand.#ctor">
            <summary>初始化 type StubIAggregateCommand 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIAggregateCommand.AggregateRootIdGet">
            <summary>设置 IAggregateCommand.get_AggregateRootId() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIAggregateCommand.AttachBackingFieldToId">
            <summary>附加委托以将 StubIAggregateCommand.Id 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIAggregateCommand.en::ENode#Commanding#ICommand#GetKey">
            <summary>设置 ICommand.GetKey() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIAggregateCommand.GetKey">
            <summary>设置 ICommand.GetKey() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIAggregateCommand.IdGet">
            <summary>设置 ICommand.get_Id() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIAggregateCommand.IdSetString">
            <summary>设置 ICommand.set_Id(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIAggregateCommand.ItemsGet">
            <summary>设置 ICommand.get_Items() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIAggregateCommand.RetryCountGet">
            <summary>设置 ICommand.get_RetryCount() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubIAggregateCommand.en::ENode#Commanding#IAggregateCommand#AggregateRootId">
            <summary>设置 IAggregateCommand.get_AggregateRootId() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubIAggregateCommand.en::ENode#Commanding#ICommand#Id">
            <summary>设置 ICommand.get_Id() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubIAggregateCommand.en::ENode#Commanding#ICommand#Items">
            <summary>设置 ICommand.get_Items() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubIAggregateCommand.en::ENode#Commanding#ICommand#RetryCount">
            <summary>设置 ICommand.get_RetryCount() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommand">
            <summary>ENode.Commanding.ICommand 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommand.#ctor">
            <summary>初始化 type StubICommand 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommand.AttachBackingFieldToId">
            <summary>附加委托以将 StubICommand.Id 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommand.en::ENode#Commanding#ICommand#GetKey">
            <summary>设置 ICommand.GetKey() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommand.GetKey">
            <summary>设置 ICommand.GetKey() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommand.IdGet">
            <summary>设置 ICommand.get_Id() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommand.IdSetString">
            <summary>设置 ICommand.set_Id(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommand.ItemsGet">
            <summary>设置 ICommand.get_Items() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommand.RetryCountGet">
            <summary>设置 ICommand.get_RetryCount() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubICommand.en::ENode#Commanding#ICommand#Id">
            <summary>设置 ICommand.get_Id() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubICommand.en::ENode#Commanding#ICommand#Items">
            <summary>设置 ICommand.get_Items() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubICommand.en::ENode#Commanding#ICommand#RetryCount">
            <summary>设置 ICommand.get_RetryCount() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommandContext">
            <summary>ENode.Commanding.ICommandContext 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandContext.#ctor">
            <summary>初始化 type StubICommandContext 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandContext.AddIAggregateRoot">
            <summary>设置 ICommandContext.Add(IAggregateRoot aggregateRoot) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandContext.AddIEvent">
            <summary>设置 ICommandContext.Add(IEvent evnt) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandContext.en::ENode#Commanding#ICommandContext#Add(ENode.Domain.IAggregateRoot)">
            <summary>设置 ICommandContext.Add(IAggregateRoot aggregateRoot) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandContext.en::ENode#Commanding#ICommandContext#Add(ENode.Eventing.IEvent)">
            <summary>设置 ICommandContext.Add(IEvent evnt) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandContext.en::ENode#Commanding#ICommandContext#Get``1(System.Object)">
            <summary>设置 ICommandContext.Get(Object id) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandContext.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 Get(Object id) 的存根</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommandExecuteContext">
            <summary>ENode.Commanding.ICommandExecuteContext 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.#ctor">
            <summary>初始化 type StubICommandExecuteContext 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecuteContext.AddIAggregateRoot">
            <summary>设置 ICommandContext.Add(IAggregateRoot aggregateRoot) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecuteContext.AddIEvent">
            <summary>设置 ICommandContext.Add(IEvent evnt) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.AttachBackingFieldToCheckCommandWaiting">
            <summary>附加委托以将 StubICommandExecuteContext.CheckCommandWaiting 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecuteContext.CheckCommandWaitingGet">
            <summary>设置 ICommandExecuteContext.get_CheckCommandWaiting() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecuteContext.CheckCommandWaitingSetBoolean">
            <summary>设置 ICommandExecuteContext.set_CheckCommandWaiting(Boolean value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecuteContext.Clear">
            <summary>设置 ITrackingContext.Clear() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.en::ENode#Commanding#ICommandContext#Add(ENode.Domain.IAggregateRoot)">
            <summary>设置 ICommandContext.Add(IAggregateRoot aggregateRoot) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.en::ENode#Commanding#ICommandContext#Add(ENode.Eventing.IEvent)">
            <summary>设置 ICommandContext.Add(IEvent evnt) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.en::ENode#Commanding#ICommandContext#Get``1(System.Object)">
            <summary>设置 ICommandContext.Get(Object id) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.en::ENode#Commanding#ICommandExecuteContext#OnCommandExecuted(ENode.Commanding.ICommand,ENode.Commanding.CommandStatus,System.String,System.String,System.String,System.String)">
            <summary>设置 ICommandExecuteContext.OnCommandExecuted(ICommand command, CommandStatus commandStatus, String processId, String aggregateRootId, String exceptionTypeName, String errorMessage) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.en::ENode#Commanding#ITrackingContext#Clear">
            <summary>设置 ITrackingContext.Clear() 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.en::ENode#Commanding#ITrackingContext#GetEvents">
            <summary>设置 ITrackingContext.GetEvents() 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.en::ENode#Commanding#ITrackingContext#GetTrackedAggregateRoots">
            <summary>设置 ITrackingContext.GetTrackedAggregateRoots() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecuteContext.GetEvents">
            <summary>设置 ITrackingContext.GetEvents() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecuteContext.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 Get(Object id) 的存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecuteContext.GetTrackedAggregateRoots">
            <summary>设置 ITrackingContext.GetTrackedAggregateRoots() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecuteContext.OnCommandExecutedICommandCommandStatusStringStringStringString">
            <summary>设置 ICommandExecuteContext.OnCommandExecuted(ICommand command, CommandStatus commandStatus, String processId, String aggregateRootId, String exceptionTypeName, String errorMessage) 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubICommandExecuteContext.en::ENode#Commanding#ICommandExecuteContext#CheckCommandWaiting">
            <summary>设置 ICommandExecuteContext.get_CheckCommandWaiting() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommandExecutor">
            <summary>ENode.Commanding.ICommandExecutor 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecutor.#ctor">
            <summary>初始化 type StubICommandExecutor 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandExecutor.en::ENode#Commanding#ICommandExecutor#Execute(ENode.Commanding.ProcessingCommand)">
            <summary>设置 ICommandExecutor.Execute(ProcessingCommand processingCommand) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandExecutor.ExecuteProcessingCommand">
            <summary>设置 ICommandExecutor.Execute(ProcessingCommand processingCommand) 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommandHandler">
            <summary>ENode.Commanding.ICommandHandler 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandHandler.#ctor">
            <summary>初始化 type StubICommandHandler 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandHandler.en::ENode#Infrastructure#IMessageHandler#GetInnerHandler">
            <summary>设置 IMessageHandler.GetInnerHandler() 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandHandler.en::ENode#Infrastructure#IMessageHandler#Handle(System.Object,System.Object)">
            <summary>设置 IMessageHandler.Handle(Object context, Object message) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandHandler.GetInnerHandler">
            <summary>设置 IMessageHandler.GetInnerHandler() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandHandler.HandleObjectObject">
            <summary>设置 IMessageHandler.Handle(Object context, Object message) 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommandHandler`1">
            <summary>ENode.Commanding.ICommandHandler`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandHandler`1.#ctor">
            <summary>初始化 type StubICommandHandler 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandHandler`1.en::ENode#Infrastructure#IMessageHandler{ENode#Commanding#ICommandContext@TCommand}#Handle(ENode.Commanding.ICommandContext,`0)">
            <summary>设置 IMessageHandler`2.Handle(!0 context, !1 message) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandHandler`1.HandleICommandContextT0">
            <summary>设置 IMessageHandler`2.Handle(!0 context, !1 message) 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommandRouteKeyProvider">
            <summary>ENode.Commanding.ICommandRouteKeyProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandRouteKeyProvider.#ctor">
            <summary>初始化 type StubICommandRouteKeyProvider 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandRouteKeyProvider.en::ENode#Commanding#ICommandRouteKeyProvider#GetRouteKey(ENode.Commanding.ICommand)">
            <summary>设置 ICommandRouteKeyProvider.GetRouteKey(ICommand command) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandRouteKeyProvider.GetRouteKeyICommand">
            <summary>设置 ICommandRouteKeyProvider.GetRouteKey(ICommand command) 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommandService">
            <summary>ENode.Commanding.ICommandService 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandService.#ctor">
            <summary>初始化 type StubICommandService 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandService.en::ENode#Commanding#ICommandService#Execute(ENode.Commanding.ICommand)">
            <summary>设置 ICommandService.Execute(ICommand command) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandService.en::ENode#Commanding#ICommandService#Execute(ENode.Commanding.ICommand,ENode.Commanding.CommandReturnType)">
            <summary>设置 ICommandService.Execute(ICommand command, CommandReturnType commandReturnType) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandService.en::ENode#Commanding#ICommandService#Send(ENode.Commanding.ICommand)">
            <summary>设置 ICommandService.Send(ICommand command) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandService.en::ENode#Commanding#ICommandService#SendAsync(ENode.Commanding.ICommand)">
            <summary>设置 ICommandService.SendAsync(ICommand command) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandService.en::ENode#Commanding#ICommandService#StartProcess(ENode.Commanding.IStartProcessCommand)">
            <summary>设置 ICommandService.StartProcess(IStartProcessCommand command) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandService.ExecuteICommand">
            <summary>设置 ICommandService.Execute(ICommand command) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandService.ExecuteICommandCommandReturnType">
            <summary>设置 ICommandService.Execute(ICommand command, CommandReturnType commandReturnType) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandService.SendAsyncICommand">
            <summary>设置 ICommandService.SendAsync(ICommand command) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandService.SendICommand">
            <summary>设置 ICommandService.Send(ICommand command) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandService.StartProcessIStartProcessCommand">
            <summary>设置 ICommandService.StartProcess(IStartProcessCommand command) 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICommandStore">
            <summary>ENode.Commanding.ICommandStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandStore.#ctor">
            <summary>初始化 type StubICommandStore 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandStore.AddHandledCommand">
            <summary>设置 ICommandStore.Add(HandledCommand handledCommand) 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandStore.en::ENode#Commanding#ICommandStore#Add(ENode.Commanding.HandledCommand)">
            <summary>设置 ICommandStore.Add(HandledCommand handledCommand) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandStore.en::ENode#Commanding#ICommandStore#Get(System.String)">
            <summary>设置 ICommandStore.Get(String commandId) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICommandStore.en::ENode#Commanding#ICommandStore#Remove(System.String)">
            <summary>设置 ICommandStore.Remove(String commandId) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandStore.GetString">
            <summary>设置 ICommandStore.Get(String commandId) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubICommandStore.RemoveString">
            <summary>设置 ICommandStore.Remove(String commandId) 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubICreatingAggregateCommand">
            <summary>ENode.Commanding.ICreatingAggregateCommand 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubICreatingAggregateCommand.#ctor">
            <summary>初始化 type StubICreatingAggregateCommand 的新实例</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubIExecutedCommandService">
            <summary>ENode.Commanding.IExecutedCommandService 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIExecutedCommandService.#ctor">
            <summary>初始化 type StubIExecutedCommandService 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIExecutedCommandService.en::ENode#Commanding#IExecutedCommandService#ProcessExecutedCommand(ENode.Commanding.ICommandExecuteContext,ENode.Commanding.ICommand,ENode.Commanding.CommandStatus,System.String,System.String,System.String)">
            <summary>设置 IExecutedCommandService.ProcessExecutedCommand(ICommandExecuteContext context, ICommand command, CommandStatus commandStatus, String processId, String exceptionTypeName, String errorMessage) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIExecutedCommandService.en::ENode#Commanding#IExecutedCommandService#ProcessExecutedCommand(ENode.Commanding.ICommandExecuteContext,ENode.Commanding.IAggregateCommand,ENode.Commanding.CommandStatus,System.String,System.String,System.String,System.String)">
            <summary>设置 IExecutedCommandService.ProcessExecutedCommand(ICommandExecuteContext context, IAggregateCommand command, CommandStatus commandStatus, String processId, String aggregateRootId, String exceptionTypeName, String errorMessage) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIExecutedCommandService.ProcessExecutedCommandICommandExecuteContextIAggregateCommandCommandStatusStringStringStringString">
            <summary>设置 IExecutedCommandService.ProcessExecutedCommand(ICommandExecuteContext context, IAggregateCommand command, CommandStatus commandStatus, String processId, String aggregateRootId, String exceptionTypeName, String errorMessage) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIExecutedCommandService.ProcessExecutedCommandICommandExecuteContextICommandCommandStatusStringStringString">
            <summary>设置 IExecutedCommandService.ProcessExecutedCommand(ICommandExecuteContext context, ICommand command, CommandStatus commandStatus, String processId, String exceptionTypeName, String errorMessage) 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubIProcessCommandSender">
            <summary>ENode.Commanding.IProcessCommandSender 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIProcessCommandSender.#ctor">
            <summary>初始化 type StubIProcessCommandSender 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIProcessCommandSender.en::ENode#Commanding#IProcessCommandSender#SendProcessCommand(ENode.Commanding.ICommand,System.String,System.String)">
            <summary>设置 IProcessCommandSender.SendProcessCommand(ICommand processCommand, String sourceEventId, String sourceExceptionId) 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIProcessCommandSender.SendProcessCommandICommandStringString">
            <summary>设置 IProcessCommandSender.SendProcessCommand(ICommand processCommand, String sourceEventId, String sourceExceptionId) 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubIRetryCommandService">
            <summary>ENode.Commanding.IRetryCommandService 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIRetryCommandService.#ctor">
            <summary>初始化 type StubIRetryCommandService 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIRetryCommandService.en::ENode#Commanding#IRetryCommandService#RetryCommand(ENode.Commanding.ProcessingCommand)">
            <summary>设置 IRetryCommandService.RetryCommand(ProcessingCommand processingCommand) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIRetryCommandService.en::ENode#Commanding#IRetryCommandService#RetryConcurrentCommand(ENode.Commanding.ProcessingCommand)">
            <summary>设置 IRetryCommandService.RetryConcurrentCommand(ProcessingCommand processingCommand) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIRetryCommandService.en::ENode#Commanding#IRetryCommandService#SetCommandExecutor(ENode.Commanding.ICommandExecutor)">
            <summary>设置 IRetryCommandService.SetCommandExecutor(ICommandExecutor commandExecutor) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIRetryCommandService.en::ENode#Commanding#IRetryCommandService#Start">
            <summary>设置 IRetryCommandService.Start() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIRetryCommandService.RetryCommandProcessingCommand">
            <summary>设置 IRetryCommandService.RetryCommand(ProcessingCommand processingCommand) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIRetryCommandService.RetryConcurrentCommandProcessingCommand">
            <summary>设置 IRetryCommandService.RetryConcurrentCommand(ProcessingCommand processingCommand) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIRetryCommandService.SetCommandExecutorICommandExecutor">
            <summary>设置 IRetryCommandService.SetCommandExecutor(ICommandExecutor commandExecutor) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIRetryCommandService.Start">
            <summary>设置 IRetryCommandService.Start() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubIStartProcessCommand">
            <summary>ENode.Commanding.IStartProcessCommand 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIStartProcessCommand.#ctor">
            <summary>初始化 type StubIStartProcessCommand 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIStartProcessCommand.AttachBackingFieldToId">
            <summary>附加委托以将 StubIStartProcessCommand.Id 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIStartProcessCommand.en::ENode#Commanding#ICommand#GetKey">
            <summary>设置 ICommand.GetKey() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIStartProcessCommand.GetKey">
            <summary>设置 ICommand.GetKey() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIStartProcessCommand.IdGet">
            <summary>设置 ICommand.get_Id() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIStartProcessCommand.IdSetString">
            <summary>设置 ICommand.set_Id(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIStartProcessCommand.ItemsGet">
            <summary>设置 ICommand.get_Items() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIStartProcessCommand.ProcessIdGet">
            <summary>设置 IStartProcessCommand.get_ProcessId() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIStartProcessCommand.RetryCountGet">
            <summary>设置 ICommand.get_RetryCount() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubIStartProcessCommand.en::ENode#Commanding#ICommand#Id">
            <summary>设置 ICommand.get_Id() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubIStartProcessCommand.en::ENode#Commanding#ICommand#Items">
            <summary>设置 ICommand.get_Items() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubIStartProcessCommand.en::ENode#Commanding#IStartProcessCommand#ProcessId">
            <summary>设置 IStartProcessCommand.get_ProcessId() 的 stub</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubIStartProcessCommand.en::ENode#Commanding#ICommand#RetryCount">
            <summary>设置 ICommand.get_RetryCount() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubITrackingContext">
            <summary>ENode.Commanding.ITrackingContext 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubITrackingContext.#ctor">
            <summary>初始化 type StubITrackingContext 的新实例</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubITrackingContext.Clear">
            <summary>设置 ITrackingContext.Clear() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubITrackingContext.en::ENode#Commanding#ITrackingContext#Clear">
            <summary>设置 ITrackingContext.Clear() 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubITrackingContext.en::ENode#Commanding#ITrackingContext#GetEvents">
            <summary>设置 ITrackingContext.GetEvents() 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubITrackingContext.en::ENode#Commanding#ITrackingContext#GetTrackedAggregateRoots">
            <summary>设置 ITrackingContext.GetTrackedAggregateRoots() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubITrackingContext.GetEvents">
            <summary>设置 ITrackingContext.GetEvents() 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubITrackingContext.GetTrackedAggregateRoots">
            <summary>设置 ITrackingContext.GetTrackedAggregateRoots() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubIWaitingCommandService">
            <summary>ENode.Commanding.IWaitingCommandService 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIWaitingCommandService.#ctor">
            <summary>初始化 type StubIWaitingCommandService 的新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIWaitingCommandService.en::ENode#Commanding#IWaitingCommandService#NotifyCommandExecuted(System.String)">
            <summary>设置 IWaitingCommandService.NotifyCommandExecuted(String aggregateRootId) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIWaitingCommandService.en::ENode#Commanding#IWaitingCommandService#RegisterCommand(ENode.Commanding.ProcessingCommand)">
            <summary>设置 IWaitingCommandService.RegisterCommand(ProcessingCommand processingCommand) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIWaitingCommandService.en::ENode#Commanding#IWaitingCommandService#SetCommandExecutor(ENode.Commanding.ICommandExecutor)">
            <summary>设置 IWaitingCommandService.SetCommandExecutor(ICommandExecutor commandExecutor) 的 存根</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubIWaitingCommandService.en::ENode#Commanding#IWaitingCommandService#Start">
            <summary>设置 IWaitingCommandService.Start() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIWaitingCommandService.NotifyCommandExecutedString">
            <summary>设置 IWaitingCommandService.NotifyCommandExecuted(String aggregateRootId) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIWaitingCommandService.RegisterCommandProcessingCommand">
            <summary>设置 IWaitingCommandService.RegisterCommand(ProcessingCommand processingCommand) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIWaitingCommandService.SetCommandExecutorICommandExecutor">
            <summary>设置 IWaitingCommandService.SetCommandExecutor(ICommandExecutor commandExecutor) 的 stub</summary>
        </member>
        <member name="F:ENode.Commanding.Fakes.StubIWaitingCommandService.Start">
            <summary>设置 IWaitingCommandService.Start() 的 stub</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubProcessResult">
            <summary>ENode.Commanding.ProcessResult 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubProcessResult.#ctor(System.String,System.String,ENode.Commanding.ProcessStatus,System.Int32,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubProcessResult.InitializeStub">
            <summary>初始化 type StubProcessResult 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubProcessResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubProcessResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubProcessResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Fakes.StubProcessingCommand">
            <summary>ENode.Commanding.ProcessingCommand 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubProcessingCommand.#ctor(ENode.Commanding.ICommand,ENode.Commanding.ICommandExecuteContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Fakes.StubProcessingCommand.InitializeStub">
            <summary>初始化 type StubProcessingCommand 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubProcessingCommand.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubProcessingCommand.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Fakes.StubProcessingCommand.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1">
            <summary>ENode.Commanding.Impl.CommandHandlerWrapper`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.#ctor(ENode.Commanding.Impl.CommandHandlerWrapper{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.Bind(ENode.Commanding.ICommandHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.Bind(ENode.Infrastructure.IMessageHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.ConstructorIMessageHandlerOfICommandContextT0">
            <summary>设置 CommandHandlerWrapper`1.CommandHandlerWrapper`1(IMessageHandler`2&lt;ICommandContext,!0&gt; commandHandler) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimCommandHandlerWrapper`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor">
            <summary>ENode.Commanding.Impl.DefaultCommandExecutor 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.#ctor(ENode.Commanding.Impl.DefaultCommandExecutor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.Bind(ENode.Commanding.ICommandExecutor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.BuildDomainEventStreamIAggregateRootProcessingCommand">
            <summary>设置 DefaultCommandExecutor.BuildDomainEventStream(IAggregateRoot aggregateRoot, ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.CommitAggregateChangesProcessingCommand">
            <summary>设置 DefaultCommandExecutor.CommitAggregateChanges(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.CommitChangesProcessingCommand">
            <summary>设置 DefaultCommandExecutor.CommitChanges(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.ConstructorICommandStoreIEventStoreIWaitingCommandServiceIExecutedCommandServiceIMessageHandlerProviderOfICommandHandlerITypeCodeProviderOfIAggregateRootIEventServiceIEventPublishInfoStoreIMessagePublisherOfIPublishableExceptionIRetryCommandServiceILoggerF">
            <summary>设置 DefaultCommandExecutor.DefaultCommandExecutor(ICommandStore commandStore, IEventStore eventStore, IWaitingCommandService waitingCommandService, IExecutedCommandService executedCommandService, IMessageHandlerProvider`1&lt;ICommandHandler&gt; commandHandlerProvider, ITypeCodeProvider`1&lt;IAggregateRoot&gt; aggregateRootTypeProvider, IEventService eventService, IEventPublishInfoStore eventPublishInfoStore, IMessagePublisher`1&lt;IPublishableException&gt; exceptionPublisher, IRetryCommandService retryCommandService, ILoggerFactory loggerFactory) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.ExecuteProcessingCommand">
            <summary>设置 DefaultCommandExecutor.Execute(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.HandleCommandExceptionProcessingCommandICommandHandlerException">
            <summary>设置 DefaultCommandExecutor.HandleCommandException(ProcessingCommand processingCommand, ICommandHandler commandHandler, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.NotifyCommandExecuteFailedOrNothingChangedProcessingCommandCommandStatusStringString">
            <summary>设置 DefaultCommandExecutor.NotifyCommandExecuteFailedOrNothingChanged(ProcessingCommand processingCommand, CommandStatus commandStatus, String exceptionTypeName, String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor._CommitAggregateChangesb__0IAggregateRoot">
            <summary>设置 DefaultCommandExecutor.&lt;CommitAggregateChanges&gt;b__0(IAggregateRoot x) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor._CommitAggregateChangesb__1IAggregateRoot">
            <summary>设置 DefaultCommandExecutor.&lt;CommitAggregateChanges&gt;b__1(IAggregateRoot x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.AllInstances.BuildDomainEventStreamIAggregateRootProcessingCommand">
            <summary>设置 DefaultCommandExecutor.BuildDomainEventStream(IAggregateRoot aggregateRoot, ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.AllInstances.CommitAggregateChangesProcessingCommand">
            <summary>设置 DefaultCommandExecutor.CommitAggregateChanges(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.AllInstances.CommitChangesProcessingCommand">
            <summary>设置 DefaultCommandExecutor.CommitChanges(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.AllInstances.ExecuteProcessingCommand">
            <summary>设置 DefaultCommandExecutor.Execute(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.AllInstances.HandleCommandExceptionProcessingCommandICommandHandlerException">
            <summary>设置 DefaultCommandExecutor.HandleCommandException(ProcessingCommand processingCommand, ICommandHandler commandHandler, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandExecutor.AllInstances.NotifyCommandExecuteFailedOrNothingChangedProcessingCommandCommandStatusStringString">
            <summary>设置 DefaultCommandExecutor.NotifyCommandExecuteFailedOrNothingChanged(ProcessingCommand processingCommand, CommandStatus commandStatus, String exceptionTypeName, String errorMessage) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider">
            <summary>ENode.Commanding.Impl.DefaultCommandHandlerProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.#ctor(ENode.Commanding.Impl.DefaultCommandHandlerProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.Bind(ENode.Infrastructure.IAssemblyInitializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.Bind(ENode.Infrastructure.IMessageHandlerProvider{ENode.Commanding.ICommandHandler})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.Constructor">
            <summary>设置 DefaultCommandHandlerProvider.DefaultCommandHandlerProvider() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultCommandHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.GetMessageHandlerWrapperType">
            <summary>设置 DefaultCommandHandlerProvider.GetMessageHandlerWrapperType() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.AllInstances.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultCommandHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandHandlerProvider.AllInstances.GetMessageHandlerWrapperType">
            <summary>设置 DefaultCommandHandlerProvider.GetMessageHandlerWrapperType() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider">
            <summary>ENode.Commanding.Impl.DefaultCommandRouteKeyProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.#ctor(ENode.Commanding.Impl.DefaultCommandRouteKeyProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.Bind(ENode.Commanding.ICommandRouteKeyProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.Constructor">
            <summary>设置 DefaultCommandRouteKeyProvider.DefaultCommandRouteKeyProvider() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.GetRouteKeyICommand">
            <summary>设置 DefaultCommandRouteKeyProvider.GetRouteKey(ICommand command) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultCommandRouteKeyProvider.AllInstances.GetRouteKeyICommand">
            <summary>设置 DefaultCommandRouteKeyProvider.GetRouteKey(ICommand command) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService">
            <summary>ENode.Commanding.Impl.DefaultExecutedCommandService 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.#ctor(ENode.Commanding.Impl.DefaultExecutedCommandService)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.Bind(ENode.Commanding.IExecutedCommandService)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.ConstructorIWaitingCommandService">
            <summary>设置 DefaultExecutedCommandService.DefaultExecutedCommandService(IWaitingCommandService waitingCommandService) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.ProcessExecutedCommandICommandExecuteContextIAggregateCommandCommandStatusStringStringStringString">
            <summary>设置 DefaultExecutedCommandService.ProcessExecutedCommand(ICommandExecuteContext context, IAggregateCommand command, CommandStatus commandStatus, String processId, String aggregateRootId, String exceptionTypeName, String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.ProcessExecutedCommandICommandExecuteContextICommandCommandStatusStringStringString">
            <summary>设置 DefaultExecutedCommandService.ProcessExecutedCommand(ICommandExecuteContext context, ICommand command, CommandStatus commandStatus, String processId, String exceptionTypeName, String errorMessage) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.AllInstances.ProcessExecutedCommandICommandExecuteContextIAggregateCommandCommandStatusStringStringStringString">
            <summary>设置 DefaultExecutedCommandService.ProcessExecutedCommand(ICommandExecuteContext context, IAggregateCommand command, CommandStatus commandStatus, String processId, String aggregateRootId, String exceptionTypeName, String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultExecutedCommandService.AllInstances.ProcessExecutedCommandICommandExecuteContextICommandCommandStatusStringStringString">
            <summary>设置 DefaultExecutedCommandService.ProcessExecutedCommand(ICommandExecuteContext context, ICommand command, CommandStatus commandStatus, String processId, String exceptionTypeName, String errorMessage) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService">
            <summary>ENode.Commanding.Impl.DefaultRetryCommandService 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.#ctor(ENode.Commanding.Impl.DefaultRetryCommandService)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.Bind(ENode.Commanding.IRetryCommandService)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.ConstructorIActionExecutionServiceILoggerFactory">
            <summary>设置 DefaultRetryCommandService.DefaultRetryCommandService(IActionExecutionService actionExecutionService, ILoggerFactory loggerFactory) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.RetryCommandProcessingCommand">
            <summary>设置 DefaultRetryCommandService.RetryCommand(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.RetryConcurrentCommandProcessingCommand">
            <summary>设置 DefaultRetryCommandService.RetryConcurrentCommand(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.SetCommandExecutorICommandExecutor">
            <summary>设置 DefaultRetryCommandService.SetCommandExecutor(ICommandExecutor commandExecutor) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.Start">
            <summary>设置 DefaultRetryCommandService.Start() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService._ctorb__0">
            <summary>设置 DefaultRetryCommandService.&lt;.ctor&gt;b__0() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.AllInstances.RetryCommandProcessingCommand">
            <summary>设置 DefaultRetryCommandService.RetryCommand(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.AllInstances.RetryConcurrentCommandProcessingCommand">
            <summary>设置 DefaultRetryCommandService.RetryConcurrentCommand(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.AllInstances.SetCommandExecutorICommandExecutor">
            <summary>设置 DefaultRetryCommandService.SetCommandExecutor(ICommandExecutor commandExecutor) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.AllInstances.Start">
            <summary>设置 DefaultRetryCommandService.Start() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultRetryCommandService.AllInstances._ctorb__0">
            <summary>设置 DefaultRetryCommandService.&lt;.ctor&gt;b__0() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService">
            <summary>ENode.Commanding.Impl.DefaultWaitingCommandService 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.#ctor(ENode.Commanding.Impl.DefaultWaitingCommandService)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.Bind(ENode.Commanding.IWaitingCommandService)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.ConstructorIActionExecutionServiceILoggerFactory">
            <summary>设置 DefaultWaitingCommandService.DefaultWaitingCommandService(IActionExecutionService actionExecutionService, ILoggerFactory loggerFactory) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.NotifyCommandExecutedString">
            <summary>设置 DefaultWaitingCommandService.NotifyCommandExecuted(String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.RegisterCommandProcessingCommand">
            <summary>设置 DefaultWaitingCommandService.RegisterCommand(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.SetCommandExecutorICommandExecutor">
            <summary>设置 DefaultWaitingCommandService.SetCommandExecutor(ICommandExecutor commandExecutor) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.Start">
            <summary>设置 DefaultWaitingCommandService.Start() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService._ctorb__0">
            <summary>设置 DefaultWaitingCommandService.&lt;.ctor&gt;b__0() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.AllInstances.NotifyCommandExecutedString">
            <summary>设置 DefaultWaitingCommandService.NotifyCommandExecuted(String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.AllInstances.RegisterCommandProcessingCommand">
            <summary>设置 DefaultWaitingCommandService.RegisterCommand(ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.AllInstances.SetCommandExecutorICommandExecutor">
            <summary>设置 DefaultWaitingCommandService.SetCommandExecutor(ICommandExecutor commandExecutor) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.AllInstances.Start">
            <summary>设置 DefaultWaitingCommandService.Start() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimDefaultWaitingCommandService.AllInstances._ctorb__0">
            <summary>设置 DefaultWaitingCommandService.&lt;.ctor&gt;b__0() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore">
            <summary>ENode.Commanding.Impl.InMemoryCommandStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.#ctor(ENode.Commanding.Impl.InMemoryCommandStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.Bind(ENode.Commanding.ICommandStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.AddHandledCommand">
            <summary>设置 InMemoryCommandStore.Add(HandledCommand handledCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.Constructor">
            <summary>设置 InMemoryCommandStore.InMemoryCommandStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.GetString">
            <summary>设置 InMemoryCommandStore.Get(String commandId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.RemoveString">
            <summary>设置 InMemoryCommandStore.Remove(String commandId) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.AllInstances.AddHandledCommand">
            <summary>设置 InMemoryCommandStore.Add(HandledCommand handledCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.AllInstances.GetString">
            <summary>设置 InMemoryCommandStore.Get(String commandId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimInMemoryCommandStore.AllInstances.RemoveString">
            <summary>设置 InMemoryCommandStore.Remove(String commandId) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService">
            <summary>ENode.Commanding.Impl.NotImplementedCommandService 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.#ctor(ENode.Commanding.Impl.NotImplementedCommandService)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.Bind(ENode.Commanding.ICommandService)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.Bind(ENode.Commanding.IProcessCommandSender)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.Constructor">
            <summary>设置 NotImplementedCommandService.NotImplementedCommandService() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.ExecuteICommand">
            <summary>设置 NotImplementedCommandService.Execute(ICommand command) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.ExecuteICommandCommandReturnType">
            <summary>设置 NotImplementedCommandService.Execute(ICommand command, CommandReturnType commandReturnType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.SendAsyncICommand">
            <summary>设置 NotImplementedCommandService.SendAsync(ICommand command) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.SendICommand">
            <summary>设置 NotImplementedCommandService.Send(ICommand command) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.SendProcessCommandICommandStringString">
            <summary>设置 NotImplementedCommandService.SendProcessCommand(ICommand processCommand, String sourceEventId, String sourceExceptionId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.StartProcessIStartProcessCommand">
            <summary>设置 NotImplementedCommandService.StartProcess(IStartProcessCommand command) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.AllInstances.ExecuteICommand">
            <summary>设置 NotImplementedCommandService.Execute(ICommand command) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.AllInstances.ExecuteICommandCommandReturnType">
            <summary>设置 NotImplementedCommandService.Execute(ICommand command, CommandReturnType commandReturnType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.AllInstances.SendAsyncICommand">
            <summary>设置 NotImplementedCommandService.SendAsync(ICommand command) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.AllInstances.SendICommand">
            <summary>设置 NotImplementedCommandService.Send(ICommand command) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.AllInstances.SendProcessCommandICommandStringString">
            <summary>设置 NotImplementedCommandService.SendProcessCommand(ICommand processCommand, String sourceEventId, String sourceExceptionId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandService.AllInstances.StartProcessIStartProcessCommand">
            <summary>设置 NotImplementedCommandService.StartProcess(IStartProcessCommand command) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider">
            <summary>ENode.Commanding.Impl.NotImplementedCommandTypeCodeProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider.#ctor(ENode.Commanding.Impl.NotImplementedCommandTypeCodeProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider.Bind(ENode.Infrastructure.ITypeCodeProvider{ENode.Commanding.ICommand})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider.Constructor">
            <summary>设置 NotImplementedCommandTypeCodeProvider.NotImplementedCommandTypeCodeProvider() 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimNotImplementedCommandTypeCodeProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore">
            <summary>ENode.Commanding.Impl.SqlServerCommandStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.#ctor(ENode.Commanding.Impl.SqlServerCommandStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.Bind(ENode.Commanding.ICommandStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.AddHandledCommand">
            <summary>设置 SqlServerCommandStore.Add(HandledCommand handledCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.Constructor">
            <summary>设置 SqlServerCommandStore.SqlServerCommandStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.GetConnection">
            <summary>设置 SqlServerCommandStore.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.GetString">
            <summary>设置 SqlServerCommandStore.Get(String commandId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.RemoveString">
            <summary>设置 SqlServerCommandStore.Remove(String commandId) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.AllInstances.AddHandledCommand">
            <summary>设置 SqlServerCommandStore.Add(HandledCommand handledCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.AllInstances.GetConnection">
            <summary>设置 SqlServerCommandStore.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.AllInstances.GetString">
            <summary>设置 SqlServerCommandStore.Get(String commandId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.ShimSqlServerCommandStore.AllInstances.RemoveString">
            <summary>设置 SqlServerCommandStore.Remove(String commandId) 的 填充码</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubCommandHandlerWrapper`1">
            <summary>ENode.Commanding.Impl.CommandHandlerWrapper`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubCommandHandlerWrapper`1.#ctor(ENode.Infrastructure.IMessageHandler{ENode.Commanding.ICommandContext,`0})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubCommandHandlerWrapper`1.InitializeStub">
            <summary>初始化 type StubCommandHandlerWrapper 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubCommandHandlerWrapper`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubCommandHandlerWrapper`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubCommandHandlerWrapper`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubDefaultCommandExecutor">
            <summary>ENode.Commanding.Impl.DefaultCommandExecutor 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultCommandExecutor.#ctor(ENode.Commanding.ICommandStore,ENode.Eventing.IEventStore,ENode.Commanding.IWaitingCommandService,ENode.Commanding.IExecutedCommandService,ENode.Infrastructure.IMessageHandlerProvider{ENode.Commanding.ICommandHandler},ENode.Infrastructure.ITypeCodeProvider{ENode.Domain.IAggregateRoot},ENode.Eventing.IEventService,ENode.Eventing.IEventPublishInfoStore,ENode.Infrastructure.IMessagePublisher{ENode.Exceptions.IPublishableException},ENode.Commanding.IRetryCommandService,ECommon.Logging.ILoggerFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultCommandExecutor.InitializeStub">
            <summary>初始化 type StubDefaultCommandExecutor 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandExecutor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandExecutor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandExecutor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider">
            <summary>ENode.Commanding.Impl.DefaultCommandHandlerProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultCommandHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.GetMessageHandlerGenericInterfaceType01">
            <summary>设置 DefaultCommandHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.GetMessageHandlerWrapperType">
            <summary>设置 DefaultCommandHandlerProvider.GetMessageHandlerWrapperType() 的 存根</summary>
        </member>
        <member name="F:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.GetMessageHandlerWrapperType01">
            <summary>设置 DefaultCommandHandlerProvider.GetMessageHandlerWrapperType() 的 stub</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.InitializeStub">
            <summary>初始化 type StubDefaultCommandHandlerProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandHandlerProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubDefaultCommandRouteKeyProvider">
            <summary>ENode.Commanding.Impl.DefaultCommandRouteKeyProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultCommandRouteKeyProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultCommandRouteKeyProvider.InitializeStub">
            <summary>初始化 type StubDefaultCommandRouteKeyProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandRouteKeyProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandRouteKeyProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultCommandRouteKeyProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubDefaultExecutedCommandService">
            <summary>ENode.Commanding.Impl.DefaultExecutedCommandService 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultExecutedCommandService.#ctor(ENode.Commanding.IWaitingCommandService)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultExecutedCommandService.InitializeStub">
            <summary>初始化 type StubDefaultExecutedCommandService 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultExecutedCommandService.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultExecutedCommandService.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultExecutedCommandService.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubDefaultRetryCommandService">
            <summary>ENode.Commanding.Impl.DefaultRetryCommandService 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultRetryCommandService.#ctor(ECommon.Retring.IActionExecutionService,ECommon.Logging.ILoggerFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultRetryCommandService.InitializeStub">
            <summary>初始化 type StubDefaultRetryCommandService 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultRetryCommandService.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultRetryCommandService.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultRetryCommandService.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubDefaultWaitingCommandService">
            <summary>ENode.Commanding.Impl.DefaultWaitingCommandService 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultWaitingCommandService.#ctor(ECommon.Retring.IActionExecutionService,ECommon.Logging.ILoggerFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubDefaultWaitingCommandService.InitializeStub">
            <summary>初始化 type StubDefaultWaitingCommandService 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultWaitingCommandService.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultWaitingCommandService.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubDefaultWaitingCommandService.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubInMemoryCommandStore">
            <summary>ENode.Commanding.Impl.InMemoryCommandStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubInMemoryCommandStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubInMemoryCommandStore.InitializeStub">
            <summary>初始化 type StubInMemoryCommandStore 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubInMemoryCommandStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubInMemoryCommandStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubInMemoryCommandStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandService">
            <summary>ENode.Commanding.Impl.NotImplementedCommandService 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandService.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandService.InitializeStub">
            <summary>初始化 type StubNotImplementedCommandService 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandService.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandService.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandService.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandTypeCodeProvider">
            <summary>ENode.Commanding.Impl.NotImplementedCommandTypeCodeProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandTypeCodeProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandTypeCodeProvider.InitializeStub">
            <summary>初始化 type StubNotImplementedCommandTypeCodeProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandTypeCodeProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandTypeCodeProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubNotImplementedCommandTypeCodeProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Commanding.Impl.Fakes.StubSqlServerCommandStore">
            <summary>ENode.Commanding.Impl.SqlServerCommandStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubSqlServerCommandStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Commanding.Impl.Fakes.StubSqlServerCommandStore.InitializeStub">
            <summary>初始化 type StubSqlServerCommandStore 的新实例</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubSqlServerCommandStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubSqlServerCommandStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Commanding.Impl.Fakes.StubSqlServerCommandStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.ShimConfigurationExtensions">
            <summary>ENode.Configurations.ConfigurationExtensions 的填充码类型</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimConfigurationExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimConfigurationExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimConfigurationExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationExtensions.CreateENodeConfigurationConfigurationSetting">
            <summary>设置 ConfigurationExtensions.CreateENode(Configuration configuration, ConfigurationSetting setting) 的 填充码</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.ShimConfigurationSetting">
            <summary>ENode.Configurations.ConfigurationSetting 的填充码类型</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimConfigurationSetting.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimConfigurationSetting.#ctor(ENode.Configurations.ConfigurationSetting)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimConfigurationSetting.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimConfigurationSetting.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.Constructor">
            <summary>设置 ConfigurationSetting.ConfigurationSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.EnableGroupCommitEventGet">
            <summary>设置 ConfigurationSetting.get_EnableGroupCommitEvent() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.EnableGroupCommitEventSetBoolean">
            <summary>设置 ConfigurationSetting.set_EnableGroupCommitEvent(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.GroupCommitEventIntervalGet">
            <summary>设置 ConfigurationSetting.get_GroupCommitEventInterval() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.GroupCommitEventIntervalSetInt32">
            <summary>设置 ConfigurationSetting.set_GroupCommitEventInterval(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.GroupCommitEventMaxCountGet">
            <summary>设置 ConfigurationSetting.get_GroupCommitEventMaxCount() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.GroupCommitEventMaxCountSetInt32">
            <summary>设置 ConfigurationSetting.set_GroupCommitEventMaxCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerCommandStoreSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerCommandStoreSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerCommandStoreSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerCommandStoreSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerDefaultConnectionStringGet">
            <summary>设置 ConfigurationSetting.get_SqlServerDefaultConnectionString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerDefaultConnectionStringSetString">
            <summary>设置 ConfigurationSetting.set_SqlServerDefaultConnectionString(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerEventHandleInfoStoreSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerEventHandleInfoStoreSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerEventHandleInfoStoreSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerEventHandleInfoStoreSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerEventPublishInfoStoreSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerEventPublishInfoStoreSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerEventPublishInfoStoreSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerEventPublishInfoStoreSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerEventStoreSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerEventStoreSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerEventStoreSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerEventStoreSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerLockServiceSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerLockServiceSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.SqlServerLockServiceSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerLockServiceSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.EnableGroupCommitEventGet">
            <summary>设置 ConfigurationSetting.get_EnableGroupCommitEvent() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.EnableGroupCommitEventSetBoolean">
            <summary>设置 ConfigurationSetting.set_EnableGroupCommitEvent(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.GroupCommitEventIntervalGet">
            <summary>设置 ConfigurationSetting.get_GroupCommitEventInterval() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.GroupCommitEventIntervalSetInt32">
            <summary>设置 ConfigurationSetting.set_GroupCommitEventInterval(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.GroupCommitEventMaxCountGet">
            <summary>设置 ConfigurationSetting.get_GroupCommitEventMaxCount() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.GroupCommitEventMaxCountSetInt32">
            <summary>设置 ConfigurationSetting.set_GroupCommitEventMaxCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerCommandStoreSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerCommandStoreSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerCommandStoreSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerCommandStoreSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerDefaultConnectionStringGet">
            <summary>设置 ConfigurationSetting.get_SqlServerDefaultConnectionString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerDefaultConnectionStringSetString">
            <summary>设置 ConfigurationSetting.set_SqlServerDefaultConnectionString(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerEventHandleInfoStoreSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerEventHandleInfoStoreSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerEventHandleInfoStoreSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerEventHandleInfoStoreSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerEventPublishInfoStoreSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerEventPublishInfoStoreSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerEventPublishInfoStoreSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerEventPublishInfoStoreSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerEventStoreSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerEventStoreSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerEventStoreSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerEventStoreSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerLockServiceSettingGet">
            <summary>设置 ConfigurationSetting.get_SqlServerLockServiceSetting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimConfigurationSetting.AllInstances.SqlServerLockServiceSettingSetDbTableSetting">
            <summary>设置 ConfigurationSetting.set_SqlServerLockServiceSetting(DbTableSetting value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.ShimDbTableSetting">
            <summary>ENode.Configurations.DbTableSetting 的填充码类型</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimDbTableSetting.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimDbTableSetting.#ctor(ENode.Configurations.DbTableSetting)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimDbTableSetting.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimDbTableSetting.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.ConnectionStringGet">
            <summary>设置 DbTableSetting.get_ConnectionString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.ConnectionStringSetString">
            <summary>设置 DbTableSetting.set_ConnectionString(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.ConstructorConfigurationSetting">
            <summary>设置 DbTableSetting.DbTableSetting(ConfigurationSetting configurationSetting) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.PrimaryKeyNameGet">
            <summary>设置 DbTableSetting.get_PrimaryKeyName() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.PrimaryKeyNameSetString">
            <summary>设置 DbTableSetting.set_PrimaryKeyName(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.TableNameGet">
            <summary>设置 DbTableSetting.get_TableName() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.TableNameSetString">
            <summary>设置 DbTableSetting.set_TableName(String value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.ShimDbTableSetting.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.AllInstances.ConnectionStringGet">
            <summary>设置 DbTableSetting.get_ConnectionString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.AllInstances.ConnectionStringSetString">
            <summary>设置 DbTableSetting.set_ConnectionString(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.AllInstances.PrimaryKeyNameGet">
            <summary>设置 DbTableSetting.get_PrimaryKeyName() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.AllInstances.PrimaryKeyNameSetString">
            <summary>设置 DbTableSetting.set_PrimaryKeyName(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.AllInstances.TableNameGet">
            <summary>设置 DbTableSetting.get_TableName() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimDbTableSetting.AllInstances.TableNameSetString">
            <summary>设置 DbTableSetting.set_TableName(String value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.ShimENodeConfiguration">
            <summary>ENode.Configurations.ENodeConfiguration 的填充码类型</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimENodeConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimENodeConfiguration.#ctor(ENode.Configurations.ENodeConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimENodeConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimENodeConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.ShimENodeConfiguration.IsAssemblyInitializerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Boolean})">
            <summary>设置 ENodeConfiguration.IsAssemblyInitializer() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.ConstructorConfigurationConfigurationSetting">
            <summary>设置 ENodeConfiguration.ENodeConfiguration(Configuration configuration, ConfigurationSetting setting) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.CreateENodeConfigurationConfigurationSetting">
            <summary>设置 ENodeConfiguration.CreateENode(Configuration configuration, ConfigurationSetting setting) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.GetCommonConfiguration">
            <summary>设置 ENodeConfiguration.GetCommonConfiguration() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.InitializeBusinessAssembliesAssemblyArray">
            <summary>设置 ENodeConfiguration.InitializeBusinessAssemblies(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.InstanceGet">
            <summary>设置 ENodeConfiguration.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.InstanceSetENodeConfiguration">
            <summary>设置 ENodeConfiguration.set_Instance(ENodeConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.IsAssemblyInitializerObject">
            <summary>设置 ENodeConfiguration.IsAssemblyInitializer(Object instance) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.IsAssemblyInitializerType">
            <summary>设置 ENodeConfiguration.IsAssemblyInitializer(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.ParseLifeType">
            <summary>设置 ENodeConfiguration.ParseLife(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.RegisterBusinessComponentsAssemblyArray">
            <summary>设置 ENodeConfiguration.RegisterBusinessComponents(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.RegisterENodeComponents">
            <summary>设置 ENodeConfiguration.RegisterENodeComponents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.SettingGet">
            <summary>设置 ENodeConfiguration.get_Setting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.SettingSetConfigurationSetting">
            <summary>设置 ENodeConfiguration.set_Setting(ConfigurationSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.StartENode">
            <summary>设置 ENodeConfiguration.StartENode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.UseSqlServerCommandStore">
            <summary>设置 ENodeConfiguration.UseSqlServerCommandStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.UseSqlServerEventHandleInfoStore">
            <summary>设置 ENodeConfiguration.UseSqlServerEventHandleInfoStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.UseSqlServerEventPublishInfoStore">
            <summary>设置 ENodeConfiguration.UseSqlServerEventPublishInfoStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.UseSqlServerEventStore">
            <summary>设置 ENodeConfiguration.UseSqlServerEventStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.UseSqlServerLockService">
            <summary>设置 ENodeConfiguration.UseSqlServerLockService() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.ValidateSerializableTypesAssemblyArray">
            <summary>设置 ENodeConfiguration.ValidateSerializableTypes(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration._ValidateSerializableTypesb__0Type">
            <summary>设置 ENodeConfiguration.&lt;ValidateSerializableTypes&gt;b__0(Type x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.GetCommonConfiguration">
            <summary>设置 ENodeConfiguration.GetCommonConfiguration() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.InitializeBusinessAssembliesAssemblyArray">
            <summary>设置 ENodeConfiguration.InitializeBusinessAssemblies(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.RegisterBusinessComponentsAssemblyArray">
            <summary>设置 ENodeConfiguration.RegisterBusinessComponents(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.RegisterENodeComponents">
            <summary>设置 ENodeConfiguration.RegisterENodeComponents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.SettingGet">
            <summary>设置 ENodeConfiguration.get_Setting() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.SettingSetConfigurationSetting">
            <summary>设置 ENodeConfiguration.set_Setting(ConfigurationSetting value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.StartENode">
            <summary>设置 ENodeConfiguration.StartENode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.UseSqlServerCommandStore">
            <summary>设置 ENodeConfiguration.UseSqlServerCommandStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.UseSqlServerEventHandleInfoStore">
            <summary>设置 ENodeConfiguration.UseSqlServerEventHandleInfoStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.UseSqlServerEventPublishInfoStore">
            <summary>设置 ENodeConfiguration.UseSqlServerEventPublishInfoStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.UseSqlServerEventStore">
            <summary>设置 ENodeConfiguration.UseSqlServerEventStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.ShimENodeConfiguration.AllInstances.UseSqlServerLockService">
            <summary>设置 ENodeConfiguration.UseSqlServerLockService() 的 填充码</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.StubConfigurationSetting">
            <summary>ENode.Configurations.ConfigurationSetting 的存根类型</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.StubConfigurationSetting.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.StubConfigurationSetting.InitializeStub">
            <summary>初始化 type StubConfigurationSetting 的新实例</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.StubConfigurationSetting.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.StubConfigurationSetting.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.StubConfigurationSetting.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Configurations.Fakes.StubDbTableSetting">
            <summary>ENode.Configurations.DbTableSetting 的存根类型</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.StubDbTableSetting.#ctor(ENode.Configurations.ConfigurationSetting)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Configurations.Fakes.StubDbTableSetting.InitializeStub">
            <summary>初始化 type StubDbTableSetting 的新实例</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.StubDbTableSetting.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.StubDbTableSetting.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Configurations.Fakes.StubDbTableSetting.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.ShimAggregateRoot`1">
            <summary>ENode.Domain.AggregateRoot`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRoot`1.#ctor(ENode.Domain.AggregateRoot{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRoot`1.ActAsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 AggregateRoot`1.ActAs() 的 填充码</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRoot`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRoot`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRoot`1.Bind(ENode.Domain.IAggregateRoot)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.ApplyEventIDomainEvent">
            <summary>设置 AggregateRoot`1.ApplyEvent(IDomainEvent evnt) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.ConstructorT0">
            <summary>设置 AggregateRoot`1.AggregateRoot`1(!0 id) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.ENodeDomainIAggregateRootGetChanges">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.GetChanges() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.ENodeDomainIAggregateRootIncreaseVersion">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.IncreaseVersion() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.ENodeDomainIAggregateRootResetChanges">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.ResetChanges() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.IdGet">
            <summary>设置 AggregateRoot`1.get_Id() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.IdSetT0">
            <summary>设置 AggregateRoot`1.set_Id(!0 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.UniqueIdENodeDomainIAggregateRootget">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.get_UniqueId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.VersionENodeDomainIAggregateRootget">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.get_Version() 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.ActAsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ENode.Domain.AggregateRoot{`0},``0})">
            <summary>设置 AggregateRoot`1.ActAs() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.ApplyEventIDomainEvent">
            <summary>设置 AggregateRoot`1.ApplyEvent(IDomainEvent evnt) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.ENodeDomainIAggregateRootGetChanges">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.GetChanges() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.ENodeDomainIAggregateRootIncreaseVersion">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.IncreaseVersion() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.ENodeDomainIAggregateRootResetChanges">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.ResetChanges() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.IdGet">
            <summary>设置 AggregateRoot`1.get_Id() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.IdSetT0">
            <summary>设置 AggregateRoot`1.set_Id(!0 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.UniqueIdENodeDomainIAggregateRootget">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.get_UniqueId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRoot`1.AllInstances.VersionENodeDomainIAggregateRootget">
            <summary>设置 AggregateRoot`1.ENode.Domain.IAggregateRoot.get_Version() 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.ShimAggregateRootNotExistException">
            <summary>ENode.Domain.AggregateRootNotExistException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRootNotExistException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRootNotExistException.#ctor(ENode.Domain.AggregateRootNotExistException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRootNotExistException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRootNotExistException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimAggregateRootNotExistException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRootNotExistException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimAggregateRootNotExistException.ConstructorObjectType">
            <summary>设置 AggregateRootNotExistException.AggregateRootNotExistException(Object id, Type type) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.ShimAggregateRootNotExistException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.ShimValueObject`1">
            <summary>ENode.Domain.ValueObject`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimValueObject`1.#ctor(ENode.Domain.ValueObject{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimValueObject`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.ShimValueObject`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.CloneObject">
            <summary>设置 ValueObject`1.Clone(Object objectContainsNewValues) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.CompareEnumerablesIEnumerableIEnumerable">
            <summary>设置 ValueObject`1.CompareEnumerables(IEnumerable enumerable1, IEnumerable enumerable2) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.Constructor">
            <summary>设置 ValueObject`1.ValueObject`1() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.EqualityOpValueObjectOfT0ValueObjectOfT0">
            <summary>设置 ValueObject`1.op_Equality(ValueObject`1&lt;!0&gt; left, ValueObject`1&lt;!0&gt; right) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.EqualsObject">
            <summary>设置 ValueObject`1.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.GetHashCode">
            <summary>设置 ValueObject`1.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.InequalityOpValueObjectOfT0ValueObjectOfT0">
            <summary>设置 ValueObject`1.op_Inequality(ValueObject`1&lt;!0&gt; left, ValueObject`1&lt;!0&gt; right) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.IsEqualValueObjectOfT0ValueObjectOfT0">
            <summary>设置 ValueObject`1.IsEqual(ValueObject`1&lt;!0&gt; left, ValueObject`1&lt;!0&gt; right) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1._GetHashCodeb__4Object">
            <summary>设置 ValueObject`1.&lt;GetHashCode&gt;b__4(Object x) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1._GetHashCodeb__5Int32Int32">
            <summary>设置 ValueObject`1.&lt;GetHashCode&gt;b__5(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.ShimValueObject`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.AllInstances.CloneObject">
            <summary>设置 ValueObject`1.Clone(Object objectContainsNewValues) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.AllInstances.EqualsObject">
            <summary>设置 ValueObject`1.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.ShimValueObject`1.AllInstances.GetHashCode01">
            <summary>设置 ValueObject`1.GetHashCode() 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubAggregateRoot`1">
            <summary>ENode.Domain.AggregateRoot`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRoot`1.#ctor(`0)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRoot`1.InitializeStub">
            <summary>初始化 type StubAggregateRoot 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRoot`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRoot`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRoot`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubAggregateRootNotExistException">
            <summary>ENode.Domain.AggregateRootNotExistException 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRootNotExistException.#ctor(System.Object,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRootNotExistException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubAggregateRootNotExistException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRootNotExistException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubAggregateRootNotExistException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRootNotExistException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRootNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRootNotExistException.InitializeStub">
            <summary>初始化 type StubAggregateRootNotExistException 的新实例</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubAggregateRootNotExistException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubAggregateRootNotExistException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRootNotExistException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRootNotExistException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRootNotExistException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRootNotExistException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRootNotExistException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRootNotExistException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRootNotExistException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubAggregateRootNotExistException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubIAggregateRoot">
            <summary>ENode.Domain.IAggregateRoot 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateRoot.#ctor">
            <summary>初始化 type StubIAggregateRoot 的新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateRoot.en::ENode#Domain#IAggregateRoot#GetChanges">
            <summary>设置 IAggregateRoot.GetChanges() 的 存根</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateRoot.en::ENode#Domain#IAggregateRoot#IncreaseVersion">
            <summary>设置 IAggregateRoot.IncreaseVersion() 的 存根</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateRoot.en::ENode#Domain#IAggregateRoot#ResetChanges">
            <summary>设置 IAggregateRoot.ResetChanges() 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIAggregateRoot.GetChanges">
            <summary>设置 IAggregateRoot.GetChanges() 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIAggregateRoot.IncreaseVersion">
            <summary>设置 IAggregateRoot.IncreaseVersion() 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIAggregateRoot.ResetChanges">
            <summary>设置 IAggregateRoot.ResetChanges() 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIAggregateRoot.UniqueIdGet">
            <summary>设置 IAggregateRoot.get_UniqueId() 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIAggregateRoot.VersionGet">
            <summary>设置 IAggregateRoot.get_Version() 的 stub</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubIAggregateRoot.en::ENode#Domain#IAggregateRoot#UniqueId">
            <summary>设置 IAggregateRoot.get_UniqueId() 的 stub</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubIAggregateRoot.en::ENode#Domain#IAggregateRoot#Version">
            <summary>设置 IAggregateRoot.get_Version() 的 stub</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubIAggregateRootFactory">
            <summary>ENode.Domain.IAggregateRootFactory 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateRootFactory.#ctor">
            <summary>初始化 type StubIAggregateRootFactory 的新实例</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIAggregateRootFactory.CreateAggregateRootType">
            <summary>设置 IAggregateRootFactory.CreateAggregateRoot(Type aggregateRootType) 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateRootFactory.en::ENode#Domain#IAggregateRootFactory#CreateAggregateRoot(System.Type)">
            <summary>设置 IAggregateRootFactory.CreateAggregateRoot(Type aggregateRootType) 的 存根</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubIAggregateRootInternalHandlerProvider">
            <summary>ENode.Domain.IAggregateRootInternalHandlerProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateRootInternalHandlerProvider.#ctor">
            <summary>初始化 type StubIAggregateRootInternalHandlerProvider 的新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateRootInternalHandlerProvider.en::ENode#Domain#IAggregateRootInternalHandlerProvider#GetInternalEventHandler(System.Type,System.Type)">
            <summary>设置 IAggregateRootInternalHandlerProvider.GetInternalEventHandler(Type aggregateRootType, Type eventType) 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIAggregateRootInternalHandlerProvider.GetInternalEventHandlerTypeType">
            <summary>设置 IAggregateRootInternalHandlerProvider.GetInternalEventHandler(Type aggregateRootType, Type eventType) 的 stub</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubIAggregateStorage">
            <summary>ENode.Domain.IAggregateStorage 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateStorage.#ctor">
            <summary>初始化 type StubIAggregateStorage 的新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIAggregateStorage.en::ENode#Domain#IAggregateStorage#Get(System.Type,System.String)">
            <summary>设置 IAggregateStorage.Get(Type aggregateRootType, String aggregateRootId) 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIAggregateStorage.GetTypeString">
            <summary>设置 IAggregateStorage.Get(Type aggregateRootType, String aggregateRootId) 的 stub</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubIEventSourcingService">
            <summary>ENode.Domain.IEventSourcingService 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIEventSourcingService.#ctor">
            <summary>初始化 type StubIEventSourcingService 的新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIEventSourcingService.en::ENode#Domain#IEventSourcingService#ReplayEvents(ENode.Domain.IAggregateRoot,ENode.Eventing.DomainEventStream)">
            <summary>设置 IEventSourcingService.ReplayEvents(IAggregateRoot aggregateRoot, DomainEventStream eventStream) 的 存根</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIEventSourcingService.en::ENode#Domain#IEventSourcingService#ReplayEvents(ENode.Domain.IAggregateRoot,System.Collections.Generic.IEnumerable{ENode.Eventing.DomainEventStream})">
            <summary>设置 IEventSourcingService.ReplayEvents(IAggregateRoot aggregateRoot, IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIEventSourcingService.ReplayEventsIAggregateRootDomainEventStream">
            <summary>设置 IEventSourcingService.ReplayEvents(IAggregateRoot aggregateRoot, DomainEventStream eventStream) 的 stub</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIEventSourcingService.ReplayEventsIAggregateRootIEnumerableOfDomainEventStream">
            <summary>设置 IEventSourcingService.ReplayEvents(IAggregateRoot aggregateRoot, IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 stub</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubIMemoryCache">
            <summary>ENode.Domain.IMemoryCache 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIMemoryCache.#ctor">
            <summary>初始化 type StubIMemoryCache 的新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIMemoryCache.en::ENode#Domain#IMemoryCache#Get(System.Object,System.Type)">
            <summary>设置 IMemoryCache.Get(Object aggregateRootId, Type aggregateRootType) 的 存根</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIMemoryCache.en::ENode#Domain#IMemoryCache#Get``1(System.Object)">
            <summary>设置 IMemoryCache.Get(Object aggregateRootId) 的 存根</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIMemoryCache.en::ENode#Domain#IMemoryCache#Set(ENode.Domain.IAggregateRoot)">
            <summary>设置 IMemoryCache.Set(IAggregateRoot aggregateRoot) 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIMemoryCache.GetObjectType">
            <summary>设置 IMemoryCache.Get(Object aggregateRootId, Type aggregateRootType) 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIMemoryCache.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 Get(Object aggregateRootId) 的存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIMemoryCache.SetIAggregateRoot">
            <summary>设置 IMemoryCache.Set(IAggregateRoot aggregateRoot) 的 stub</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubIRepository">
            <summary>ENode.Domain.IRepository 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIRepository.#ctor">
            <summary>初始化 type StubIRepository 的新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIRepository.en::ENode#Domain#IRepository#Get(System.Type,System.Object)">
            <summary>设置 IRepository.Get(Type aggregateRootType, Object aggregateRootId) 的 存根</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIRepository.en::ENode#Domain#IRepository#Get``1(System.Object)">
            <summary>设置 IRepository.Get(Object aggregateRootId) 的 存根</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubIRepository.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 Get(Object aggregateRootId) 的存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubIRepository.GetTypeObject">
            <summary>设置 IRepository.Get(Type aggregateRootType, Object aggregateRootId) 的 stub</summary>
        </member>
        <member name="T:ENode.Domain.Fakes.StubValueObject`1">
            <summary>ENode.Domain.ValueObject`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubValueObject`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubValueObject`1.Equals(System.Object)">
            <summary>设置 ValueObject`1.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubValueObject`1.EqualsObject">
            <summary>设置 ValueObject`1.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubValueObject`1.GetAtomicValues">
            <summary>设置 ValueObject`1.GetAtomicValues() 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubValueObject`1.GetAtomicValues01">
            <summary>设置 ValueObject`1.GetAtomicValues() 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubValueObject`1.GetHashCode">
            <summary>设置 ValueObject`1.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ENode.Domain.Fakes.StubValueObject`1.GetHashCode01">
            <summary>设置 ValueObject`1.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ENode.Domain.Fakes.StubValueObject`1.InitializeStub">
            <summary>初始化 type StubValueObject 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubValueObject`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubValueObject`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Fakes.StubValueObject`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory">
            <summary>ENode.Domain.Impl.DefaultAggregateRootFactory 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.#ctor(ENode.Domain.Impl.DefaultAggregateRootFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.Bind(ENode.Domain.IAggregateRootFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.Constructor">
            <summary>设置 DefaultAggregateRootFactory.DefaultAggregateRootFactory() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.CreateAggregateRootType">
            <summary>设置 DefaultAggregateRootFactory.CreateAggregateRoot(Type aggregateRootType) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootFactory.AllInstances.CreateAggregateRootType">
            <summary>设置 DefaultAggregateRootFactory.CreateAggregateRoot(Type aggregateRootType) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider">
            <summary>ENode.Domain.Impl.DefaultAggregateRootInternalHandlerProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.#ctor(ENode.Domain.Impl.DefaultAggregateRootInternalHandlerProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.Bind(ENode.Domain.IAggregateRootInternalHandlerProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.Bind(ENode.Infrastructure.IAssemblyInitializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.Constructor">
            <summary>设置 DefaultAggregateRootInternalHandlerProvider.DefaultAggregateRootInternalHandlerProvider() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.GetInternalEventHandlerTypeType">
            <summary>设置 DefaultAggregateRootInternalHandlerProvider.GetInternalEventHandler(Type aggregateRootType, Type eventType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.InitializeAssemblyArray">
            <summary>设置 DefaultAggregateRootInternalHandlerProvider.Initialize(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.RegisterInternalHandlerTypeTypeMethodInfo">
            <summary>设置 DefaultAggregateRootInternalHandlerProvider.RegisterInternalHandler(Type aggregateRootType, Type eventType, MethodInfo eventHandler) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.AllInstances.GetInternalEventHandlerTypeType">
            <summary>设置 DefaultAggregateRootInternalHandlerProvider.GetInternalEventHandler(Type aggregateRootType, Type eventType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.AllInstances.InitializeAssemblyArray">
            <summary>设置 DefaultAggregateRootInternalHandlerProvider.Initialize(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultAggregateRootInternalHandlerProvider.AllInstances.RegisterInternalHandlerTypeTypeMethodInfo">
            <summary>设置 DefaultAggregateRootInternalHandlerProvider.RegisterInternalHandler(Type aggregateRootType, Type eventType, MethodInfo eventHandler) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService">
            <summary>ENode.Domain.Impl.DefaultEventSourcingService 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.#ctor(ENode.Domain.Impl.DefaultEventSourcingService)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.Bind(ENode.Domain.IEventSourcingService)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.ConstructorIAggregateRootInternalHandlerProvider">
            <summary>设置 DefaultEventSourcingService.DefaultEventSourcingService(IAggregateRootInternalHandlerProvider eventHandlerProvider) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.HandleEventIAggregateRootIDomainEvent">
            <summary>设置 DefaultEventSourcingService.HandleEvent(IAggregateRoot aggregateRoot, IDomainEvent evnt) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.ReplayEventsIAggregateRootDomainEventStream">
            <summary>设置 DefaultEventSourcingService.ReplayEvents(IAggregateRoot aggregateRoot, DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.ReplayEventsIAggregateRootIEnumerableOfDomainEventStream">
            <summary>设置 DefaultEventSourcingService.ReplayEvents(IAggregateRoot aggregateRoot, IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.VerifyEventIAggregateRootDomainEventStream">
            <summary>设置 DefaultEventSourcingService.VerifyEvent(IAggregateRoot aggregateRoot, DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.AllInstances.HandleEventIAggregateRootIDomainEvent">
            <summary>设置 DefaultEventSourcingService.HandleEvent(IAggregateRoot aggregateRoot, IDomainEvent evnt) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.AllInstances.ReplayEventsIAggregateRootDomainEventStream">
            <summary>设置 DefaultEventSourcingService.ReplayEvents(IAggregateRoot aggregateRoot, DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.AllInstances.ReplayEventsIAggregateRootIEnumerableOfDomainEventStream">
            <summary>设置 DefaultEventSourcingService.ReplayEvents(IAggregateRoot aggregateRoot, IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultEventSourcingService.AllInstances.VerifyEventIAggregateRootDomainEventStream">
            <summary>设置 DefaultEventSourcingService.VerifyEvent(IAggregateRoot aggregateRoot, DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache">
            <summary>ENode.Domain.Impl.DefaultMemoryCache 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.#ctor(ENode.Domain.Impl.DefaultMemoryCache)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.Bind(ENode.Domain.IMemoryCache)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 DefaultMemoryCache.Get(Object aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.Constructor">
            <summary>设置 DefaultMemoryCache.DefaultMemoryCache() 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.GetObjectType">
            <summary>设置 DefaultMemoryCache.Get(Object aggregateRootId, Type aggregateRootType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.SetIAggregateRoot">
            <summary>设置 DefaultMemoryCache.Set(IAggregateRoot aggregateRoot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.AllInstances.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ENode.Domain.Impl.DefaultMemoryCache,System.Object,``0})">
            <summary>设置 DefaultMemoryCache.Get(Object aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.AllInstances.GetObjectType">
            <summary>设置 DefaultMemoryCache.Get(Object aggregateRootId, Type aggregateRootType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimDefaultMemoryCache.AllInstances.SetIAggregateRoot">
            <summary>设置 DefaultMemoryCache.Set(IAggregateRoot aggregateRoot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage">
            <summary>ENode.Domain.Impl.EventSourcingAggregateStorage 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.#ctor(ENode.Domain.Impl.EventSourcingAggregateStorage)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.Bind(ENode.Domain.IAggregateStorage)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.ConstructorIAggregateRootFactoryIEventSourcingServiceIEventStoreISnapshotStoreISnapshotterITypeCodeProviderOfIAggregateRoot">
            <summary>设置 EventSourcingAggregateStorage.EventSourcingAggregateStorage(IAggregateRootFactory aggregateRootFactory, IEventSourcingService eventSourcingService, IEventStore eventStore, ISnapshotStore snapshotStore, ISnapshotter snapshotter, ITypeCodeProvider`1&lt;IAggregateRoot&gt; aggregateRootTypeCodeProvider) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.GetTypeString">
            <summary>设置 EventSourcingAggregateStorage.Get(Type aggregateRootType, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.RebuildAggregateRootTypeIEnumerableOfDomainEventStream">
            <summary>设置 EventSourcingAggregateStorage.RebuildAggregateRoot(Type aggregateRootType, IEnumerable`1&lt;DomainEventStream&gt; streams) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.TryGetFromSnapshotStringTypeIAggregateRootOut">
            <summary>设置 EventSourcingAggregateStorage.TryGetFromSnapshot(String aggregateRootId, Type aggregateRootType, IAggregateRoot&amp; aggregateRoot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.AllInstances.GetTypeString">
            <summary>设置 EventSourcingAggregateStorage.Get(Type aggregateRootType, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.AllInstances.RebuildAggregateRootTypeIEnumerableOfDomainEventStream">
            <summary>设置 EventSourcingAggregateStorage.RebuildAggregateRoot(Type aggregateRootType, IEnumerable`1&lt;DomainEventStream&gt; streams) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingAggregateStorage.AllInstances.TryGetFromSnapshotStringTypeIAggregateRootOut">
            <summary>设置 EventSourcingAggregateStorage.TryGetFromSnapshot(String aggregateRootId, Type aggregateRootType, IAggregateRoot&amp; aggregateRoot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository">
            <summary>ENode.Domain.Impl.EventSourcingRepository 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.#ctor(ENode.Domain.Impl.EventSourcingRepository)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.Bind(ENode.Domain.IRepository)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 EventSourcingRepository.Get(Object aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.ConstructorIMemoryCacheIAggregateStorage">
            <summary>设置 EventSourcingRepository.EventSourcingRepository(IMemoryCache memoryCache, IAggregateStorage aggregateRootStorage) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.GetTypeObject">
            <summary>设置 EventSourcingRepository.Get(Type aggregateRootType, Object aggregateRootId) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.AllInstances.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ENode.Domain.Impl.EventSourcingRepository,System.Object,``0})">
            <summary>设置 EventSourcingRepository.Get(Object aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimEventSourcingRepository.AllInstances.GetTypeObject">
            <summary>设置 EventSourcingRepository.Get(Type aggregateRootType, Object aggregateRootId) 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider">
            <summary>ENode.Domain.Impl.NotImplementedAggregateRootTypeCodeProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider.#ctor(ENode.Domain.Impl.NotImplementedAggregateRootTypeCodeProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider.Bind(ENode.Infrastructure.ITypeCodeProvider{ENode.Domain.IAggregateRoot})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider.Constructor">
            <summary>设置 NotImplementedAggregateRootTypeCodeProvider.NotImplementedAggregateRootTypeCodeProvider() 的 填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.ShimNotImplementedAggregateRootTypeCodeProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootFactory">
            <summary>ENode.Domain.Impl.DefaultAggregateRootFactory 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootFactory.InitializeStub">
            <summary>初始化 type StubDefaultAggregateRootFactory 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootInternalHandlerProvider">
            <summary>ENode.Domain.Impl.DefaultAggregateRootInternalHandlerProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootInternalHandlerProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootInternalHandlerProvider.InitializeStub">
            <summary>初始化 type StubDefaultAggregateRootInternalHandlerProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootInternalHandlerProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootInternalHandlerProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultAggregateRootInternalHandlerProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.StubDefaultEventSourcingService">
            <summary>ENode.Domain.Impl.DefaultEventSourcingService 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubDefaultEventSourcingService.#ctor(ENode.Domain.IAggregateRootInternalHandlerProvider)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubDefaultEventSourcingService.InitializeStub">
            <summary>初始化 type StubDefaultEventSourcingService 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultEventSourcingService.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultEventSourcingService.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultEventSourcingService.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.StubDefaultMemoryCache">
            <summary>ENode.Domain.Impl.DefaultMemoryCache 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubDefaultMemoryCache.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubDefaultMemoryCache.InitializeStub">
            <summary>初始化 type StubDefaultMemoryCache 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultMemoryCache.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultMemoryCache.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubDefaultMemoryCache.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.StubEventSourcingAggregateStorage">
            <summary>ENode.Domain.Impl.EventSourcingAggregateStorage 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubEventSourcingAggregateStorage.#ctor(ENode.Domain.IAggregateRootFactory,ENode.Domain.IEventSourcingService,ENode.Eventing.IEventStore,ENode.Snapshoting.ISnapshotStore,ENode.Snapshoting.ISnapshotter,ENode.Infrastructure.ITypeCodeProvider{ENode.Domain.IAggregateRoot})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubEventSourcingAggregateStorage.InitializeStub">
            <summary>初始化 type StubEventSourcingAggregateStorage 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubEventSourcingAggregateStorage.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubEventSourcingAggregateStorage.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubEventSourcingAggregateStorage.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.StubEventSourcingRepository">
            <summary>ENode.Domain.Impl.EventSourcingRepository 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubEventSourcingRepository.#ctor(ENode.Domain.IMemoryCache,ENode.Domain.IAggregateStorage)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubEventSourcingRepository.InitializeStub">
            <summary>初始化 type StubEventSourcingRepository 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubEventSourcingRepository.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubEventSourcingRepository.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubEventSourcingRepository.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Domain.Impl.Fakes.StubNotImplementedAggregateRootTypeCodeProvider">
            <summary>ENode.Domain.Impl.NotImplementedAggregateRootTypeCodeProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubNotImplementedAggregateRootTypeCodeProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Domain.Impl.Fakes.StubNotImplementedAggregateRootTypeCodeProvider.InitializeStub">
            <summary>初始化 type StubNotImplementedAggregateRootTypeCodeProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubNotImplementedAggregateRootTypeCodeProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubNotImplementedAggregateRootTypeCodeProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Domain.Impl.Fakes.StubNotImplementedAggregateRootTypeCodeProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimDomainEvent`1">
            <summary>ENode.Eventing.DomainEvent`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEvent`1.#ctor(ENode.Eventing.DomainEvent{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEvent`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEvent`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEvent`1.Bind(ENode.Eventing.IDomainEvent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEvent`1.Bind(ENode.Eventing.IEvent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AggregateRootIdENodeEventingIDomainEventget">
            <summary>设置 DomainEvent`1.ENode.Eventing.IDomainEvent.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AggregateRootIdGet">
            <summary>设置 DomainEvent`1.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AggregateRootIdSetT0">
            <summary>设置 DomainEvent`1.set_AggregateRootId(!0 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.ConstructorT0">
            <summary>设置 DomainEvent`1.DomainEvent`1(!0 aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.VersionENodeEventingIDomainEventget">
            <summary>设置 DomainEvent`1.ENode.Eventing.IDomainEvent.get_Version() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.VersionENodeEventingIDomainEventsetInt32">
            <summary>设置 DomainEvent`1.ENode.Eventing.IDomainEvent.set_Version(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.VersionGet">
            <summary>设置 DomainEvent`1.get_Version() 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimDomainEvent`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AllInstances.AggregateRootIdENodeEventingIDomainEventget">
            <summary>设置 DomainEvent`1.ENode.Eventing.IDomainEvent.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AllInstances.AggregateRootIdGet">
            <summary>设置 DomainEvent`1.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AllInstances.AggregateRootIdSetT0">
            <summary>设置 DomainEvent`1.set_AggregateRootId(!0 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AllInstances.VersionENodeEventingIDomainEventget">
            <summary>设置 DomainEvent`1.ENode.Eventing.IDomainEvent.get_Version() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AllInstances.VersionENodeEventingIDomainEventsetInt32">
            <summary>设置 DomainEvent`1.ENode.Eventing.IDomainEvent.set_Version(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEvent`1.AllInstances.VersionGet">
            <summary>设置 DomainEvent`1.get_Version() 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimDomainEventStream">
            <summary>ENode.Eventing.DomainEventStream 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEventStream.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEventStream.#ctor(ENode.Eventing.DomainEventStream)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEventStream.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEventStream.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEventStream.Bind(ENode.Eventing.IDomainEventStream)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimDomainEventStream.Bind(ENode.Eventing.IEventStream)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AggregateRootIdGet">
            <summary>设置 DomainEventStream.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AggregateRootIdSetString">
            <summary>设置 DomainEventStream.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AggregateRootTypeCodeGet">
            <summary>设置 DomainEventStream.get_AggregateRootTypeCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AggregateRootTypeCodeSetInt32">
            <summary>设置 DomainEventStream.set_AggregateRootTypeCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.ConstructorStringStringInt32StringInt32DateTimeIEnumerableOfIDomainEventIDictionaryOfStringString">
            <summary>设置 DomainEventStream.DomainEventStream(String commandId, String aggregateRootId, Int32 aggregateRootTypeCode, String processId, Int32 version, DateTime timestamp, IEnumerable`1&lt;IDomainEvent&gt; events, IDictionary`2&lt;String,String&gt; items) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.DomainEventsGet">
            <summary>设置 DomainEventStream.get_DomainEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.DomainEventsSetIEnumerableOfIDomainEvent">
            <summary>设置 DomainEventStream.set_DomainEvents(IEnumerable`1&lt;IDomainEvent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.InitEvents">
            <summary>设置 DomainEventStream.InitEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.TimestampGet">
            <summary>设置 DomainEventStream.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.TimestampSetDateTime">
            <summary>设置 DomainEventStream.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.ToString">
            <summary>设置 DomainEventStream.ToString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.VersionGet">
            <summary>设置 DomainEventStream.get_Version() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.VersionSetInt32">
            <summary>设置 DomainEventStream.set_Version(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream._ToStringb__0IDomainEvent">
            <summary>设置 DomainEventStream.&lt;ToString&gt;b__0(IDomainEvent x) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream._ToStringb__1KeyValuePairOfStringString">
            <summary>设置 DomainEventStream.&lt;ToString&gt;b__1(KeyValuePair`2&lt;String,String&gt; x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.AggregateRootIdGet">
            <summary>设置 DomainEventStream.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.AggregateRootIdSetString">
            <summary>设置 DomainEventStream.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.AggregateRootTypeCodeGet">
            <summary>设置 DomainEventStream.get_AggregateRootTypeCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.AggregateRootTypeCodeSetInt32">
            <summary>设置 DomainEventStream.set_AggregateRootTypeCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.DomainEventsGet">
            <summary>设置 DomainEventStream.get_DomainEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.DomainEventsSetIEnumerableOfIDomainEvent">
            <summary>设置 DomainEventStream.set_DomainEvents(IEnumerable`1&lt;IDomainEvent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.InitEvents">
            <summary>设置 DomainEventStream.InitEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.TimestampGet">
            <summary>设置 DomainEventStream.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.TimestampSetDateTime">
            <summary>设置 DomainEventStream.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.ToString01">
            <summary>设置 DomainEventStream.ToString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.VersionGet">
            <summary>设置 DomainEventStream.get_Version() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimDomainEventStream.AllInstances.VersionSetInt32">
            <summary>设置 DomainEventStream.set_Version(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimEvent">
            <summary>ENode.Eventing.Event 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEvent.#ctor(ENode.Eventing.Event)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEvent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEvent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEvent.Bind(ENode.Eventing.IEvent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.Constructor">
            <summary>设置 Event.Event() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.IdGet">
            <summary>设置 Event.get_Id() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.IdSetString">
            <summary>设置 Event.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.TimestampENodeEventingIEventget">
            <summary>设置 Event.ENode.Eventing.IEvent.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.TimestampENodeEventingIEventsetDateTime">
            <summary>设置 Event.ENode.Eventing.IEvent.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.TimestampGet">
            <summary>设置 Event.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.TimestampSetDateTime">
            <summary>设置 Event.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimEvent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.AllInstances.IdGet">
            <summary>设置 Event.get_Id() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.AllInstances.IdSetString">
            <summary>设置 Event.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.AllInstances.TimestampENodeEventingIEventget">
            <summary>设置 Event.ENode.Eventing.IEvent.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.AllInstances.TimestampENodeEventingIEventsetDateTime">
            <summary>设置 Event.ENode.Eventing.IEvent.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.AllInstances.TimestampGet">
            <summary>设置 Event.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEvent.AllInstances.TimestampSetDateTime">
            <summary>设置 Event.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimEventCommittingContext">
            <summary>ENode.Eventing.EventCommittingContext 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventCommittingContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventCommittingContext.#ctor(ENode.Eventing.EventCommittingContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventCommittingContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventCommittingContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AggregateRootGet">
            <summary>设置 EventCommittingContext.get_AggregateRoot() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AggregateRootSetIAggregateRoot">
            <summary>设置 EventCommittingContext.set_AggregateRoot(IAggregateRoot value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.ConstructorIAggregateRootDomainEventStreamProcessingCommand">
            <summary>设置 EventCommittingContext.EventCommittingContext(IAggregateRoot aggregateRoot, DomainEventStream eventStream, ProcessingCommand processingCommand) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.EventAppendResultGet">
            <summary>设置 EventCommittingContext.get_EventAppendResult() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.EventAppendResultSetEventAppendResult">
            <summary>设置 EventCommittingContext.set_EventAppendResult(EventAppendResult value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.EventStreamGet">
            <summary>设置 EventCommittingContext.get_EventStream() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.EventStreamSetDomainEventStream">
            <summary>设置 EventCommittingContext.set_EventStream(DomainEventStream value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.ProcessingCommandGet">
            <summary>设置 EventCommittingContext.get_ProcessingCommand() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.ProcessingCommandSetProcessingCommand">
            <summary>设置 EventCommittingContext.set_ProcessingCommand(ProcessingCommand value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances.AggregateRootGet">
            <summary>设置 EventCommittingContext.get_AggregateRoot() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances.AggregateRootSetIAggregateRoot">
            <summary>设置 EventCommittingContext.set_AggregateRoot(IAggregateRoot value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances.EventAppendResultGet">
            <summary>设置 EventCommittingContext.get_EventAppendResult() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances.EventAppendResultSetEventAppendResult">
            <summary>设置 EventCommittingContext.set_EventAppendResult(EventAppendResult value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances.EventStreamGet">
            <summary>设置 EventCommittingContext.get_EventStream() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances.EventStreamSetDomainEventStream">
            <summary>设置 EventCommittingContext.set_EventStream(DomainEventStream value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances.ProcessingCommandGet">
            <summary>设置 EventCommittingContext.get_ProcessingCommand() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventCommittingContext.AllInstances.ProcessingCommandSetProcessingCommand">
            <summary>设置 EventCommittingContext.set_ProcessingCommand(ProcessingCommand value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimEventStream">
            <summary>ENode.Eventing.EventStream 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventStream.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventStream.#ctor(ENode.Eventing.EventStream)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventStream.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventStream.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimEventStream.Bind(ENode.Eventing.IEventStream)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.CommandIdGet">
            <summary>设置 EventStream.get_CommandId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.CommandIdSetString">
            <summary>设置 EventStream.set_CommandId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.ConstructorStringStringIEnumerableOfIEventIDictionaryOfStringString">
            <summary>设置 EventStream.EventStream(String commandId, String processId, IEnumerable`1&lt;IEvent&gt; events, IDictionary`2&lt;String,String&gt; items) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.EventsGet">
            <summary>设置 EventStream.get_Events() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.EventsSetIEnumerableOfIEvent">
            <summary>设置 EventStream.set_Events(IEnumerable`1&lt;IEvent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.ItemsGet">
            <summary>设置 EventStream.get_Items() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.ItemsSetIDictionaryOfStringString">
            <summary>设置 EventStream.set_Items(IDictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.ProcessIdGet">
            <summary>设置 EventStream.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.ProcessIdSetString">
            <summary>设置 EventStream.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.ToString">
            <summary>设置 EventStream.ToString() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream._ToStringb__0IEvent">
            <summary>设置 EventStream.&lt;ToString&gt;b__0(IEvent x) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream._ToStringb__1KeyValuePairOfStringString">
            <summary>设置 EventStream.&lt;ToString&gt;b__1(KeyValuePair`2&lt;String,String&gt; x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimEventStream.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.CommandIdGet">
            <summary>设置 EventStream.get_CommandId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.CommandIdSetString">
            <summary>设置 EventStream.set_CommandId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.EventsGet">
            <summary>设置 EventStream.get_Events() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.EventsSetIEnumerableOfIEvent">
            <summary>设置 EventStream.set_Events(IEnumerable`1&lt;IEvent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.ItemsGet">
            <summary>设置 EventStream.get_Items() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.ItemsSetIDictionaryOfStringString">
            <summary>设置 EventStream.set_Items(IDictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.ProcessIdGet">
            <summary>设置 EventStream.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.ProcessIdSetString">
            <summary>设置 EventStream.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimEventStream.AllInstances.ToString01">
            <summary>设置 EventStream.ToString() 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1">
            <summary>ENode.Eventing.ProcessCompletedEvent`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.#ctor(ENode.Eventing.ProcessCompletedEvent{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.Bind(ENode.Eventing.IDomainEvent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.Bind(ENode.Eventing.IEvent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.Bind(ENode.Eventing.IProcessCompletedEvent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.ConstructorT0">
            <summary>设置 ProcessCompletedEvent`1.ProcessCompletedEvent`1(!0 aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.ErrorCodeGet">
            <summary>设置 ProcessCompletedEvent`1.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.ErrorCodeSetInt32">
            <summary>设置 ProcessCompletedEvent`1.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.IsSuccessGet">
            <summary>设置 ProcessCompletedEvent`1.get_IsSuccess() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.IsSuccessSetBoolean">
            <summary>设置 ProcessCompletedEvent`1.set_IsSuccess(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.AllInstances.ErrorCodeGet">
            <summary>设置 ProcessCompletedEvent`1.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.AllInstances.ErrorCodeSetInt32">
            <summary>设置 ProcessCompletedEvent`1.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.AllInstances.IsSuccessGet">
            <summary>设置 ProcessCompletedEvent`1.get_IsSuccess() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.ShimProcessCompletedEvent`1.AllInstances.IsSuccessSetBoolean">
            <summary>设置 ProcessCompletedEvent`1.set_IsSuccess(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubDomainEvent`1">
            <summary>ENode.Eventing.DomainEvent`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubDomainEvent`1.#ctor(`0)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubDomainEvent`1.InitializeStub">
            <summary>初始化 type StubDomainEvent 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubDomainEvent`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubDomainEvent`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubDomainEvent`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubDomainEventStream">
            <summary>ENode.Eventing.DomainEventStream 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubDomainEventStream.#ctor(System.String,System.String,System.Int32,System.String,System.Int32,System.DateTime,System.Collections.Generic.IEnumerable{ENode.Eventing.IDomainEvent},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubDomainEventStream.InitializeStub">
            <summary>初始化 type StubDomainEventStream 的新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubDomainEventStream.ToString">
            <summary>设置 DomainEventStream.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubDomainEventStream.ToString01">
            <summary>设置 DomainEventStream.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubDomainEventStream.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubDomainEventStream.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubDomainEventStream.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubEvent">
            <summary>ENode.Eventing.Event 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubEvent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubEvent.InitializeStub">
            <summary>初始化 type StubEvent 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEvent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEvent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEvent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubEventCommittingContext">
            <summary>ENode.Eventing.EventCommittingContext 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubEventCommittingContext.#ctor(ENode.Domain.IAggregateRoot,ENode.Eventing.DomainEventStream,ENode.Commanding.ProcessingCommand)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubEventCommittingContext.InitializeStub">
            <summary>初始化 type StubEventCommittingContext 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEventCommittingContext.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEventCommittingContext.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEventCommittingContext.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubEventStream">
            <summary>ENode.Eventing.EventStream 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubEventStream.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{ENode.Eventing.IEvent},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubEventStream.InitializeStub">
            <summary>初始化 type StubEventStream 的新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubEventStream.ToString">
            <summary>设置 EventStream.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubEventStream.ToString01">
            <summary>设置 EventStream.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEventStream.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEventStream.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubEventStream.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIDomainEvent">
            <summary>ENode.Eventing.IDomainEvent 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIDomainEvent.#ctor">
            <summary>初始化 type StubIDomainEvent 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEvent.AggregateRootIdGet">
            <summary>设置 IDomainEvent.get_AggregateRootId() 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIDomainEvent.AttachBackingFieldToTimestamp">
            <summary>附加委托以将 StubIDomainEvent.Timestamp 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIDomainEvent.AttachBackingFieldToVersion">
            <summary>附加委托以将 StubIDomainEvent.Version 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEvent.IdGet">
            <summary>设置 IEvent.get_Id() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEvent.TimestampGet">
            <summary>设置 IEvent.get_Timestamp() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEvent.TimestampSetDateTime">
            <summary>设置 IEvent.set_Timestamp(DateTime value) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEvent.VersionGet">
            <summary>设置 IDomainEvent.get_Version() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEvent.VersionSetInt32">
            <summary>设置 IDomainEvent.set_Version(Int32 value) 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEvent.en::ENode#Eventing#IDomainEvent#AggregateRootId">
            <summary>设置 IDomainEvent.get_AggregateRootId() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEvent.en::ENode#Eventing#IEvent#Id">
            <summary>设置 IEvent.get_Id() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEvent.en::ENode#Eventing#IEvent#Timestamp">
            <summary>设置 IEvent.get_Timestamp() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEvent.en::ENode#Eventing#IDomainEvent#Version">
            <summary>设置 IDomainEvent.get_Version() 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIDomainEventStream">
            <summary>ENode.Eventing.IDomainEventStream 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIDomainEventStream.#ctor">
            <summary>初始化 type StubIDomainEventStream 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.AggregateRootIdGet">
            <summary>设置 IDomainEventStream.get_AggregateRootId() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.AggregateRootTypeCodeGet">
            <summary>设置 IDomainEventStream.get_AggregateRootTypeCode() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.CommandIdGet">
            <summary>设置 IEventStream.get_CommandId() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.DomainEventsGet">
            <summary>设置 IDomainEventStream.get_DomainEvents() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.EventsGet">
            <summary>设置 IEventStream.get_Events() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.ItemsGet">
            <summary>设置 IEventStream.get_Items() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.ProcessIdGet">
            <summary>设置 IEventStream.get_ProcessId() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.TimestampGet">
            <summary>设置 IDomainEventStream.get_Timestamp() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIDomainEventStream.VersionGet">
            <summary>设置 IDomainEventStream.get_Version() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IDomainEventStream#AggregateRootId">
            <summary>设置 IDomainEventStream.get_AggregateRootId() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IDomainEventStream#AggregateRootTypeCode">
            <summary>设置 IDomainEventStream.get_AggregateRootTypeCode() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IEventStream#CommandId">
            <summary>设置 IEventStream.get_CommandId() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IDomainEventStream#DomainEvents">
            <summary>设置 IDomainEventStream.get_DomainEvents() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IEventStream#Events">
            <summary>设置 IEventStream.get_Events() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IEventStream#Items">
            <summary>设置 IEventStream.get_Items() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IEventStream#ProcessId">
            <summary>设置 IEventStream.get_ProcessId() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IDomainEventStream#Timestamp">
            <summary>设置 IDomainEventStream.get_Timestamp() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIDomainEventStream.en::ENode#Eventing#IDomainEventStream#Version">
            <summary>设置 IDomainEventStream.get_Version() 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEvent">
            <summary>ENode.Eventing.IEvent 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEvent.#ctor">
            <summary>初始化 type StubIEvent 的新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEvent.AttachBackingFieldToTimestamp">
            <summary>附加委托以将 StubIEvent.Timestamp 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEvent.IdGet">
            <summary>设置 IEvent.get_Id() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEvent.TimestampGet">
            <summary>设置 IEvent.get_Timestamp() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEvent.TimestampSetDateTime">
            <summary>设置 IEvent.set_Timestamp(DateTime value) 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIEvent.en::ENode#Eventing#IEvent#Id">
            <summary>设置 IEvent.get_Id() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIEvent.en::ENode#Eventing#IEvent#Timestamp">
            <summary>设置 IEvent.get_Timestamp() 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventContext">
            <summary>ENode.Eventing.IEventContext 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventContext.#ctor">
            <summary>初始化 type StubIEventContext 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventContext.AddCommandICommand">
            <summary>设置 IEventContext.AddCommand(ICommand command) 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventContext.en::ENode#Eventing#IEventContext#AddCommand(ENode.Commanding.ICommand)">
            <summary>设置 IEventContext.AddCommand(ICommand command) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventContext.en::ENode#Eventing#IEventContext#Get``1(System.Object)">
            <summary>设置 IEventContext.Get(Object aggregateRootId) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventContext.en::ENode#Eventing#IEventContext#GetCommands">
            <summary>设置 IEventContext.GetCommands() 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventContext.GetCommands">
            <summary>设置 IEventContext.GetCommands() 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventContext.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 Get(Object aggregateRootId) 的存根</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventHandleInfoCache">
            <summary>ENode.Eventing.IEventHandleInfoCache 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandleInfoCache.#ctor">
            <summary>初始化 type StubIEventHandleInfoCache 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventHandleInfoCache.AddEventHandleInfoStringInt32Int32StringInt32">
            <summary>设置 IEventHandleInfoCache.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandleInfoCache.en::ENode#Eventing#IEventHandleInfoCache#AddEventHandleInfo(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>设置 IEventHandleInfoCache.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandleInfoCache.en::ENode#Eventing#IEventHandleInfoCache#IsEventHandleInfoExist(System.String,System.Int32)">
            <summary>设置 IEventHandleInfoCache.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandleInfoCache.en::ENode#Eventing#IEventHandleInfoCache#RemoveEventHandleInfo(System.String)">
            <summary>设置 IEventHandleInfoCache.RemoveEventHandleInfo(String eventId) 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventHandleInfoCache.IsEventHandleInfoExistStringInt32">
            <summary>设置 IEventHandleInfoCache.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventHandleInfoCache.RemoveEventHandleInfoString">
            <summary>设置 IEventHandleInfoCache.RemoveEventHandleInfo(String eventId) 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventHandleInfoStore">
            <summary>ENode.Eventing.IEventHandleInfoStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandleInfoStore.#ctor">
            <summary>初始化 type StubIEventHandleInfoStore 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventHandleInfoStore.AddEventHandleInfoStringInt32Int32StringInt32">
            <summary>设置 IEventHandleInfoStore.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandleInfoStore.en::ENode#Eventing#IEventHandleInfoStore#AddEventHandleInfo(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>设置 IEventHandleInfoStore.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandleInfoStore.en::ENode#Eventing#IEventHandleInfoStore#IsEventHandleInfoExist(System.String,System.Int32)">
            <summary>设置 IEventHandleInfoStore.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventHandleInfoStore.IsEventHandleInfoExistStringInt32">
            <summary>设置 IEventHandleInfoStore.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventHandler">
            <summary>ENode.Eventing.IEventHandler 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandler.#ctor">
            <summary>初始化 type StubIEventHandler 的新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandler.en::ENode#Infrastructure#IMessageHandler#GetInnerHandler">
            <summary>设置 IMessageHandler.GetInnerHandler() 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandler.en::ENode#Infrastructure#IMessageHandler#Handle(System.Object,System.Object)">
            <summary>设置 IMessageHandler.Handle(Object context, Object message) 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventHandler.GetInnerHandler">
            <summary>设置 IMessageHandler.GetInnerHandler() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventHandler.HandleObjectObject">
            <summary>设置 IMessageHandler.Handle(Object context, Object message) 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventHandler`1">
            <summary>ENode.Eventing.IEventHandler`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandler`1.#ctor">
            <summary>初始化 type StubIEventHandler 的新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventHandler`1.en::ENode#Infrastructure#IMessageHandler{ENode#Eventing#IEventContext@TEvent}#Handle(ENode.Eventing.IEventContext,`0)">
            <summary>设置 IMessageHandler`2.Handle(!0 context, !1 message) 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventHandler`1.HandleIEventContextT0">
            <summary>设置 IMessageHandler`2.Handle(!0 context, !1 message) 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventPublishInfoStore">
            <summary>ENode.Eventing.IEventPublishInfoStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventPublishInfoStore.#ctor">
            <summary>初始化 type StubIEventPublishInfoStore 的新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventPublishInfoStore.en::ENode#Eventing#IEventPublishInfoStore#GetEventPublishedVersion(System.String,System.String)">
            <summary>设置 IEventPublishInfoStore.GetEventPublishedVersion(String eventProcessorName, String aggregateRootId) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventPublishInfoStore.en::ENode#Eventing#IEventPublishInfoStore#InsertPublishedVersion(System.String,System.String)">
            <summary>设置 IEventPublishInfoStore.InsertPublishedVersion(String eventProcessorName, String aggregateRootId) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventPublishInfoStore.en::ENode#Eventing#IEventPublishInfoStore#UpdatePublishedVersion(System.String,System.String,System.Int32)">
            <summary>设置 IEventPublishInfoStore.UpdatePublishedVersion(String eventProcessorName, String aggregateRootId, Int32 version) 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventPublishInfoStore.GetEventPublishedVersionStringString">
            <summary>设置 IEventPublishInfoStore.GetEventPublishedVersion(String eventProcessorName, String aggregateRootId) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventPublishInfoStore.InsertPublishedVersionStringString">
            <summary>设置 IEventPublishInfoStore.InsertPublishedVersion(String eventProcessorName, String aggregateRootId) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventPublishInfoStore.UpdatePublishedVersionStringStringInt32">
            <summary>设置 IEventPublishInfoStore.UpdatePublishedVersion(String eventProcessorName, String aggregateRootId, Int32 version) 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventService">
            <summary>ENode.Eventing.IEventService 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventService.#ctor">
            <summary>初始化 type StubIEventService 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventService.CommitEventEventCommittingContext">
            <summary>设置 IEventService.CommitEvent(EventCommittingContext context) 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventService.en::ENode#Eventing#IEventService#CommitEvent(ENode.Eventing.EventCommittingContext)">
            <summary>设置 IEventService.CommitEvent(EventCommittingContext context) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventService.en::ENode#Eventing#IEventService#PublishDomainEvent(ENode.Commanding.ProcessingCommand,ENode.Eventing.DomainEventStream)">
            <summary>设置 IEventService.PublishDomainEvent(ProcessingCommand processingCommand, DomainEventStream eventStream) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventService.en::ENode#Eventing#IEventService#PublishEvent(ENode.Commanding.ProcessingCommand,ENode.Eventing.EventStream)">
            <summary>设置 IEventService.PublishEvent(ProcessingCommand processingCommand, EventStream eventStream) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventService.en::ENode#Eventing#IEventService#Start">
            <summary>设置 IEventService.Start() 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventService.PublishDomainEventProcessingCommandDomainEventStream">
            <summary>设置 IEventService.PublishDomainEvent(ProcessingCommand processingCommand, DomainEventStream eventStream) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventService.PublishEventProcessingCommandEventStream">
            <summary>设置 IEventService.PublishEvent(ProcessingCommand processingCommand, EventStream eventStream) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventService.Start">
            <summary>设置 IEventService.Start() 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventStore">
            <summary>ENode.Eventing.IEventStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventStore.#ctor">
            <summary>初始化 type StubIEventStore 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStore.AppendDomainEventStream">
            <summary>设置 IEventStore.Append(DomainEventStream eventStream) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStore.BatchAppendIEnumerableOfDomainEventStream">
            <summary>设置 IEventStore.BatchAppend(IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventStore.en::ENode#Eventing#IEventStore#Append(ENode.Eventing.DomainEventStream)">
            <summary>设置 IEventStore.Append(DomainEventStream eventStream) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventStore.en::ENode#Eventing#IEventStore#BatchAppend(System.Collections.Generic.IEnumerable{ENode.Eventing.DomainEventStream})">
            <summary>设置 IEventStore.BatchAppend(IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventStore.en::ENode#Eventing#IEventStore#Find(System.String,System.String)">
            <summary>设置 IEventStore.Find(String aggregateRootId, String commandId) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventStore.en::ENode#Eventing#IEventStore#Find(System.String,System.Int32)">
            <summary>设置 IEventStore.Find(String aggregateRootId, Int32 version) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventStore.en::ENode#Eventing#IEventStore#QueryAggregateEvents(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>设置 IEventStore.QueryAggregateEvents(String aggregateRootId, Int32 aggregateRootTypeCode, Int32 minVersion, Int32 maxVersion) 的 存根</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventStore.en::ENode#Eventing#IEventStore#QueryByPage(System.Int32,System.Int32)">
            <summary>设置 IEventStore.QueryByPage(Int32 pageIndex, Int32 pageSize) 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStore.FindStringInt32">
            <summary>设置 IEventStore.Find(String aggregateRootId, Int32 version) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStore.FindStringString">
            <summary>设置 IEventStore.Find(String aggregateRootId, String commandId) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStore.QueryAggregateEventsStringInt32Int32Int32">
            <summary>设置 IEventStore.QueryAggregateEvents(String aggregateRootId, Int32 aggregateRootTypeCode, Int32 minVersion, Int32 maxVersion) 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStore.QueryByPageInt32Int32">
            <summary>设置 IEventStore.QueryByPage(Int32 pageIndex, Int32 pageSize) 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIEventStream">
            <summary>ENode.Eventing.IEventStream 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIEventStream.#ctor">
            <summary>初始化 type StubIEventStream 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStream.CommandIdGet">
            <summary>设置 IEventStream.get_CommandId() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStream.EventsGet">
            <summary>设置 IEventStream.get_Events() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStream.ItemsGet">
            <summary>设置 IEventStream.get_Items() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIEventStream.ProcessIdGet">
            <summary>设置 IEventStream.get_ProcessId() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIEventStream.en::ENode#Eventing#IEventStream#CommandId">
            <summary>设置 IEventStream.get_CommandId() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIEventStream.en::ENode#Eventing#IEventStream#Events">
            <summary>设置 IEventStream.get_Events() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIEventStream.en::ENode#Eventing#IEventStream#Items">
            <summary>设置 IEventStream.get_Items() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIEventStream.en::ENode#Eventing#IEventStream#ProcessId">
            <summary>设置 IEventStream.get_ProcessId() 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubIProcessCompletedEvent">
            <summary>ENode.Eventing.IProcessCompletedEvent 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubIProcessCompletedEvent.#ctor">
            <summary>初始化 type StubIProcessCompletedEvent 的新实例</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIProcessCompletedEvent.ErrorCodeGet">
            <summary>设置 IProcessCompletedEvent.get_ErrorCode() 的 stub</summary>
        </member>
        <member name="F:ENode.Eventing.Fakes.StubIProcessCompletedEvent.IsSuccessGet">
            <summary>设置 IProcessCompletedEvent.get_IsSuccess() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIProcessCompletedEvent.en::ENode#Eventing#IProcessCompletedEvent#ErrorCode">
            <summary>设置 IProcessCompletedEvent.get_ErrorCode() 的 stub</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubIProcessCompletedEvent.en::ENode#Eventing#IProcessCompletedEvent#IsSuccess">
            <summary>设置 IProcessCompletedEvent.get_IsSuccess() 的 stub</summary>
        </member>
        <member name="T:ENode.Eventing.Fakes.StubProcessCompletedEvent`1">
            <summary>ENode.Eventing.ProcessCompletedEvent`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubProcessCompletedEvent`1.#ctor(`0)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Fakes.StubProcessCompletedEvent`1.InitializeStub">
            <summary>初始化 type StubProcessCompletedEvent 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubProcessCompletedEvent`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubProcessCompletedEvent`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Fakes.StubProcessCompletedEvent`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider">
            <summary>ENode.Eventing.Impl.DefaultEventHandlerProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.#ctor(ENode.Eventing.Impl.DefaultEventHandlerProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.Bind(ENode.Infrastructure.IAssemblyInitializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.Bind(ENode.Infrastructure.IMessageHandlerProvider{ENode.Eventing.IEventHandler})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.Constructor">
            <summary>设置 DefaultEventHandlerProvider.DefaultEventHandlerProvider() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultEventHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.GetMessageHandlerWrapperType">
            <summary>设置 DefaultEventHandlerProvider.GetMessageHandlerWrapperType() 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.AllInstances.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultEventHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventHandlerProvider.AllInstances.GetMessageHandlerWrapperType">
            <summary>设置 DefaultEventHandlerProvider.GetMessageHandlerWrapperType() 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor">
            <summary>ENode.Eventing.Impl.DefaultEventProcessor 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.#ctor(ENode.Eventing.Impl.DefaultEventProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.Bind(ENode.Infrastructure.IMessageProcessor{ENode.Eventing.IEventStream})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.BuildCommandIdICommandIEventInt32">
            <summary>设置 DefaultEventProcessor.BuildCommandId(ICommand command, IEvent evnt, Int32 eventHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.ConstructorITypeCodeProviderOfIEventITypeCodeProviderOfIEventHandlerITypeCodeProviderOfICommandIMessageHandlerProviderOfIEventHandlerIProcessCommandSenderIRepositoryIEventPublishInfoStoreIEventHandleInfoStoreIEventHandleInfoCacheIActionExecutionServiceILog">
            <summary>设置 DefaultEventProcessor.DefaultEventProcessor(ITypeCodeProvider`1&lt;IEvent&gt; eventTypeCodeProvider, ITypeCodeProvider`1&lt;IEventHandler&gt; eventHandlerTypeCodeProvider, ITypeCodeProvider`1&lt;ICommand&gt; commandTypeCodeProvider, IMessageHandlerProvider`1&lt;IEventHandler&gt; eventHandlerProvider, IProcessCommandSender processCommandSender, IRepository repository, IEventPublishInfoStore eventPublishInfoStore, IEventHandleInfoStore eventHandleInfoStore, IEventHandleInfoCache eventHandleInfoCache, IActionExecutionService actionExecutionService, ILoggerFactory loggerFactory) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.DispatchEventToHandlerStringIEventIEventHandler">
            <summary>设置 DefaultEventProcessor.DispatchEventToHandler(String processId, IEvent evnt, IEventHandler eventHandler) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.DispatchEventsCallbackObject">
            <summary>设置 DefaultEventProcessor.DispatchEventsCallback(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.DispatchEventsToHandlersIEventStream">
            <summary>设置 DefaultEventProcessor.DispatchEventsToHandlers(IEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.NameGet">
            <summary>设置 DefaultEventProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.NameSetString">
            <summary>设置 DefaultEventProcessor.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.ProcessIEventStreamIMessageProcessContextOfIEventStream">
            <summary>设置 DefaultEventProcessor.Process(IEventStream eventStream, IMessageProcessContext`1&lt;IEventStream&gt; context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.UpdatePublishedVersionIDomainEventStream">
            <summary>设置 DefaultEventProcessor.UpdatePublishedVersion(IDomainEventStream stream) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances.BuildCommandIdICommandIEventInt32">
            <summary>设置 DefaultEventProcessor.BuildCommandId(ICommand command, IEvent evnt, Int32 eventHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances.DispatchEventToHandlerStringIEventIEventHandler">
            <summary>设置 DefaultEventProcessor.DispatchEventToHandler(String processId, IEvent evnt, IEventHandler eventHandler) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances.DispatchEventsCallbackObject">
            <summary>设置 DefaultEventProcessor.DispatchEventsCallback(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances.DispatchEventsToHandlersIEventStream">
            <summary>设置 DefaultEventProcessor.DispatchEventsToHandlers(IEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances.NameGet">
            <summary>设置 DefaultEventProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances.NameSetString">
            <summary>设置 DefaultEventProcessor.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances.ProcessIEventStreamIMessageProcessContextOfIEventStream">
            <summary>设置 DefaultEventProcessor.Process(IEventStream eventStream, IMessageProcessContext`1&lt;IEventStream&gt; context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventProcessor.AllInstances.UpdatePublishedVersionIDomainEventStream">
            <summary>设置 DefaultEventProcessor.UpdatePublishedVersion(IDomainEventStream stream) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimDefaultEventService">
            <summary>ENode.Eventing.Impl.DefaultEventService 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.#ctor(ENode.Eventing.Impl.DefaultEventService)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.Bind(ENode.Eventing.IEventService)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AcceptAggregateChangesEventCommittingContext">
            <summary>设置 DefaultEventService.AcceptAggregateChanges(EventCommittingContext context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AddAggregateToMemoryDomainEventStream">
            <summary>设置 DefaultEventService.AddAggregateToMemory(DomainEventStream aggregateFirstEventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.BatchPersistEvents">
            <summary>设置 DefaultEventService.BatchPersistEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.CommitEventEventCommittingContext">
            <summary>设置 DefaultEventService.CommitEvent(EventCommittingContext context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.ConstructorIScheduleServiceIExecutedCommandServiceITypeCodeProviderOfIAggregateRootIEventSourcingServiceIMemoryCacheIAggregateRootFactoryIAggregateStorageIRetryCommandServiceIEventStoreIMessagePublisherOfDomainEventStreamIMessagePublisherOfEventStreamIActi">
            <summary>设置 DefaultEventService.DefaultEventService(IScheduleService scheduleService, IExecutedCommandService executedCommandService, ITypeCodeProvider`1&lt;IAggregateRoot&gt; aggregateRootTypeCodeProvider, IEventSourcingService eventSourcingService, IMemoryCache memoryCache, IAggregateRootFactory aggregateRootFactory, IAggregateStorage aggregateStorage, IRetryCommandService retryCommandService, IEventStore eventStore, IMessagePublisher`1&lt;DomainEventStream&gt; domainEventPublisher, IMessagePublisher`1&lt;EventStream&gt; eventPublisher, IActionExecutionService actionExecutionService, IEventPublishInfoStore eventPublishInfoStore, ILoggerFactory loggerFactory) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.NotifyCommandExecutedProcessingCommandStringCommandStatusStringString">
            <summary>设置 DefaultEventService.NotifyCommandExecuted(ProcessingCommand processingCommand, String aggregateRootId, CommandStatus commandStatus, String exceptionTypeName, String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.PersistEventCallbackObject">
            <summary>设置 DefaultEventService.PersistEventCallback(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.PersistEventEventCommittingContext">
            <summary>设置 DefaultEventService.PersistEvent(EventCommittingContext context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.ProcessFailedPersistedEvents">
            <summary>设置 DefaultEventService.ProcessFailedPersistedEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.ProcessSuccessPersistedEvents">
            <summary>设置 DefaultEventService.ProcessSuccessPersistedEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.PublishDomainEventProcessingCommandDomainEventStream">
            <summary>设置 DefaultEventService.PublishDomainEvent(ProcessingCommand processingCommand, DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.PublishEventProcessingCommandEventStream">
            <summary>设置 DefaultEventService.PublishEvent(ProcessingCommand processingCommand, EventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.RetryCommandEventCommittingContext">
            <summary>设置 DefaultEventService.RetryCommand(EventCommittingContext context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.Start">
            <summary>设置 DefaultEventService.Start() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.TryBatchPersistEvents">
            <summary>设置 DefaultEventService.TryBatchPersistEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.UpdateAggregateToLatestVersionDomainEventStream">
            <summary>设置 DefaultEventService.UpdateAggregateToLatestVersion(DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService._BatchPersistEventsb__14EventCommittingContext">
            <summary>设置 DefaultEventService.&lt;BatchPersistEvents&gt;b__14(EventCommittingContext x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.AcceptAggregateChangesEventCommittingContext">
            <summary>设置 DefaultEventService.AcceptAggregateChanges(EventCommittingContext context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.AddAggregateToMemoryDomainEventStream">
            <summary>设置 DefaultEventService.AddAggregateToMemory(DomainEventStream aggregateFirstEventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.BatchPersistEvents">
            <summary>设置 DefaultEventService.BatchPersistEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.CommitEventEventCommittingContext">
            <summary>设置 DefaultEventService.CommitEvent(EventCommittingContext context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.NotifyCommandExecutedProcessingCommandStringCommandStatusStringString">
            <summary>设置 DefaultEventService.NotifyCommandExecuted(ProcessingCommand processingCommand, String aggregateRootId, CommandStatus commandStatus, String exceptionTypeName, String errorMessage) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.PersistEventCallbackObject">
            <summary>设置 DefaultEventService.PersistEventCallback(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.PersistEventEventCommittingContext">
            <summary>设置 DefaultEventService.PersistEvent(EventCommittingContext context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.ProcessFailedPersistedEvents">
            <summary>设置 DefaultEventService.ProcessFailedPersistedEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.ProcessSuccessPersistedEvents">
            <summary>设置 DefaultEventService.ProcessSuccessPersistedEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.PublishDomainEventProcessingCommandDomainEventStream">
            <summary>设置 DefaultEventService.PublishDomainEvent(ProcessingCommand processingCommand, DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.PublishEventProcessingCommandEventStream">
            <summary>设置 DefaultEventService.PublishEvent(ProcessingCommand processingCommand, EventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.RetryCommandEventCommittingContext">
            <summary>设置 DefaultEventService.RetryCommand(EventCommittingContext context) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.Start">
            <summary>设置 DefaultEventService.Start() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.TryBatchPersistEvents">
            <summary>设置 DefaultEventService.TryBatchPersistEvents() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimDefaultEventService.AllInstances.UpdateAggregateToLatestVersionDomainEventStream">
            <summary>设置 DefaultEventService.UpdateAggregateToLatestVersion(DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1">
            <summary>ENode.Eventing.Impl.EventHandlerWrapper`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.#ctor(ENode.Eventing.Impl.EventHandlerWrapper{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.Bind(ENode.Eventing.IEventHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.Bind(ENode.Infrastructure.IMessageHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.ConstructorIMessageHandlerOfIEventContextT0">
            <summary>设置 EventHandlerWrapper`1.EventHandlerWrapper`1(IMessageHandler`2&lt;IEventContext,!0&gt; eventHandler) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimEventHandlerWrapper`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider">
            <summary>ENode.Eventing.Impl.NotImplementedEventHandlerTypeCodeProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider.#ctor(ENode.Eventing.Impl.NotImplementedEventHandlerTypeCodeProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider.Bind(ENode.Infrastructure.ITypeCodeProvider{ENode.Eventing.IEventHandler})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider.Constructor">
            <summary>设置 NotImplementedEventHandlerTypeCodeProvider.NotImplementedEventHandlerTypeCodeProvider() 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventHandlerTypeCodeProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher">
            <summary>ENode.Eventing.Impl.NotImplementedEventPublisher 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.#ctor(ENode.Eventing.Impl.NotImplementedEventPublisher)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.Bind(ENode.Infrastructure.IMessagePublisher{ENode.Eventing.DomainEventStream})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.Bind(ENode.Infrastructure.IMessagePublisher{ENode.Eventing.EventStream})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.Constructor">
            <summary>设置 NotImplementedEventPublisher.NotImplementedEventPublisher() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.PublishDomainEventStream">
            <summary>设置 NotImplementedEventPublisher.Publish(DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.PublishEventStream">
            <summary>设置 NotImplementedEventPublisher.Publish(EventStream eventStream) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.AllInstances.PublishDomainEventStream">
            <summary>设置 NotImplementedEventPublisher.Publish(DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventPublisher.AllInstances.PublishEventStream">
            <summary>设置 NotImplementedEventPublisher.Publish(EventStream eventStream) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider">
            <summary>ENode.Eventing.Impl.NotImplementedEventTypeCodeProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider.#ctor(ENode.Eventing.Impl.NotImplementedEventTypeCodeProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider.Bind(ENode.Infrastructure.ITypeCodeProvider{ENode.Eventing.IEvent})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider.Constructor">
            <summary>设置 NotImplementedEventTypeCodeProvider.NotImplementedEventTypeCodeProvider() 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.ShimNotImplementedEventTypeCodeProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider">
            <summary>ENode.Eventing.Impl.DefaultEventHandlerProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultEventHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.GetMessageHandlerGenericInterfaceType01">
            <summary>设置 DefaultEventHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.GetMessageHandlerWrapperType">
            <summary>设置 DefaultEventHandlerProvider.GetMessageHandlerWrapperType() 的 存根</summary>
        </member>
        <member name="F:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.GetMessageHandlerWrapperType01">
            <summary>设置 DefaultEventHandlerProvider.GetMessageHandlerWrapperType() 的 stub</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.InitializeStub">
            <summary>初始化 type StubDefaultEventHandlerProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventHandlerProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.StubDefaultEventProcessor">
            <summary>ENode.Eventing.Impl.DefaultEventProcessor 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubDefaultEventProcessor.#ctor(ENode.Infrastructure.ITypeCodeProvider{ENode.Eventing.IEvent},ENode.Infrastructure.ITypeCodeProvider{ENode.Eventing.IEventHandler},ENode.Infrastructure.ITypeCodeProvider{ENode.Commanding.ICommand},ENode.Infrastructure.IMessageHandlerProvider{ENode.Eventing.IEventHandler},ENode.Commanding.IProcessCommandSender,ENode.Domain.IRepository,ENode.Eventing.IEventPublishInfoStore,ENode.Eventing.IEventHandleInfoStore,ENode.Eventing.IEventHandleInfoCache,ECommon.Retring.IActionExecutionService,ECommon.Logging.ILoggerFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubDefaultEventProcessor.InitializeStub">
            <summary>初始化 type StubDefaultEventProcessor 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.StubDefaultEventService">
            <summary>ENode.Eventing.Impl.DefaultEventService 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubDefaultEventService.#ctor(ECommon.Scheduling.IScheduleService,ENode.Commanding.IExecutedCommandService,ENode.Infrastructure.ITypeCodeProvider{ENode.Domain.IAggregateRoot},ENode.Domain.IEventSourcingService,ENode.Domain.IMemoryCache,ENode.Domain.IAggregateRootFactory,ENode.Domain.IAggregateStorage,ENode.Commanding.IRetryCommandService,ENode.Eventing.IEventStore,ENode.Infrastructure.IMessagePublisher{ENode.Eventing.DomainEventStream},ENode.Infrastructure.IMessagePublisher{ENode.Eventing.EventStream},ECommon.Retring.IActionExecutionService,ENode.Eventing.IEventPublishInfoStore,ECommon.Logging.ILoggerFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubDefaultEventService.InitializeStub">
            <summary>初始化 type StubDefaultEventService 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventService.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventService.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubDefaultEventService.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.StubEventHandlerWrapper`1">
            <summary>ENode.Eventing.Impl.EventHandlerWrapper`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubEventHandlerWrapper`1.#ctor(ENode.Infrastructure.IMessageHandler{ENode.Eventing.IEventContext,`0})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubEventHandlerWrapper`1.InitializeStub">
            <summary>初始化 type StubEventHandlerWrapper 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubEventHandlerWrapper`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubEventHandlerWrapper`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubEventHandlerWrapper`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.StubNotImplementedEventHandlerTypeCodeProvider">
            <summary>ENode.Eventing.Impl.NotImplementedEventHandlerTypeCodeProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubNotImplementedEventHandlerTypeCodeProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubNotImplementedEventHandlerTypeCodeProvider.InitializeStub">
            <summary>初始化 type StubNotImplementedEventHandlerTypeCodeProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventHandlerTypeCodeProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventHandlerTypeCodeProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventHandlerTypeCodeProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.StubNotImplementedEventPublisher">
            <summary>ENode.Eventing.Impl.NotImplementedEventPublisher 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubNotImplementedEventPublisher.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubNotImplementedEventPublisher.InitializeStub">
            <summary>初始化 type StubNotImplementedEventPublisher 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventPublisher.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventPublisher.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventPublisher.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.Fakes.StubNotImplementedEventTypeCodeProvider">
            <summary>ENode.Eventing.Impl.NotImplementedEventTypeCodeProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubNotImplementedEventTypeCodeProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.Fakes.StubNotImplementedEventTypeCodeProvider.InitializeStub">
            <summary>初始化 type StubNotImplementedEventTypeCodeProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventTypeCodeProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventTypeCodeProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.Fakes.StubNotImplementedEventTypeCodeProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache">
            <summary>ENode.Eventing.Impl.InMemory.InMemoryEventHandleInfoCache 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.#ctor(ENode.Eventing.Impl.InMemory.InMemoryEventHandleInfoCache)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.Bind(ENode.Eventing.IEventHandleInfoCache)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.AddEventHandleInfoStringInt32Int32StringInt32">
            <summary>设置 InMemoryEventHandleInfoCache.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.Constructor">
            <summary>设置 InMemoryEventHandleInfoCache.InMemoryEventHandleInfoCache() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.IsEventHandleInfoExistStringInt32">
            <summary>设置 InMemoryEventHandleInfoCache.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.RemoveEventHandleInfoString">
            <summary>设置 InMemoryEventHandleInfoCache.RemoveEventHandleInfo(String eventId) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.AllInstances.AddEventHandleInfoStringInt32Int32StringInt32">
            <summary>设置 InMemoryEventHandleInfoCache.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.AllInstances.IsEventHandleInfoExistStringInt32">
            <summary>设置 InMemoryEventHandleInfoCache.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoCache.AllInstances.RemoveEventHandleInfoString">
            <summary>设置 InMemoryEventHandleInfoCache.RemoveEventHandleInfo(String eventId) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore">
            <summary>ENode.Eventing.Impl.InMemory.InMemoryEventHandleInfoStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.#ctor(ENode.Eventing.Impl.InMemory.InMemoryEventHandleInfoStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.Bind(ENode.Eventing.IEventHandleInfoStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.AddEventHandleInfoStringInt32Int32StringInt32">
            <summary>设置 InMemoryEventHandleInfoStore.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.Constructor">
            <summary>设置 InMemoryEventHandleInfoStore.InMemoryEventHandleInfoStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.IsEventHandleInfoExistStringInt32">
            <summary>设置 InMemoryEventHandleInfoStore.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.AllInstances.AddEventHandleInfoStringInt32Int32StringInt32">
            <summary>设置 InMemoryEventHandleInfoStore.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventHandleInfoStore.AllInstances.IsEventHandleInfoExistStringInt32">
            <summary>设置 InMemoryEventHandleInfoStore.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore">
            <summary>ENode.Eventing.Impl.InMemory.InMemoryEventPublishInfoStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.#ctor(ENode.Eventing.Impl.InMemory.InMemoryEventPublishInfoStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.Bind(ENode.Eventing.IEventPublishInfoStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.BuildKeyStringString">
            <summary>设置 InMemoryEventPublishInfoStore.BuildKey(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.Constructor">
            <summary>设置 InMemoryEventPublishInfoStore.InMemoryEventPublishInfoStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.GetEventPublishedVersionStringString">
            <summary>设置 InMemoryEventPublishInfoStore.GetEventPublishedVersion(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.InsertPublishedVersionStringString">
            <summary>设置 InMemoryEventPublishInfoStore.InsertPublishedVersion(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.UpdatePublishedVersionStringStringInt32">
            <summary>设置 InMemoryEventPublishInfoStore.UpdatePublishedVersion(String eventProcessorName, String aggregateRootId, Int32 version) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.AllInstances.BuildKeyStringString">
            <summary>设置 InMemoryEventPublishInfoStore.BuildKey(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.AllInstances.GetEventPublishedVersionStringString">
            <summary>设置 InMemoryEventPublishInfoStore.GetEventPublishedVersion(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.AllInstances.InsertPublishedVersionStringString">
            <summary>设置 InMemoryEventPublishInfoStore.InsertPublishedVersion(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventPublishInfoStore.AllInstances.UpdatePublishedVersionStringStringInt32">
            <summary>设置 InMemoryEventPublishInfoStore.UpdatePublishedVersion(String eventProcessorName, String aggregateRootId, Int32 version) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore">
            <summary>ENode.Eventing.Impl.InMemory.InMemoryEventStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.#ctor(ENode.Eventing.Impl.InMemory.InMemoryEventStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.Bind(ENode.Eventing.IEventStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.AppendDomainEventStream">
            <summary>设置 InMemoryEventStore.Append(DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.BatchAppendIEnumerableOfDomainEventStream">
            <summary>设置 InMemoryEventStore.BatchAppend(IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.ConstructorILoggerFactory">
            <summary>设置 InMemoryEventStore.InMemoryEventStore(ILoggerFactory loggerFactory) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.FindStringInt32">
            <summary>设置 InMemoryEventStore.Find(String aggregateRootId, Int32 version) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.FindStringString">
            <summary>设置 InMemoryEventStore.Find(String aggregateRootId, String commandId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.QueryAggregateEventsStringInt32Int32Int32">
            <summary>设置 InMemoryEventStore.QueryAggregateEvents(String aggregateRootId, Int32 aggregateRootTypeCode, Int32 minVersion, Int32 maxVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.QueryByPageInt32Int32">
            <summary>设置 InMemoryEventStore.QueryByPage(Int32 pageIndex, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore._QueryAggregateEventsb__1KeyValuePairOfInt32DomainEventStream">
            <summary>设置 InMemoryEventStore.&lt;QueryAggregateEvents&gt;b__1(KeyValuePair`2&lt;Int32,DomainEventStream&gt; x) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore._QueryByPageb__5KeyValuePairOfInt64DomainEventStream">
            <summary>设置 InMemoryEventStore.&lt;QueryByPage&gt;b__5(KeyValuePair`2&lt;Int64,DomainEventStream&gt; x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.AllInstances.AppendDomainEventStream">
            <summary>设置 InMemoryEventStore.Append(DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.AllInstances.BatchAppendIEnumerableOfDomainEventStream">
            <summary>设置 InMemoryEventStore.BatchAppend(IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.AllInstances.FindStringInt32">
            <summary>设置 InMemoryEventStore.Find(String aggregateRootId, Int32 version) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.AllInstances.FindStringString">
            <summary>设置 InMemoryEventStore.Find(String aggregateRootId, String commandId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.AllInstances.QueryAggregateEventsStringInt32Int32Int32">
            <summary>设置 InMemoryEventStore.QueryAggregateEvents(String aggregateRootId, Int32 aggregateRootTypeCode, Int32 minVersion, Int32 maxVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.ShimInMemoryEventStore.AllInstances.QueryByPageInt32Int32">
            <summary>设置 InMemoryEventStore.QueryByPage(Int32 pageIndex, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoCache">
            <summary>ENode.Eventing.Impl.InMemory.InMemoryEventHandleInfoCache 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoCache.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoCache.InitializeStub">
            <summary>初始化 type StubInMemoryEventHandleInfoCache 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoCache.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoCache.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoCache.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoStore">
            <summary>ENode.Eventing.Impl.InMemory.InMemoryEventHandleInfoStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoStore.InitializeStub">
            <summary>初始化 type StubInMemoryEventHandleInfoStore 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventHandleInfoStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventPublishInfoStore">
            <summary>ENode.Eventing.Impl.InMemory.InMemoryEventPublishInfoStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventPublishInfoStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventPublishInfoStore.InitializeStub">
            <summary>初始化 type StubInMemoryEventPublishInfoStore 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventPublishInfoStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventPublishInfoStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventPublishInfoStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventStore">
            <summary>ENode.Eventing.Impl.InMemory.InMemoryEventStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventStore.#ctor(ECommon.Logging.ILoggerFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventStore.InitializeStub">
            <summary>初始化 type StubInMemoryEventStore 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.InMemory.Fakes.StubInMemoryEventStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore">
            <summary>ENode.Eventing.Impl.SQL.SqlServerEventHandleInfoStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.#ctor(ENode.Eventing.Impl.SQL.SqlServerEventHandleInfoStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.Bind(ENode.Eventing.IEventHandleInfoStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.AddEventHandleInfoStringInt32Int32StringInt32">
            <summary>设置 SqlServerEventHandleInfoStore.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.Constructor">
            <summary>设置 SqlServerEventHandleInfoStore.SqlServerEventHandleInfoStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.GetConnection">
            <summary>设置 SqlServerEventHandleInfoStore.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.IsEventHandleInfoExistStringInt32">
            <summary>设置 SqlServerEventHandleInfoStore.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.AllInstances.AddEventHandleInfoStringInt32Int32StringInt32">
            <summary>设置 SqlServerEventHandleInfoStore.AddEventHandleInfo(String eventId, Int32 eventHandlerTypeCode, Int32 eventTypeCode, String aggregateRootId, Int32 aggregateRootVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.AllInstances.GetConnection">
            <summary>设置 SqlServerEventHandleInfoStore.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventHandleInfoStore.AllInstances.IsEventHandleInfoExistStringInt32">
            <summary>设置 SqlServerEventHandleInfoStore.IsEventHandleInfoExist(String eventId, Int32 eventHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore">
            <summary>ENode.Eventing.Impl.SQL.SqlServerEventPublishInfoStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.#ctor(ENode.Eventing.Impl.SQL.SqlServerEventPublishInfoStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.Bind(ENode.Eventing.IEventPublishInfoStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.Constructor">
            <summary>设置 SqlServerEventPublishInfoStore.SqlServerEventPublishInfoStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.GetConnection">
            <summary>设置 SqlServerEventPublishInfoStore.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.GetEventPublishedVersionStringString">
            <summary>设置 SqlServerEventPublishInfoStore.GetEventPublishedVersion(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.InsertPublishedVersionStringString">
            <summary>设置 SqlServerEventPublishInfoStore.InsertPublishedVersion(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.UpdatePublishedVersionStringStringInt32">
            <summary>设置 SqlServerEventPublishInfoStore.UpdatePublishedVersion(String eventProcessorName, String aggregateRootId, Int32 version) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.AllInstances.GetConnection">
            <summary>设置 SqlServerEventPublishInfoStore.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.AllInstances.GetEventPublishedVersionStringString">
            <summary>设置 SqlServerEventPublishInfoStore.GetEventPublishedVersion(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.AllInstances.InsertPublishedVersionStringString">
            <summary>设置 SqlServerEventPublishInfoStore.InsertPublishedVersion(String eventProcessorName, String aggregateRootId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventPublishInfoStore.AllInstances.UpdatePublishedVersionStringStringInt32">
            <summary>设置 SqlServerEventPublishInfoStore.UpdatePublishedVersion(String eventProcessorName, String aggregateRootId, Int32 version) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore">
            <summary>ENode.Eventing.Impl.SQL.SqlServerEventStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.#ctor(ENode.Eventing.Impl.SQL.SqlServerEventStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.Bind(ENode.Eventing.IEventStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AppendDomainEventStream">
            <summary>设置 SqlServerEventStore.Append(DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.BatchAppendIEnumerableOfDomainEventStream">
            <summary>设置 SqlServerEventStore.BatchAppend(IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.Constructor">
            <summary>设置 SqlServerEventStore.SqlServerEventStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.FindStringInt32">
            <summary>设置 SqlServerEventStore.Find(String aggregateRootId, Int32 version) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.FindStringString">
            <summary>设置 SqlServerEventStore.Find(String aggregateRootId, String commandId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.GetConnection">
            <summary>设置 SqlServerEventStore.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.QueryAggregateEventsStringInt32Int32Int32">
            <summary>设置 SqlServerEventStore.QueryAggregateEvents(String aggregateRootId, Int32 aggregateRootTypeCode, Int32 minVersion, Int32 maxVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.QueryByPageInt32Int32">
            <summary>设置 SqlServerEventStore.QueryByPage(Int32 pageIndex, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AllInstances.AppendDomainEventStream">
            <summary>设置 SqlServerEventStore.Append(DomainEventStream eventStream) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AllInstances.BatchAppendIEnumerableOfDomainEventStream">
            <summary>设置 SqlServerEventStore.BatchAppend(IEnumerable`1&lt;DomainEventStream&gt; eventStreams) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AllInstances.FindStringInt32">
            <summary>设置 SqlServerEventStore.Find(String aggregateRootId, Int32 version) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AllInstances.FindStringString">
            <summary>设置 SqlServerEventStore.Find(String aggregateRootId, String commandId) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AllInstances.GetConnection">
            <summary>设置 SqlServerEventStore.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AllInstances.QueryAggregateEventsStringInt32Int32Int32">
            <summary>设置 SqlServerEventStore.QueryAggregateEvents(String aggregateRootId, Int32 aggregateRootTypeCode, Int32 minVersion, Int32 maxVersion) 的 填充码</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.ShimSqlServerEventStore.AllInstances.QueryByPageInt32Int32">
            <summary>设置 SqlServerEventStore.QueryByPage(Int32 pageIndex, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventHandleInfoStore">
            <summary>ENode.Eventing.Impl.SQL.SqlServerEventHandleInfoStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventHandleInfoStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventHandleInfoStore.InitializeStub">
            <summary>初始化 type StubSqlServerEventHandleInfoStore 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventHandleInfoStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventHandleInfoStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventHandleInfoStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventPublishInfoStore">
            <summary>ENode.Eventing.Impl.SQL.SqlServerEventPublishInfoStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventPublishInfoStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventPublishInfoStore.InitializeStub">
            <summary>初始化 type StubSqlServerEventPublishInfoStore 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventPublishInfoStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventPublishInfoStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventPublishInfoStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventStore">
            <summary>ENode.Eventing.Impl.SQL.SqlServerEventStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventStore.InitializeStub">
            <summary>初始化 type StubSqlServerEventStore 的新实例</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Eventing.Impl.SQL.Fakes.StubSqlServerEventStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Exceptions.Fakes.ShimPublishableException">
            <summary>ENode.Exceptions.PublishableException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.ShimPublishableException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.ShimPublishableException.#ctor(ENode.Exceptions.PublishableException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.ShimPublishableException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.ShimPublishableException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.ShimPublishableException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.Constructor">
            <summary>设置 PublishableException.PublishableException() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.ProcessIdGet">
            <summary>设置 PublishableException.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.ProcessIdSetString">
            <summary>设置 PublishableException.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.UniqueIdGet">
            <summary>设置 PublishableException.get_UniqueId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.UniqueIdSetString">
            <summary>设置 PublishableException.set_UniqueId(String value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Fakes.ShimPublishableException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.AllInstances.ProcessIdGet">
            <summary>设置 PublishableException.get_ProcessId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.AllInstances.ProcessIdSetString">
            <summary>设置 PublishableException.set_ProcessId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.AllInstances.UniqueIdGet">
            <summary>设置 PublishableException.get_UniqueId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.ShimPublishableException.AllInstances.UniqueIdSetString">
            <summary>设置 PublishableException.set_UniqueId(String value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Fakes.StubIExceptionHandler">
            <summary>ENode.Exceptions.IExceptionHandler 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandler.#ctor">
            <summary>初始化 type StubIExceptionHandler 的新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandler.en::ENode#Infrastructure#IMessageHandler#GetInnerHandler">
            <summary>设置 IMessageHandler.GetInnerHandler() 的 存根</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandler.en::ENode#Infrastructure#IMessageHandler#Handle(System.Object,System.Object)">
            <summary>设置 IMessageHandler.Handle(Object context, Object message) 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIExceptionHandler.GetInnerHandler">
            <summary>设置 IMessageHandler.GetInnerHandler() 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIExceptionHandler.HandleObjectObject">
            <summary>设置 IMessageHandler.Handle(Object context, Object message) 的 stub</summary>
        </member>
        <member name="T:ENode.Exceptions.Fakes.StubIExceptionHandler`1">
            <summary>ENode.Exceptions.IExceptionHandler`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandler`1.#ctor">
            <summary>初始化 type StubIExceptionHandler 的新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandler`1.en::ENode#Infrastructure#IMessageHandler{ENode#Exceptions#IExceptionHandlingContext@TException}#Handle(ENode.Exceptions.IExceptionHandlingContext,`0)">
            <summary>设置 IMessageHandler`2.Handle(!0 context, !1 message) 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIExceptionHandler`1.HandleIExceptionHandlingContextT0">
            <summary>设置 IMessageHandler`2.Handle(!0 context, !1 message) 的 stub</summary>
        </member>
        <member name="T:ENode.Exceptions.Fakes.StubIExceptionHandlingContext">
            <summary>ENode.Exceptions.IExceptionHandlingContext 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandlingContext.#ctor">
            <summary>初始化 type StubIExceptionHandlingContext 的新实例</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIExceptionHandlingContext.AddCommandICommand">
            <summary>设置 IExceptionHandlingContext.AddCommand(ICommand command) 的 stub</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandlingContext.en::ENode#Exceptions#IExceptionHandlingContext#AddCommand(ENode.Commanding.ICommand)">
            <summary>设置 IExceptionHandlingContext.AddCommand(ICommand command) 的 存根</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandlingContext.en::ENode#Exceptions#IExceptionHandlingContext#Get``1(System.Object)">
            <summary>设置 IExceptionHandlingContext.Get(Object aggregateRootId) 的 存根</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandlingContext.en::ENode#Exceptions#IExceptionHandlingContext#GetCommands">
            <summary>设置 IExceptionHandlingContext.GetCommands() 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIExceptionHandlingContext.GetCommands">
            <summary>设置 IExceptionHandlingContext.GetCommands() 的 stub</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIExceptionHandlingContext.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 Get(Object aggregateRootId) 的存根</summary>
        </member>
        <member name="T:ENode.Exceptions.Fakes.StubIPublishableException">
            <summary>ENode.Exceptions.IPublishableException 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIPublishableException.#ctor">
            <summary>初始化 type StubIPublishableException 的新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIPublishableException.AttachBackingFieldToProcessId">
            <summary>附加委托以将 StubIPublishableException.ProcessId 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIPublishableException.AttachBackingFieldToUniqueId">
            <summary>附加委托以将 StubIPublishableException.UniqueId 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIPublishableException.en::ENode#Exceptions#IPublishableException#RestoreFrom(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 IPublishableException.RestoreFrom(IDictionary`2&lt;String,String&gt; serializableInfo) 的 存根</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubIPublishableException.en::ENode#Exceptions#IPublishableException#SerializeTo(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 IPublishableException.SerializeTo(IDictionary`2&lt;String,String&gt; serializableInfo) 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIPublishableException.ProcessIdGet">
            <summary>设置 IPublishableException.get_ProcessId() 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIPublishableException.ProcessIdSetString">
            <summary>设置 IPublishableException.set_ProcessId(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIPublishableException.RestoreFromIDictionaryOfStringString">
            <summary>设置 IPublishableException.RestoreFrom(IDictionary`2&lt;String,String&gt; serializableInfo) 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIPublishableException.SerializeToIDictionaryOfStringString">
            <summary>设置 IPublishableException.SerializeTo(IDictionary`2&lt;String,String&gt; serializableInfo) 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIPublishableException.UniqueIdGet">
            <summary>设置 IPublishableException.get_UniqueId() 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubIPublishableException.UniqueIdSetString">
            <summary>设置 IPublishableException.set_UniqueId(String value) 的 stub</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubIPublishableException.en::ENode#Exceptions#IPublishableException#ProcessId">
            <summary>设置 IPublishableException.get_ProcessId() 的 stub</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubIPublishableException.en::ENode#Exceptions#IPublishableException#UniqueId">
            <summary>设置 IPublishableException.get_UniqueId() 的 stub</summary>
        </member>
        <member name="T:ENode.Exceptions.Fakes.StubPublishableException">
            <summary>ENode.Exceptions.PublishableException 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubPublishableException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubPublishableException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubPublishableException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubPublishableException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubPublishableException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubPublishableException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubPublishableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubPublishableException.InitializeStub">
            <summary>初始化 type StubPublishableException 的新实例</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Exceptions.Fakes.StubPublishableException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Fakes.StubPublishableException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubPublishableException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubPublishableException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubPublishableException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubPublishableException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubPublishableException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubPublishableException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubPublishableException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Exceptions.Fakes.StubPublishableException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider">
            <summary>ENode.Exceptions.Impl.DefaultExceptionHandlerProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.#ctor(ENode.Exceptions.Impl.DefaultExceptionHandlerProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.Bind(ENode.Infrastructure.IAssemblyInitializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.Bind(ENode.Infrastructure.IMessageHandlerProvider{ENode.Exceptions.IExceptionHandler})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.Constructor">
            <summary>设置 DefaultExceptionHandlerProvider.DefaultExceptionHandlerProvider() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultExceptionHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.GetMessageHandlerWrapperType">
            <summary>设置 DefaultExceptionHandlerProvider.GetMessageHandlerWrapperType() 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.AllInstances.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultExceptionHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionHandlerProvider.AllInstances.GetMessageHandlerWrapperType">
            <summary>设置 DefaultExceptionHandlerProvider.GetMessageHandlerWrapperType() 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor">
            <summary>ENode.Exceptions.Impl.DefaultExceptionProcessor 的填充码类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.#ctor(ENode.Exceptions.Impl.DefaultExceptionProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.Bind(ENode.Infrastructure.IMessageProcessor{ENode.Exceptions.IPublishableException})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.BuildCommandIdICommandIPublishableExceptionInt32">
            <summary>设置 DefaultExceptionProcessor.BuildCommandId(ICommand command, IPublishableException exception, Int32 exceptionHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.ConstructorITypeCodeProviderOfIExceptionHandlerITypeCodeProviderOfICommandIMessageHandlerProviderOfIExceptionHandlerIProcessCommandSenderIRepositoryIActionExecutionServiceILoggerFactory">
            <summary>设置 DefaultExceptionProcessor.DefaultExceptionProcessor(ITypeCodeProvider`1&lt;IExceptionHandler&gt; exceptionHandlerTypeCodeProvider, ITypeCodeProvider`1&lt;ICommand&gt; commandTypeCodeProvider, IMessageHandlerProvider`1&lt;IExceptionHandler&gt; exceptionHandlerProvider, IProcessCommandSender processCommandSender, IRepository repository, IActionExecutionService actionExecutionService, ILoggerFactory loggerFactory) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.DispatchExceptionCallbackObject">
            <summary>设置 DefaultExceptionProcessor.DispatchExceptionCallback(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.DispatchExceptionToHandlerIPublishableExceptionIExceptionHandler">
            <summary>设置 DefaultExceptionProcessor.DispatchExceptionToHandler(IPublishableException exception, IExceptionHandler exceptionHandler) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.NameGet">
            <summary>设置 DefaultExceptionProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.NameSetString">
            <summary>设置 DefaultExceptionProcessor.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.ProcessIPublishableExceptionIMessageProcessContextOfIPublishableException">
            <summary>设置 DefaultExceptionProcessor.Process(IPublishableException exception, IMessageProcessContext`1&lt;IPublishableException&gt; context) 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.AllInstances.BuildCommandIdICommandIPublishableExceptionInt32">
            <summary>设置 DefaultExceptionProcessor.BuildCommandId(ICommand command, IPublishableException exception, Int32 exceptionHandlerTypeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.AllInstances.DispatchExceptionCallbackObject">
            <summary>设置 DefaultExceptionProcessor.DispatchExceptionCallback(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.AllInstances.DispatchExceptionToHandlerIPublishableExceptionIExceptionHandler">
            <summary>设置 DefaultExceptionProcessor.DispatchExceptionToHandler(IPublishableException exception, IExceptionHandler exceptionHandler) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.AllInstances.NameGet">
            <summary>设置 DefaultExceptionProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.AllInstances.NameSetString">
            <summary>设置 DefaultExceptionProcessor.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimDefaultExceptionProcessor.AllInstances.ProcessIPublishableExceptionIMessageProcessContextOfIPublishableException">
            <summary>设置 DefaultExceptionProcessor.Process(IPublishableException exception, IMessageProcessContext`1&lt;IPublishableException&gt; context) 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1">
            <summary>ENode.Exceptions.Impl.ExceptionHandlerWrapper`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.#ctor(ENode.Exceptions.Impl.ExceptionHandlerWrapper{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.Bind(ENode.Exceptions.IExceptionHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.Bind(ENode.Infrastructure.IMessageHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.ConstructorIMessageHandlerOfIExceptionHandlingContextT0">
            <summary>设置 ExceptionHandlerWrapper`1.ExceptionHandlerWrapper`1(IMessageHandler`2&lt;IExceptionHandlingContext,!0&gt; exceptionHandler) 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimExceptionHandlerWrapper`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider">
            <summary>ENode.Exceptions.Impl.NotImplementedExceptionHandlerTypeCodeProvider 的填充码类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider.#ctor(ENode.Exceptions.Impl.NotImplementedExceptionHandlerTypeCodeProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider.Bind(ENode.Infrastructure.ITypeCodeProvider{ENode.Exceptions.IExceptionHandler})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider.Constructor">
            <summary>设置 NotImplementedExceptionHandlerTypeCodeProvider.NotImplementedExceptionHandlerTypeCodeProvider() 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionHandlerTypeCodeProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher">
            <summary>ENode.Exceptions.Impl.NotImplementedExceptionPublisher 的填充码类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.#ctor(ENode.Exceptions.Impl.NotImplementedExceptionPublisher)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.Bind(ENode.Infrastructure.IMessagePublisher{ENode.Exceptions.IPublishableException})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.Constructor">
            <summary>设置 NotImplementedExceptionPublisher.NotImplementedExceptionPublisher() 的 填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.PublishIPublishableException">
            <summary>设置 NotImplementedExceptionPublisher.Publish(IPublishableException exception) 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.ShimNotImplementedExceptionPublisher.AllInstances.PublishIPublishableException">
            <summary>设置 NotImplementedExceptionPublisher.Publish(IPublishableException exception) 的 填充码</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider">
            <summary>ENode.Exceptions.Impl.DefaultExceptionHandlerProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.GetMessageHandlerGenericInterfaceType">
            <summary>设置 DefaultExceptionHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.GetMessageHandlerGenericInterfaceType01">
            <summary>设置 DefaultExceptionHandlerProvider.GetMessageHandlerGenericInterfaceType() 的 stub</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.GetMessageHandlerWrapperType">
            <summary>设置 DefaultExceptionHandlerProvider.GetMessageHandlerWrapperType() 的 存根</summary>
        </member>
        <member name="F:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.GetMessageHandlerWrapperType01">
            <summary>设置 DefaultExceptionHandlerProvider.GetMessageHandlerWrapperType() 的 stub</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.InitializeStub">
            <summary>初始化 type StubDefaultExceptionHandlerProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionHandlerProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionProcessor">
            <summary>ENode.Exceptions.Impl.DefaultExceptionProcessor 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionProcessor.#ctor(ENode.Infrastructure.ITypeCodeProvider{ENode.Exceptions.IExceptionHandler},ENode.Infrastructure.ITypeCodeProvider{ENode.Commanding.ICommand},ENode.Infrastructure.IMessageHandlerProvider{ENode.Exceptions.IExceptionHandler},ENode.Commanding.IProcessCommandSender,ENode.Domain.IRepository,ECommon.Retring.IActionExecutionService,ECommon.Logging.ILoggerFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionProcessor.InitializeStub">
            <summary>初始化 type StubDefaultExceptionProcessor 的新实例</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubDefaultExceptionProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.StubExceptionHandlerWrapper`1">
            <summary>ENode.Exceptions.Impl.ExceptionHandlerWrapper`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubExceptionHandlerWrapper`1.#ctor(ENode.Infrastructure.IMessageHandler{ENode.Exceptions.IExceptionHandlingContext,`0})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubExceptionHandlerWrapper`1.InitializeStub">
            <summary>初始化 type StubExceptionHandlerWrapper 的新实例</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubExceptionHandlerWrapper`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubExceptionHandlerWrapper`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubExceptionHandlerWrapper`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionHandlerTypeCodeProvider">
            <summary>ENode.Exceptions.Impl.NotImplementedExceptionHandlerTypeCodeProvider 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionHandlerTypeCodeProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionHandlerTypeCodeProvider.InitializeStub">
            <summary>初始化 type StubNotImplementedExceptionHandlerTypeCodeProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionHandlerTypeCodeProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionHandlerTypeCodeProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionHandlerTypeCodeProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionPublisher">
            <summary>ENode.Exceptions.Impl.NotImplementedExceptionPublisher 的存根类型</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionPublisher.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionPublisher.InitializeStub">
            <summary>初始化 type StubNotImplementedExceptionPublisher 的新实例</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionPublisher.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionPublisher.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Exceptions.Impl.Fakes.StubNotImplementedExceptionPublisher.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1">
            <summary>ENode.Infrastructure.AbstractTypeCodeProvider`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.#ctor(ENode.Infrastructure.AbstractTypeCodeProvider{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.Bind(ENode.Infrastructure.ITypeCodeProvider{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.RegisterTypeOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Int32})">
            <summary>设置 AbstractTypeCodeProvider`1.RegisterType(Int32 code) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.Constructor">
            <summary>设置 AbstractTypeCodeProvider`1.AbstractTypeCodeProvider`1() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.GetTypeCodeType">
            <summary>设置 AbstractTypeCodeProvider`1.GetTypeCode(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.GetTypeInt32">
            <summary>设置 AbstractTypeCodeProvider`1.GetType(Int32 typeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.RegisterTypeInt32Type">
            <summary>设置 AbstractTypeCodeProvider`1.RegisterType(Int32 code, Type type) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.AllInstances.RegisterTypeOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{ENode.Infrastructure.AbstractTypeCodeProvider{`0},System.Int32})">
            <summary>设置 AbstractTypeCodeProvider`1.RegisterType(Int32 code) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.AllInstances.GetTypeCodeType">
            <summary>设置 AbstractTypeCodeProvider`1.GetTypeCode(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.AllInstances.GetTypeInt32">
            <summary>设置 AbstractTypeCodeProvider`1.GetType(Int32 typeCode) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimAbstractTypeCodeProvider`1.AllInstances.RegisterTypeInt32Type">
            <summary>设置 AbstractTypeCodeProvider`1.RegisterType(Int32 code, Type type) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1">
            <summary>ENode.Infrastructure.BaseHandlerProvider`1 的填充码类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.#ctor(ENode.Infrastructure.BaseHandlerProvider{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.Bind(ENode.Infrastructure.IAssemblyInitializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.Bind(ENode.Infrastructure.IMessageHandlerProvider{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.Constructor">
            <summary>设置 BaseHandlerProvider`1.BaseHandlerProvider`1() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.GetMessageHandlersType">
            <summary>设置 BaseHandlerProvider`1.GetMessageHandlers(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.InitializeAssemblyArray">
            <summary>设置 BaseHandlerProvider`1.Initialize(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.IsMessageHandlerType">
            <summary>设置 BaseHandlerProvider`1.IsMessageHandler(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.RegisterMessageHandlerType">
            <summary>设置 BaseHandlerProvider`1.RegisterMessageHandler(Type messageHandlerType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.ScanHandlerInterfacesType">
            <summary>设置 BaseHandlerProvider`1.ScanHandlerInterfaces(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1._Initializeb__0Assembly">
            <summary>设置 BaseHandlerProvider`1.&lt;Initialize&gt;b__0(Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1._ScanHandlerInterfacesb__8Type">
            <summary>设置 BaseHandlerProvider`1.&lt;ScanHandlerInterfaces&gt;b__8(Type x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.AllInstances.GetMessageHandlersType">
            <summary>设置 BaseHandlerProvider`1.GetMessageHandlers(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.AllInstances.InitializeAssemblyArray">
            <summary>设置 BaseHandlerProvider`1.Initialize(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.AllInstances.IsMessageHandlerType">
            <summary>设置 BaseHandlerProvider`1.IsMessageHandler(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.AllInstances.RegisterMessageHandlerType">
            <summary>设置 BaseHandlerProvider`1.RegisterMessageHandler(Type messageHandlerType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.AllInstances.ScanHandlerInterfacesType">
            <summary>设置 BaseHandlerProvider`1.ScanHandlerInterfaces(Type type) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.AllInstances._Initializeb__0Assembly">
            <summary>设置 BaseHandlerProvider`1.&lt;Initialize&gt;b__0(Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimBaseHandlerProvider`1.AllInstances._ScanHandlerInterfacesb__8Type">
            <summary>设置 BaseHandlerProvider`1.&lt;ScanHandlerInterfaces&gt;b__8(Type x) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimConcurrentException">
            <summary>ENode.Infrastructure.ConcurrentException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimConcurrentException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimConcurrentException.#ctor(ENode.Infrastructure.ConcurrentException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimConcurrentException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimConcurrentException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimConcurrentException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimConcurrentException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimConcurrentException.Constructor">
            <summary>设置 ConcurrentException.ConcurrentException() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimConcurrentException.ConstructorString">
            <summary>设置 ConcurrentException.ConcurrentException(String message) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimConcurrentException.ConstructorStringException">
            <summary>设置 ConcurrentException.ConcurrentException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimConcurrentException.ConstructorStringExceptionObjectArray">
            <summary>设置 ConcurrentException.ConcurrentException(String message, Exception innerException, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimConcurrentException.ConstructorStringObjectArray">
            <summary>设置 ConcurrentException.ConcurrentException(String message, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimConcurrentException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimIOException">
            <summary>ENode.Infrastructure.IOException 的填充码类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimIOException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimIOException.#ctor(ENode.Infrastructure.IOException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimIOException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimIOException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimIOException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimIOException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimIOException.Constructor">
            <summary>设置 IOException.IOException() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimIOException.ConstructorString">
            <summary>设置 IOException.IOException(String message) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimIOException.ConstructorStringException">
            <summary>设置 IOException.IOException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimIOException.ConstructorStringExceptionObjectArray">
            <summary>设置 IOException.IOException(String message, Exception innerException, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimIOException.ConstructorStringObjectArray">
            <summary>设置 IOException.IOException(String message, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimIOException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3">
            <summary>ENode.Infrastructure.MessageHandlerWrapper`3 的填充码类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.#ctor(ENode.Infrastructure.MessageHandlerWrapper{`0,`1,`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.Bind(ENode.Infrastructure.IMessageHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.ConstructorIMessageHandlerOfT0T1">
            <summary>设置 MessageHandlerWrapper`3.MessageHandlerWrapper`3(IMessageHandler`2&lt;!0,!1&gt; messageHandler) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.GetInnerHandler">
            <summary>设置 MessageHandlerWrapper`3.GetInnerHandler() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.HandleObjectObject">
            <summary>设置 MessageHandlerWrapper`3.Handle(Object context, Object message) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.AllInstances.GetInnerHandler">
            <summary>设置 MessageHandlerWrapper`3.GetInnerHandler() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.ShimMessageHandlerWrapper`3.AllInstances.HandleObjectObject">
            <summary>设置 MessageHandlerWrapper`3.Handle(Object context, Object message) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubAbstractTypeCodeProvider`1">
            <summary>ENode.Infrastructure.AbstractTypeCodeProvider`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubAbstractTypeCodeProvider`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubAbstractTypeCodeProvider`1.InitializeStub">
            <summary>初始化 type StubAbstractTypeCodeProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubAbstractTypeCodeProvider`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubAbstractTypeCodeProvider`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubAbstractTypeCodeProvider`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1">
            <summary>ENode.Infrastructure.BaseHandlerProvider`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.GetMessageHandlerGenericInterfaceType">
            <summary>设置 BaseHandlerProvider`1.GetMessageHandlerGenericInterfaceType() 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.GetMessageHandlerGenericInterfaceType01">
            <summary>设置 BaseHandlerProvider`1.GetMessageHandlerGenericInterfaceType() 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.GetMessageHandlerWrapperType">
            <summary>设置 BaseHandlerProvider`1.GetMessageHandlerWrapperType() 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.GetMessageHandlerWrapperType01">
            <summary>设置 BaseHandlerProvider`1.GetMessageHandlerWrapperType() 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.InitializeStub">
            <summary>初始化 type StubBaseHandlerProvider 的新实例</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubBaseHandlerProvider`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubConcurrentException">
            <summary>ENode.Infrastructure.ConcurrentException 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.#ctor(System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubConcurrentException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubConcurrentException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.InitializeStub">
            <summary>初始化 type StubConcurrentException 的新实例</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubConcurrentException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubConcurrentException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubConcurrentException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubConcurrentException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubConcurrentException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubConcurrentException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubConcurrentException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubConcurrentException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubConcurrentException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubConcurrentException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubIAssemblyInitializer">
            <summary>ENode.Infrastructure.IAssemblyInitializer 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIAssemblyInitializer.#ctor">
            <summary>初始化 type StubIAssemblyInitializer 的新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIAssemblyInitializer.en::ENode#Infrastructure#IAssemblyInitializer#Initialize(System.Reflection.Assembly[])">
            <summary>设置 IAssemblyInitializer.Initialize(Assembly[] assemblies) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIAssemblyInitializer.InitializeAssemblyArray">
            <summary>设置 IAssemblyInitializer.Initialize(Assembly[] assemblies) 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubILockService">
            <summary>ENode.Infrastructure.ILockService 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubILockService.#ctor">
            <summary>初始化 type StubILockService 的新实例</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubILockService.AddLockKeyString">
            <summary>设置 ILockService.AddLockKey(String lockKey) 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubILockService.en::ENode#Infrastructure#ILockService#AddLockKey(System.String)">
            <summary>设置 ILockService.AddLockKey(String lockKey) 的 存根</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubILockService.en::ENode#Infrastructure#ILockService#ExecuteInLock(System.String,System.Action)">
            <summary>设置 ILockService.ExecuteInLock(String lockKey, Action action) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubILockService.ExecuteInLockStringAction">
            <summary>设置 ILockService.ExecuteInLock(String lockKey, Action action) 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubIMessageHandler">
            <summary>ENode.Infrastructure.IMessageHandler 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageHandler.#ctor">
            <summary>初始化 type StubIMessageHandler 的新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageHandler.en::ENode#Infrastructure#IMessageHandler#GetInnerHandler">
            <summary>设置 IMessageHandler.GetInnerHandler() 的 存根</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageHandler.en::ENode#Infrastructure#IMessageHandler#Handle(System.Object,System.Object)">
            <summary>设置 IMessageHandler.Handle(Object context, Object message) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageHandler.GetInnerHandler">
            <summary>设置 IMessageHandler.GetInnerHandler() 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageHandler.HandleObjectObject">
            <summary>设置 IMessageHandler.Handle(Object context, Object message) 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubIMessageHandler`2">
            <summary>ENode.Infrastructure.IMessageHandler`2 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageHandler`2.#ctor">
            <summary>初始化 type StubIMessageHandler 的新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageHandler`2.en::ENode#Infrastructure#IMessageHandler{TMessageHandleContext@TMessage}#Handle(`0,`1)">
            <summary>设置 IMessageHandler`2.Handle(!0 context, !1 message) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageHandler`2.HandleT0T1">
            <summary>设置 IMessageHandler`2.Handle(!0 context, !1 message) 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubIMessageHandlerProvider`1">
            <summary>ENode.Infrastructure.IMessageHandlerProvider`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageHandlerProvider`1.#ctor">
            <summary>初始化 type StubIMessageHandlerProvider 的新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageHandlerProvider`1.en::ENode#Infrastructure#IMessageHandlerProvider{TMessageHandlerInterface}#GetMessageHandlers(System.Type)">
            <summary>设置 IMessageHandlerProvider`1.GetMessageHandlers(Type messageType) 的 存根</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageHandlerProvider`1.en::ENode#Infrastructure#IMessageHandlerProvider{TMessageHandlerInterface}#IsMessageHandler(System.Type)">
            <summary>设置 IMessageHandlerProvider`1.IsMessageHandler(Type type) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageHandlerProvider`1.GetMessageHandlersType">
            <summary>设置 IMessageHandlerProvider`1.GetMessageHandlers(Type messageType) 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageHandlerProvider`1.IsMessageHandlerType">
            <summary>设置 IMessageHandlerProvider`1.IsMessageHandler(Type type) 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubIMessageProcessContext`1">
            <summary>ENode.Infrastructure.IMessageProcessContext`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageProcessContext`1.#ctor">
            <summary>初始化 type StubIMessageProcessContext 的新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageProcessContext`1.en::ENode#Infrastructure#IMessageProcessContext{TMessage}#OnMessageProcessed(`0)">
            <summary>设置 IMessageProcessContext`1.OnMessageProcessed(!0 message) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageProcessContext`1.OnMessageProcessedT0">
            <summary>设置 IMessageProcessContext`1.OnMessageProcessed(!0 message) 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubIMessageProcessor`1">
            <summary>ENode.Infrastructure.IMessageProcessor`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageProcessor`1.#ctor">
            <summary>初始化 type StubIMessageProcessor 的新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageProcessor`1.AttachBackingFieldToName">
            <summary>附加委托以将 StubIMessageProcessor.Name 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessageProcessor`1.en::ENode#Infrastructure#IMessageProcessor{TMessage}#Process(`0,ENode.Infrastructure.IMessageProcessContext{`0})">
            <summary>设置 IMessageProcessor`1.Process(!0 message, IMessageProcessContext`1&lt;!0&gt; context) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageProcessor`1.NameGet">
            <summary>设置 IMessageProcessor`1.get_Name() 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageProcessor`1.NameSetString">
            <summary>设置 IMessageProcessor`1.set_Name(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessageProcessor`1.ProcessT0IMessageProcessContextOfT0">
            <summary>设置 IMessageProcessor`1.Process(!0 message, IMessageProcessContext`1&lt;!0&gt; context) 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIMessageProcessor`1.en::ENode#Infrastructure#IMessageProcessor{TMessage}#Name">
            <summary>设置 IMessageProcessor`1.get_Name() 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubIMessagePublisher`1">
            <summary>ENode.Infrastructure.IMessagePublisher`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessagePublisher`1.#ctor">
            <summary>初始化 type StubIMessagePublisher 的新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIMessagePublisher`1.en::ENode#Infrastructure#IMessagePublisher{TMessage}#Publish(`0)">
            <summary>设置 IMessagePublisher`1.Publish(!0 message) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIMessagePublisher`1.PublishT0">
            <summary>设置 IMessagePublisher`1.Publish(!0 message) 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubIOException">
            <summary>ENode.Infrastructure.IOException 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.#ctor(System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubIOException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubIOException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.InitializeStub">
            <summary>初始化 type StubIOException 的新实例</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubIOException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubIOException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIOException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIOException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIOException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIOException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIOException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIOException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIOException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubIOException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubITypeCodeProvider`1">
            <summary>ENode.Infrastructure.ITypeCodeProvider`1 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubITypeCodeProvider`1.#ctor">
            <summary>初始化 type StubITypeCodeProvider 的新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubITypeCodeProvider`1.en::ENode#Infrastructure#ITypeCodeProvider{T}#GetType(System.Int32)">
            <summary>设置 ITypeCodeProvider`1.GetType(Int32 typeCode) 的 存根</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubITypeCodeProvider`1.en::ENode#Infrastructure#ITypeCodeProvider{T}#GetTypeCode(System.Type)">
            <summary>设置 ITypeCodeProvider`1.GetTypeCode(Type type) 的 存根</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubITypeCodeProvider`1.GetTypeCodeType">
            <summary>设置 ITypeCodeProvider`1.GetTypeCode(Type type) 的 stub</summary>
        </member>
        <member name="F:ENode.Infrastructure.Fakes.StubITypeCodeProvider`1.GetTypeInt32">
            <summary>设置 ITypeCodeProvider`1.GetType(Int32 typeCode) 的 stub</summary>
        </member>
        <member name="T:ENode.Infrastructure.Fakes.StubMessageHandlerWrapper`3">
            <summary>ENode.Infrastructure.MessageHandlerWrapper`3 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubMessageHandlerWrapper`3.#ctor(ENode.Infrastructure.IMessageHandler{`0,`1})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Fakes.StubMessageHandlerWrapper`3.InitializeStub">
            <summary>初始化 type StubMessageHandlerWrapper 的新实例</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubMessageHandlerWrapper`3.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubMessageHandlerWrapper`3.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Fakes.StubMessageHandlerWrapper`3.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService">
            <summary>ENode.Infrastructure.Impl.SQL.SqlServerLockService 的填充码类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.#ctor(ENode.Infrastructure.Impl.SQL.SqlServerLockService)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.Bind(ENode.Infrastructure.ILockService)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.AddLockKeyString">
            <summary>设置 SqlServerLockService.AddLockKey(String lockKey) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.Constructor">
            <summary>设置 SqlServerLockService.SqlServerLockService() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.ExecuteInLockStringAction">
            <summary>设置 SqlServerLockService.ExecuteInLock(String lockKey, Action action) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.GetConnection">
            <summary>设置 SqlServerLockService.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.LockKeyIDbTransactionString">
            <summary>设置 SqlServerLockService.LockKey(IDbTransaction transaction, String key) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.AllInstances.AddLockKeyString">
            <summary>设置 SqlServerLockService.AddLockKey(String lockKey) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.AllInstances.ExecuteInLockStringAction">
            <summary>设置 SqlServerLockService.ExecuteInLock(String lockKey, Action action) 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.AllInstances.GetConnection">
            <summary>设置 SqlServerLockService.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.ShimSqlServerLockService.AllInstances.LockKeyIDbTransactionString">
            <summary>设置 SqlServerLockService.LockKey(IDbTransaction transaction, String key) 的 填充码</summary>
        </member>
        <member name="T:ENode.Infrastructure.Impl.SQL.Fakes.StubSqlServerLockService">
            <summary>ENode.Infrastructure.Impl.SQL.SqlServerLockService 的存根类型</summary>
        </member>
        <member name="M:ENode.Infrastructure.Impl.SQL.Fakes.StubSqlServerLockService.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Infrastructure.Impl.SQL.Fakes.StubSqlServerLockService.InitializeStub">
            <summary>初始化 type StubSqlServerLockService 的新实例</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.StubSqlServerLockService.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.StubSqlServerLockService.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Infrastructure.Impl.SQL.Fakes.StubSqlServerLockService.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Snapshoting.Fakes.ShimSnapshot">
            <summary>ENode.Snapshoting.Snapshot 的填充码类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.ShimSnapshot.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.ShimSnapshot.#ctor(ENode.Snapshoting.Snapshot)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.ShimSnapshot.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.ShimSnapshot.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AggregateRootIdGet">
            <summary>设置 Snapshot.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AggregateRootIdSetString">
            <summary>设置 Snapshot.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AggregateRootTypeCodeGet">
            <summary>设置 Snapshot.get_AggregateRootTypeCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AggregateRootTypeCodeSetInt32">
            <summary>设置 Snapshot.set_AggregateRootTypeCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.ConstructorInt32StringInt32ByteArrayDateTime">
            <summary>设置 Snapshot.Snapshot(Int32 aggregateRootTypeCode, String aggregateRootId, Int32 version, Byte[] payload, DateTime timestamp) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.PayloadGet">
            <summary>设置 Snapshot.get_Payload() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.PayloadSetByteArray">
            <summary>设置 Snapshot.set_Payload(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.TimestampGet">
            <summary>设置 Snapshot.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.TimestampSetDateTime">
            <summary>设置 Snapshot.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.VersionGet">
            <summary>设置 Snapshot.get_Version() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.VersionSetInt32">
            <summary>设置 Snapshot.set_Version(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.AggregateRootIdGet">
            <summary>设置 Snapshot.get_AggregateRootId() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.AggregateRootIdSetString">
            <summary>设置 Snapshot.set_AggregateRootId(String value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.AggregateRootTypeCodeGet">
            <summary>设置 Snapshot.get_AggregateRootTypeCode() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.AggregateRootTypeCodeSetInt32">
            <summary>设置 Snapshot.set_AggregateRootTypeCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.PayloadGet">
            <summary>设置 Snapshot.get_Payload() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.PayloadSetByteArray">
            <summary>设置 Snapshot.set_Payload(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.TimestampGet">
            <summary>设置 Snapshot.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.TimestampSetDateTime">
            <summary>设置 Snapshot.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.VersionGet">
            <summary>设置 Snapshot.get_Version() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.ShimSnapshot.AllInstances.VersionSetInt32">
            <summary>设置 Snapshot.set_Version(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ENode.Snapshoting.Fakes.StubISnapshotPolicy">
            <summary>ENode.Snapshoting.ISnapshotPolicy 的存根类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubISnapshotPolicy.#ctor">
            <summary>初始化 type StubISnapshotPolicy 的新实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubISnapshotPolicy.en::ENode#Snapshoting#ISnapshotPolicy#ShouldCreateSnapshot(ENode.Domain.IAggregateRoot)">
            <summary>设置 ISnapshotPolicy.ShouldCreateSnapshot(IAggregateRoot aggregateRoot) 的 存根</summary>
        </member>
        <member name="F:ENode.Snapshoting.Fakes.StubISnapshotPolicy.ShouldCreateSnapshotIAggregateRoot">
            <summary>设置 ISnapshotPolicy.ShouldCreateSnapshot(IAggregateRoot aggregateRoot) 的 stub</summary>
        </member>
        <member name="T:ENode.Snapshoting.Fakes.StubISnapshotStore">
            <summary>ENode.Snapshoting.ISnapshotStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubISnapshotStore.#ctor">
            <summary>初始化 type StubISnapshotStore 的新实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubISnapshotStore.en::ENode#Snapshoting#ISnapshotStore#GetLastestSnapshot(System.String,System.Type)">
            <summary>设置 ISnapshotStore.GetLastestSnapshot(String aggregateRootId, Type aggregateRootType) 的 存根</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubISnapshotStore.en::ENode#Snapshoting#ISnapshotStore#StoreShapshot(ENode.Snapshoting.Snapshot)">
            <summary>设置 ISnapshotStore.StoreShapshot(Snapshot snapshot) 的 存根</summary>
        </member>
        <member name="F:ENode.Snapshoting.Fakes.StubISnapshotStore.GetLastestSnapshotStringType">
            <summary>设置 ISnapshotStore.GetLastestSnapshot(String aggregateRootId, Type aggregateRootType) 的 stub</summary>
        </member>
        <member name="F:ENode.Snapshoting.Fakes.StubISnapshotStore.StoreShapshotSnapshot">
            <summary>设置 ISnapshotStore.StoreShapshot(Snapshot snapshot) 的 stub</summary>
        </member>
        <member name="T:ENode.Snapshoting.Fakes.StubISnapshotter">
            <summary>ENode.Snapshoting.ISnapshotter 的存根类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubISnapshotter.#ctor">
            <summary>初始化 type StubISnapshotter 的新实例</summary>
        </member>
        <member name="F:ENode.Snapshoting.Fakes.StubISnapshotter.CreateSnapshotIAggregateRoot">
            <summary>设置 ISnapshotter.CreateSnapshot(IAggregateRoot aggregateRoot) 的 stub</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubISnapshotter.en::ENode#Snapshoting#ISnapshotter#CreateSnapshot(ENode.Domain.IAggregateRoot)">
            <summary>设置 ISnapshotter.CreateSnapshot(IAggregateRoot aggregateRoot) 的 存根</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubISnapshotter.en::ENode#Snapshoting#ISnapshotter#RestoreFromSnapshot(ENode.Snapshoting.Snapshot)">
            <summary>设置 ISnapshotter.RestoreFromSnapshot(Snapshot snapshot) 的 存根</summary>
        </member>
        <member name="F:ENode.Snapshoting.Fakes.StubISnapshotter.RestoreFromSnapshotSnapshot">
            <summary>设置 ISnapshotter.RestoreFromSnapshot(Snapshot snapshot) 的 stub</summary>
        </member>
        <member name="T:ENode.Snapshoting.Fakes.StubSnapshot">
            <summary>ENode.Snapshoting.Snapshot 的存根类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubSnapshot.#ctor(System.Int32,System.String,System.Int32,System.Byte[],System.DateTime)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Fakes.StubSnapshot.InitializeStub">
            <summary>初始化 type StubSnapshot 的新实例</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.StubSnapshot.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.StubSnapshot.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Snapshoting.Fakes.StubSnapshot.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter">
            <summary>ENode.Snapshoting.Impl.DefaultSnapshotter 的填充码类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.#ctor(ENode.Snapshoting.Impl.DefaultSnapshotter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.Bind(ENode.Snapshoting.ISnapshotter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.ConstructorIAggregateRootFactoryITypeCodeProviderOfIAggregateRootIBinarySerializer">
            <summary>设置 DefaultSnapshotter.DefaultSnapshotter(IAggregateRootFactory aggregateRootFactory, ITypeCodeProvider`1&lt;IAggregateRoot&gt; aggregateRootTypeCodeProvider, IBinarySerializer binarySerializer) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.CreateSnapshotIAggregateRoot">
            <summary>设置 DefaultSnapshotter.CreateSnapshot(IAggregateRoot aggregateRoot) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.RestoreFromSnapshotSnapshot">
            <summary>设置 DefaultSnapshotter.RestoreFromSnapshot(Snapshot snapshot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.AllInstances.CreateSnapshotIAggregateRoot">
            <summary>设置 DefaultSnapshotter.CreateSnapshot(IAggregateRoot aggregateRoot) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimDefaultSnapshotter.AllInstances.RestoreFromSnapshotSnapshot">
            <summary>设置 DefaultSnapshotter.RestoreFromSnapshot(Snapshot snapshot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore">
            <summary>ENode.Snapshoting.Impl.EmptySnapshotStore 的填充码类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.#ctor(ENode.Snapshoting.Impl.EmptySnapshotStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.Bind(ENode.Snapshoting.ISnapshotStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.Constructor">
            <summary>设置 EmptySnapshotStore.EmptySnapshotStore() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.GetLastestSnapshotStringType">
            <summary>设置 EmptySnapshotStore.GetLastestSnapshot(String aggregateRootId, Type aggregateRootType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.StoreShapshotSnapshot">
            <summary>设置 EmptySnapshotStore.StoreShapshot(Snapshot snapshot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.AllInstances.GetLastestSnapshotStringType">
            <summary>设置 EmptySnapshotStore.GetLastestSnapshot(String aggregateRootId, Type aggregateRootType) 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimEmptySnapshotStore.AllInstances.StoreShapshotSnapshot">
            <summary>设置 EmptySnapshotStore.StoreShapshot(Snapshot snapshot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy">
            <summary>ENode.Snapshoting.Impl.NoSnapshotPolicy 的填充码类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.#ctor(ENode.Snapshoting.Impl.NoSnapshotPolicy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.Bind(ENode.Snapshoting.ISnapshotPolicy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.Constructor">
            <summary>设置 NoSnapshotPolicy.NoSnapshotPolicy() 的 填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.ShouldCreateSnapshotIAggregateRoot">
            <summary>设置 NoSnapshotPolicy.ShouldCreateSnapshot(IAggregateRoot aggregateRoot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.ShimNoSnapshotPolicy.AllInstances.ShouldCreateSnapshotIAggregateRoot">
            <summary>设置 NoSnapshotPolicy.ShouldCreateSnapshot(IAggregateRoot aggregateRoot) 的 填充码</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.StubDefaultSnapshotter">
            <summary>ENode.Snapshoting.Impl.DefaultSnapshotter 的存根类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.StubDefaultSnapshotter.#ctor(ENode.Domain.IAggregateRootFactory,ENode.Infrastructure.ITypeCodeProvider{ENode.Domain.IAggregateRoot},ECommon.Serializing.IBinarySerializer)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.StubDefaultSnapshotter.InitializeStub">
            <summary>初始化 type StubDefaultSnapshotter 的新实例</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubDefaultSnapshotter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubDefaultSnapshotter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubDefaultSnapshotter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.StubEmptySnapshotStore">
            <summary>ENode.Snapshoting.Impl.EmptySnapshotStore 的存根类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.StubEmptySnapshotStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.StubEmptySnapshotStore.InitializeStub">
            <summary>初始化 type StubEmptySnapshotStore 的新实例</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubEmptySnapshotStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubEmptySnapshotStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubEmptySnapshotStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ENode.Snapshoting.Impl.Fakes.StubNoSnapshotPolicy">
            <summary>ENode.Snapshoting.Impl.NoSnapshotPolicy 的存根类型</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.StubNoSnapshotPolicy.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ENode.Snapshoting.Impl.Fakes.StubNoSnapshotPolicy.InitializeStub">
            <summary>初始化 type StubNoSnapshotPolicy 的新实例</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubNoSnapshotPolicy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubNoSnapshotPolicy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ENode.Snapshoting.Impl.Fakes.StubNoSnapshotPolicy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
